
FLF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009070  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009210  08009210  0000a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  0000b204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009600  08009600  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  0000b204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  08009610  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  20000204  08009814  0000b204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08009814  0000b644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe5c  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e7  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb2  00000000  00000000  0001e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019400  00000000  00000000  0001f12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001183f  00000000  00000000  0003852a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de7f  00000000  00000000  00049d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005048  00000000  00000000  000e7c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ecc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091f8 	.word	0x080091f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	080091f8 	.word	0x080091f8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 b9be 	b.w	8000fc0 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	468e      	mov	lr, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d962      	bls.n	8000da4 <__udivmoddi4+0xdc>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cec:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf0:	40b7      	lsls	r7, r6
 8000cf2:	ea43 0808 	orr.w	r8, r3, r8
 8000cf6:	40b4      	lsls	r4, r6
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d04:	0c23      	lsrs	r3, r4, #16
 8000d06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d1c:	f080 80ea 	bcs.w	8000ef4 <__udivmoddi4+0x22c>
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f240 80e7 	bls.w	8000ef4 <__udivmoddi4+0x22c>
 8000d26:	3902      	subs	r1, #2
 8000d28:	443b      	add	r3, r7
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	b2a3      	uxth	r3, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d48:	f080 80d6 	bcs.w	8000ef8 <__udivmoddi4+0x230>
 8000d4c:	459c      	cmp	ip, r3
 8000d4e:	f240 80d3 	bls.w	8000ef8 <__udivmoddi4+0x230>
 8000d52:	443b      	add	r3, r7
 8000d54:	3802      	subs	r0, #2
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba3 030c 	sub.w	r3, r3, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f3      	lsrs	r3, r6
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x14c>
 8000d86:	4573      	cmp	r3, lr
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xc8>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f200 8105 	bhi.w	8000f9a <__udivmoddi4+0x2d2>
 8000d90:	1a84      	subs	r4, r0, r2
 8000d92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	4690      	mov	r8, r2
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	d0e5      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000da2:	e7e2      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f000 8090 	beq.w	8000eca <__udivmoddi4+0x202>
 8000daa:	fab2 f682 	clz	r6, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	f040 80a4 	bne.w	8000efc <__udivmoddi4+0x234>
 8000db4:	1a8a      	subs	r2, r1, r2
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	b280      	uxth	r0, r0
 8000dbe:	b2bc      	uxth	r4, r7
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dc6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dce:	fb04 f20c 	mul.w	r2, r4, ip
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x11e>
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x11c>
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f200 80e0 	bhi.w	8000fa4 <__udivmoddi4+0x2dc>
 8000de4:	46c4      	mov	ip, r8
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000df0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000df4:	fb02 f404 	mul.w	r4, r2, r4
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x144>
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x142>
 8000e04:	429c      	cmp	r4, r3
 8000e06:	f200 80ca 	bhi.w	8000f9e <__udivmoddi4+0x2d6>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa0e f401 	lsl.w	r4, lr, r1
 8000e24:	fa20 f306 	lsr.w	r3, r0, r6
 8000e28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	fa1f fc87 	uxth.w	ip, r7
 8000e3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d909      	bls.n	8000e68 <__udivmoddi4+0x1a0>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e5a:	f080 809c 	bcs.w	8000f96 <__udivmoddi4+0x2ce>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f240 8099 	bls.w	8000f96 <__udivmoddi4+0x2ce>
 8000e64:	3802      	subs	r0, #2
 8000e66:	443c      	add	r4, r7
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	fa1f fe83 	uxth.w	lr, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e80:	45a4      	cmp	ip, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1ce>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e8a:	f080 8082 	bcs.w	8000f92 <__udivmoddi4+0x2ca>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d97f      	bls.n	8000f92 <__udivmoddi4+0x2ca>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e9a:	eba4 040c 	sub.w	r4, r4, ip
 8000e9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ea2:	4564      	cmp	r4, ip
 8000ea4:	4673      	mov	r3, lr
 8000ea6:	46e1      	mov	r9, ip
 8000ea8:	d362      	bcc.n	8000f70 <__udivmoddi4+0x2a8>
 8000eaa:	d05f      	beq.n	8000f6c <__udivmoddi4+0x2a4>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x1fe>
 8000eae:	ebb8 0203 	subs.w	r2, r8, r3
 8000eb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	fa22 f301 	lsr.w	r3, r2, r1
 8000ebe:	431e      	orrs	r6, r3
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e74f      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000eca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ece:	0c01      	lsrs	r1, r0, #16
 8000ed0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ed4:	b280      	uxth	r0, r0
 8000ed6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eda:	463b      	mov	r3, r7
 8000edc:	4638      	mov	r0, r7
 8000ede:	463c      	mov	r4, r7
 8000ee0:	46b8      	mov	r8, r7
 8000ee2:	46be      	mov	lr, r7
 8000ee4:	2620      	movs	r6, #32
 8000ee6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eea:	eba2 0208 	sub.w	r2, r2, r8
 8000eee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ef2:	e766      	b.n	8000dc2 <__udivmoddi4+0xfa>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	e718      	b.n	8000d2a <__udivmoddi4+0x62>
 8000ef8:	4610      	mov	r0, r2
 8000efa:	e72c      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000efc:	f1c6 0220 	rsb	r2, r6, #32
 8000f00:	fa2e f302 	lsr.w	r3, lr, r2
 8000f04:	40b7      	lsls	r7, r6
 8000f06:	40b1      	lsls	r1, r6
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f16:	b2bc      	uxth	r4, r7
 8000f18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb08 f904 	mul.w	r9, r8, r4
 8000f26:	40b0      	lsls	r0, r6
 8000f28:	4589      	cmp	r9, r1
 8000f2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f2e:	b280      	uxth	r0, r0
 8000f30:	d93e      	bls.n	8000fb0 <__udivmoddi4+0x2e8>
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f38:	d201      	bcs.n	8000f3e <__udivmoddi4+0x276>
 8000f3a:	4589      	cmp	r9, r1
 8000f3c:	d81f      	bhi.n	8000f7e <__udivmoddi4+0x2b6>
 8000f3e:	eba1 0109 	sub.w	r1, r1, r9
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fb09 f804 	mul.w	r8, r9, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f54:	4542      	cmp	r2, r8
 8000f56:	d229      	bcs.n	8000fac <__udivmoddi4+0x2e4>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f5e:	d2c4      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f60:	4542      	cmp	r2, r8
 8000f62:	d2c2      	bcs.n	8000eea <__udivmoddi4+0x222>
 8000f64:	f1a9 0102 	sub.w	r1, r9, #2
 8000f68:	443a      	add	r2, r7
 8000f6a:	e7be      	b.n	8000eea <__udivmoddi4+0x222>
 8000f6c:	45f0      	cmp	r8, lr
 8000f6e:	d29d      	bcs.n	8000eac <__udivmoddi4+0x1e4>
 8000f70:	ebbe 0302 	subs.w	r3, lr, r2
 8000f74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f78:	3801      	subs	r0, #1
 8000f7a:	46e1      	mov	r9, ip
 8000f7c:	e796      	b.n	8000eac <__udivmoddi4+0x1e4>
 8000f7e:	eba7 0909 	sub.w	r9, r7, r9
 8000f82:	4449      	add	r1, r9
 8000f84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8c:	fb09 f804 	mul.w	r8, r9, r4
 8000f90:	e7db      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f92:	4673      	mov	r3, lr
 8000f94:	e77f      	b.n	8000e96 <__udivmoddi4+0x1ce>
 8000f96:	4650      	mov	r0, sl
 8000f98:	e766      	b.n	8000e68 <__udivmoddi4+0x1a0>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e6fd      	b.n	8000d9a <__udivmoddi4+0xd2>
 8000f9e:	443b      	add	r3, r7
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	e733      	b.n	8000e0c <__udivmoddi4+0x144>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	443b      	add	r3, r7
 8000faa:	e71c      	b.n	8000de6 <__udivmoddi4+0x11e>
 8000fac:	4649      	mov	r1, r9
 8000fae:	e79c      	b.n	8000eea <__udivmoddi4+0x222>
 8000fb0:	eba1 0109 	sub.w	r1, r1, r9
 8000fb4:	46c4      	mov	ip, r8
 8000fb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fba:	fb09 f804 	mul.w	r8, r9, r4
 8000fbe:	e7c4      	b.n	8000f4a <__udivmoddi4+0x282>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <setMotorSpeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setMotorSpeed(uint8_t motor, int32_t speed) {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
    uint16_t pwm = abs(speed);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bfb8      	it	lt
 8000fd6:	425b      	neglt	r3, r3
 8000fd8:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fde:	d901      	bls.n	8000fe4 <setMotorSpeed+0x20>
 8000fe0:	23c8      	movs	r3, #200	@ 0xc8
 8000fe2:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d110      	bne.n	800100c <setMotorSpeed+0x48>
        if (speed > 0) {
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd06      	ble.n	8000ffe <setMotorSpeed+0x3a>
            TIM1->CCR1 = pwm;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <setMotorSpeed+0x80>)
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM1->CCR2 = 0;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <setMotorSpeed+0x80>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	639a      	str	r2, [r3, #56]	@ 0x38
        } else {
            TIM2->CCR1 = 0;
            TIM3->CCR1 = pwm;
        }
    }
}
 8000ffc:	e01b      	b.n	8001036 <setMotorSpeed+0x72>
            TIM1->CCR1 = 0;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <setMotorSpeed+0x80>)
 8001000:	2200      	movs	r2, #0
 8001002:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = pwm;
 8001004:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <setMotorSpeed+0x80>)
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800100a:	e014      	b.n	8001036 <setMotorSpeed+0x72>
    else if (motor == 1) {  // Right motor
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d111      	bne.n	8001036 <setMotorSpeed+0x72>
        if (speed > 0) {
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	dd07      	ble.n	8001028 <setMotorSpeed+0x64>
            TIM2->CCR1 = pwm;
 8001018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM3->CCR1 = 0;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <setMotorSpeed+0x84>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001026:	e006      	b.n	8001036 <setMotorSpeed+0x72>
            TIM2->CCR1 = 0;
 8001028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800102c:	2200      	movs	r2, #0
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM3->CCR1 = pwm;
 8001030:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <setMotorSpeed+0x84>)
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40010000 	.word	0x40010000
 8001048:	40000400 	.word	0x40000400

0800104c <line_data>:
float line_data(void) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	uint32_t weighted_sum = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
	uint32_t onLine = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < 8; i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	e016      	b.n	8001092 <line_data+0x46>
        if (adc_buffer[i] > sensor_threshold) {
 8001064:	4a1a      	ldr	r2, [pc, #104]	@ (80010d0 <line_data+0x84>)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	4a19      	ldr	r2, [pc, #100]	@ (80010d4 <line_data+0x88>)
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	4293      	cmp	r3, r2
 8001072:	d90b      	bls.n	800108c <line_data+0x40>
            weighted_sum += sensorWeight[i];
 8001074:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <line_data+0x8c>)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
            sum += 1;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
            onLine = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b07      	cmp	r3, #7
 8001096:	dde5      	ble.n	8001064 <line_data+0x18>
        }
    }

    if (!onLine) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <line_data+0x58>
        return 255;  // Line lost condition
 800109e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010dc <line_data+0x90>
 80010a2:	e00b      	b.n	80010bc <line_data+0x70>
    }

    return (float)weighted_sum / (float)sum;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80010bc:	eef0 7a66 	vmov.f32	s15, s13
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000450 	.word	0x20000450
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000000c 	.word	0x2000000c
 80010dc:	437f0000 	.word	0x437f0000

080010e0 <send_telemetry_data>:

void send_telemetry_data(float current_position,float pid_err, float pid_out) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80010ee:	ed87 1a01 	vstr	s2, [r7, #4]
    static TelemetryPacket packet;

    // 1. Set header
    packet.header_start = '<';
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <send_telemetry_data+0xb8>)
 80010f4:	223c      	movs	r2, #60	@ 0x3c
 80010f6:	701a      	strb	r2, [r3, #0]
    packet.header_end = '>';
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <send_telemetry_data+0xb8>)
 80010fa:	223e      	movs	r2, #62	@ 0x3e
 80010fc:	705a      	strb	r2, [r3, #1]

    // 2. Add the live position data
    packet.position = current_position;
 80010fe:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <send_telemetry_data+0xb8>)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f8c2 3002 	str.w	r3, [r2, #2]

    // 3. Fill sensor data
    for(int i = 0; i < 8; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e00d      	b.n	8001128 <send_telemetry_data+0x48>
        packet.sensor_values[i] = (uint16_t)adc_buffer[i];
 800110c:	4a23      	ldr	r2, [pc, #140]	@ (800119c <send_telemetry_data+0xbc>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	b299      	uxth	r1, r3
 8001116:	4a20      	ldr	r2, [pc, #128]	@ (8001198 <send_telemetry_data+0xb8>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 8; i++) {
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2b07      	cmp	r3, #7
 800112c:	ddee      	ble.n	800110c <send_telemetry_data+0x2c>
    }
    packet.sensor_values[8] = 0; // 9th sensor is unused
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <send_telemetry_data+0xb8>)
 8001130:	2200      	movs	r2, #0
 8001132:	82da      	strh	r2, [r3, #22]

    // 4. Fill with LIVE robot state
    packet.status_code = status_to_send;
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <send_telemetry_data+0xc0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <send_telemetry_data+0xb8>)
 800113c:	761a      	strb	r2, [r3, #24]
    packet.kp = Kp;
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <send_telemetry_data+0xc4>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <send_telemetry_data+0xb8>)
 8001144:	f8c3 2019 	str.w	r2, [r3, #25]
    packet.ki = Ki;
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <send_telemetry_data+0xc8>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <send_telemetry_data+0xb8>)
 800114e:	f8c3 201d 	str.w	r2, [r3, #29]
    packet.kd = Kd;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <send_telemetry_data+0xcc>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <send_telemetry_data+0xb8>)
 8001158:	f8c3 2021 	str.w	r2, [r3, #33]	@ 0x21
    packet.threshold = sensor_threshold;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <send_telemetry_data+0xd0>)
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <send_telemetry_data+0xb8>)
 8001162:	f8a3 2025 	strh.w	r2, [r3, #37]	@ 0x25
    packet.base_speed = (uint8_t)base_speed;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <send_telemetry_data+0xd4>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <send_telemetry_data+0xb8>)
 800116c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    packet.pid_error = pid_err;
 8001170:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <send_telemetry_data+0xb8>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	6293      	str	r3, [r2, #40]	@ 0x28
    packet.pid_output = pid_out;
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <send_telemetry_data+0xb8>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // 5. Transmit the packet
    HAL_UART_Transmit(&huart6, (uint8_t*)&packet, sizeof(TelemetryPacket), 100);
 800117c:	2364      	movs	r3, #100	@ 0x64
 800117e:	2230      	movs	r2, #48	@ 0x30
 8001180:	4905      	ldr	r1, [pc, #20]	@ (8001198 <send_telemetry_data+0xb8>)
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <send_telemetry_data+0xd8>)
 8001184:	f004 f86c 	bl	8005260 <HAL_UART_Transmit>

    // 6. Reset the status code after sending
    status_to_send = 0;
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <send_telemetry_data+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200004c0 	.word	0x200004c0
 800119c:	20000450 	.word	0x20000450
 80011a0:	2000044c 	.word	0x2000044c
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000448 	.word	0x20000448
 80011ac:	20000004 	.word	0x20000004
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000000a 	.word	0x2000000a
 80011b8:	200003a0 	.word	0x200003a0

080011bc <handle_received_command>:
void handle_received_command(uint8_t* buffer, uint16_t len) {
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	b08d      	sub	sp, #52	@ 0x34
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	460b      	mov	r3, r1
 80011c8:	817b      	strh	r3, [r7, #10]
 80011ca:	466b      	mov	r3, sp
 80011cc:	461e      	mov	r6, r3
  // Create a local, null-terminated copy to work with safely.
  char cmd_string[len + 1];
 80011ce:	897b      	ldrh	r3, [r7, #10]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	1e4b      	subs	r3, r1, #1
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011d6:	460a      	mov	r2, r1
 80011d8:	2300      	movs	r3, #0
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011f2:	460a      	mov	r2, r1
 80011f4:	2300      	movs	r3, #0
 80011f6:	4614      	mov	r4, r2
 80011f8:	461d      	mov	r5, r3
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	00eb      	lsls	r3, r5, #3
 8001204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001208:	00e2      	lsls	r2, r4, #3
 800120a:	460b      	mov	r3, r1
 800120c:	3307      	adds	r3, #7
 800120e:	08db      	lsrs	r3, r3, #3
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	ebad 0d03 	sub.w	sp, sp, r3
 8001216:	466b      	mov	r3, sp
 8001218:	3300      	adds	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  memcpy(cmd_string, buffer, len);
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	461a      	mov	r2, r3
 8001220:	68f9      	ldr	r1, [r7, #12]
 8001222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001224:	f006 f913 	bl	800744e <memcpy>
  cmd_string[len] = '\0';
 8001228:	897b      	ldrh	r3, [r7, #10]
 800122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122c:	2100      	movs	r1, #0
 800122e:	54d1      	strb	r1, [r2, r3]

  // Find the separator character ':'
  char* colon_ptr = strchr(cmd_string, ':');
 8001230:	213a      	movs	r1, #58	@ 0x3a
 8001232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001234:	f006 f8be 	bl	80073b4 <strchr>
 8001238:	6238      	str	r0, [r7, #32]

  // Check if the separator was found
  if (colon_ptr != NULL) {
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8084 	beq.w	800134a <handle_received_command+0x18e>
    *colon_ptr = '\0';
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
    char* key = cmd_string;
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	61fb      	str	r3, [r7, #28]
    char* value_str = colon_ptr + 1;
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	3301      	adds	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
    float value = atof(value_str);
 8001252:	69b8      	ldr	r0, [r7, #24]
 8001254:	f005 f9d2 	bl	80065fc <atof>
 8001258:	ec53 2b10 	vmov	r2, r3, d0
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc94 	bl	8000b8c <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	617b      	str	r3, [r7, #20]

    // --- NEW: Flag to check if we need to re-initialize PID ---
    uint8_t pid_constants_changed = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (strcmp(key, "KP") == 0) {
 800126e:	493b      	ldr	r1, [pc, #236]	@ (800135c <handle_received_command+0x1a0>)
 8001270:	69f8      	ldr	r0, [r7, #28]
 8001272:	f7fe ffb5 	bl	80001e0 <strcmp>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <handle_received_command+0xce>
      Kp = value;
 800127c:	4a38      	ldr	r2, [pc, #224]	@ (8001360 <handle_received_command+0x1a4>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	6013      	str	r3, [r2, #0]
      pid_constants_changed = 1; // Mark that a PID constant has changed
 8001282:	2301      	movs	r3, #1
 8001284:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001288:	e047      	b.n	800131a <handle_received_command+0x15e>
    } else if (strcmp(key, "KI") == 0) {
 800128a:	4936      	ldr	r1, [pc, #216]	@ (8001364 <handle_received_command+0x1a8>)
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f7fe ffa7 	bl	80001e0 <strcmp>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d106      	bne.n	80012a6 <handle_received_command+0xea>
      Ki = value;
 8001298:	4a33      	ldr	r2, [pc, #204]	@ (8001368 <handle_received_command+0x1ac>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	6013      	str	r3, [r2, #0]
      pid_constants_changed = 1; // Mark that a PID constant has changed
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012a4:	e039      	b.n	800131a <handle_received_command+0x15e>
    } else if (strcmp(key, "KD") == 0) {
 80012a6:	4931      	ldr	r1, [pc, #196]	@ (800136c <handle_received_command+0x1b0>)
 80012a8:	69f8      	ldr	r0, [r7, #28]
 80012aa:	f7fe ff99 	bl	80001e0 <strcmp>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <handle_received_command+0x106>
      Kd = value;
 80012b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <handle_received_command+0x1b4>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	6013      	str	r3, [r2, #0]
      pid_constants_changed = 1; // Mark that a PID constant has changed
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80012c0:	e02b      	b.n	800131a <handle_received_command+0x15e>
    } else if (strcmp(key, "TH") == 0) {
 80012c2:	492c      	ldr	r1, [pc, #176]	@ (8001374 <handle_received_command+0x1b8>)
 80012c4:	69f8      	ldr	r0, [r7, #28]
 80012c6:	f7fe ff8b 	bl	80001e0 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10c      	bne.n	80012ea <handle_received_command+0x12e>
      sensor_threshold = (uint16_t)value;
 80012d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <handle_received_command+0x1bc>)
 80012e0:	801a      	strh	r2, [r3, #0]
      status_to_send = 1;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <handle_received_command+0x1c0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e017      	b.n	800131a <handle_received_command+0x15e>
    } else if (strcmp(key, "BS") == 0) {
 80012ea:	4925      	ldr	r1, [pc, #148]	@ (8001380 <handle_received_command+0x1c4>)
 80012ec:	69f8      	ldr	r0, [r7, #28]
 80012ee:	f7fe ff77 	bl	80001e0 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10d      	bne.n	8001314 <handle_received_command+0x158>
      base_speed = (uint8_t)value; // Cast to uint8_t for consistency
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	edc7 7a01 	vstr	s15, [r7, #4]
 8001304:	793b      	ldrb	r3, [r7, #4]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <handle_received_command+0x1c8>)
 800130a:	701a      	strb	r2, [r3, #0]
      status_to_send = 1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <handle_received_command+0x1c0>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e002      	b.n	800131a <handle_received_command+0x15e>
    } else {
      status_to_send = 200; // "ERROR: Unknown Command"
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <handle_received_command+0x1c0>)
 8001316:	22c8      	movs	r2, #200	@ 0xc8
 8001318:	701a      	strb	r2, [r3, #0]
    }

    // --- NEW: If any PID constant was changed, update the struct and re-init ---
    if (pid_constants_changed) {
 800131a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800131e:	2b00      	cmp	r3, #0
 8001320:	d016      	beq.n	8001350 <handle_received_command+0x194>
        pid.Kp = Kp;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <handle_received_command+0x1a4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <handle_received_command+0x1cc>)
 8001328:	6193      	str	r3, [r2, #24]
        pid.Ki = Ki;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <handle_received_command+0x1ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <handle_received_command+0x1cc>)
 8001330:	61d3      	str	r3, [r2, #28]
        pid.Kd = Kd;
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <handle_received_command+0x1b4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <handle_received_command+0x1cc>)
 8001338:	6213      	str	r3, [r2, #32]
        arm_pid_init_f32(&pid, 1); // This is the crucial step!
 800133a:	2101      	movs	r1, #1
 800133c:	4812      	ldr	r0, [pc, #72]	@ (8001388 <handle_received_command+0x1cc>)
 800133e:	f001 f8da 	bl	80024f6 <arm_pid_init_f32>
        status_to_send = 1;        // Set status to "Constants Updated"
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <handle_received_command+0x1c0>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e002      	b.n	8001350 <handle_received_command+0x194>
    }

  } else {
    // The colon separator was not found, so the format is wrong.
    status_to_send = 200; // "ERROR: Unknown Command"
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <handle_received_command+0x1c0>)
 800134c:	22c8      	movs	r2, #200	@ 0xc8
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	46b5      	mov	sp, r6
  }
}
 8001352:	bf00      	nop
 8001354:	3734      	adds	r7, #52	@ 0x34
 8001356:	46bd      	mov	sp, r7
 8001358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800135c:	08009210 	.word	0x08009210
 8001360:	20000000 	.word	0x20000000
 8001364:	08009214 	.word	0x08009214
 8001368:	20000448 	.word	0x20000448
 800136c:	08009218 	.word	0x08009218
 8001370:	20000004 	.word	0x20000004
 8001374:	0800921c 	.word	0x0800921c
 8001378:	20000008 	.word	0x20000008
 800137c:	2000044c 	.word	0x2000044c
 8001380:	08009220 	.word	0x08009220
 8001384:	2000000a 	.word	0x2000000a
 8001388:	20000474 	.word	0x20000474

0800138c <HAL_UARTEx_RxEventCallback>:

// This callback is automatically called by the HAL when a command arrives.
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_UARTEx_RxEventCallback+0x44>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d111      	bne.n	80013c6 <HAL_UARTEx_RxEventCallback+0x3a>
        handle_received_command(rx_buffer, Size);
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	4619      	mov	r1, r3
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x48>)
 80013a8:	f7ff ff08 	bl	80011bc <handle_received_command>

        // IMPORTANT: Restart listening for the next command.
        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, RX_BUFFER_SIZE);
 80013ac:	2220      	movs	r2, #32
 80013ae:	4909      	ldr	r1, [pc, #36]	@ (80013d4 <HAL_UARTEx_RxEventCallback+0x48>)
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <HAL_UARTEx_RxEventCallback+0x4c>)
 80013b2:	f003 ffe0 	bl	8005376 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_UARTEx_RxEventCallback+0x50>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <HAL_UARTEx_RxEventCallback+0x50>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0208 	bic.w	r2, r2, #8
 80013c4:	601a      	str	r2, [r3, #0]
    }
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40011400 	.word	0x40011400
 80013d4:	20000498 	.word	0x20000498
 80013d8:	200003a0 	.word	0x200003a0
 80013dc:	200003e8 	.word	0x200003e8

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f001 f8cb 	bl	8002580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f9f9 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 fcb5 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80013f2:	f000 fc8b 	bl	8001d0c <MX_DMA_Init>
  MX_ADC1_Init();
 80013f6:	f000 fa67 	bl	80018c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013fa:	f000 fb1b 	bl	8001a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013fe:	f000 fba9 	bl	8001b54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001402:	f000 fbff 	bl	8001c04 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001406:	f000 fc57 	bl	8001cb8 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800140a:	f000 fa51 	bl	80018b0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800140e:	4887      	ldr	r0, [pc, #540]	@ (800162c <main+0x24c>)
 8001410:	f001 f96c 	bl	80026ec <HAL_ADC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, 8);
 8001414:	2208      	movs	r2, #8
 8001416:	4986      	ldr	r1, [pc, #536]	@ (8001630 <main+0x250>)
 8001418:	4884      	ldr	r0, [pc, #528]	@ (800162c <main+0x24c>)
 800141a:	f001 fb35 	bl	8002a88 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800141e:	2100      	movs	r1, #0
 8001420:	4884      	ldr	r0, [pc, #528]	@ (8001634 <main+0x254>)
 8001422:	f003 fa5d 	bl	80048e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001426:	2104      	movs	r1, #4
 8001428:	4882      	ldr	r0, [pc, #520]	@ (8001634 <main+0x254>)
 800142a:	f003 fa59 	bl	80048e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	4881      	ldr	r0, [pc, #516]	@ (8001638 <main+0x258>)
 8001432:	f003 fa55 	bl	80048e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001436:	2100      	movs	r1, #0
 8001438:	4880      	ldr	r0, [pc, #512]	@ (800163c <main+0x25c>)
 800143a:	f003 fa51 	bl	80048e0 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, RX_BUFFER_SIZE);
 800143e:	2220      	movs	r2, #32
 8001440:	497f      	ldr	r1, [pc, #508]	@ (8001640 <main+0x260>)
 8001442:	4880      	ldr	r0, [pc, #512]	@ (8001644 <main+0x264>)
 8001444:	f003 ff97 	bl	8005376 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001448:	4b7f      	ldr	r3, [pc, #508]	@ (8001648 <main+0x268>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b7e      	ldr	r3, [pc, #504]	@ (8001648 <main+0x268>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0208 	bic.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]



  pid.Kp=Kp;
 8001458:	4b7c      	ldr	r3, [pc, #496]	@ (800164c <main+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a7c      	ldr	r2, [pc, #496]	@ (8001650 <main+0x270>)
 800145e:	6193      	str	r3, [r2, #24]
  pid.Ki=Ki;
 8001460:	4b7c      	ldr	r3, [pc, #496]	@ (8001654 <main+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7a      	ldr	r2, [pc, #488]	@ (8001650 <main+0x270>)
 8001466:	61d3      	str	r3, [r2, #28]
  pid.Kd=Kd;
 8001468:	4b7b      	ldr	r3, [pc, #492]	@ (8001658 <main+0x278>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a78      	ldr	r2, [pc, #480]	@ (8001650 <main+0x270>)
 800146e:	6213      	str	r3, [r2, #32]

  arm_pid_init_f32(&pid, 1);
 8001470:	2101      	movs	r1, #1
 8001472:	4877      	ldr	r0, [pc, #476]	@ (8001650 <main+0x270>)
 8001474:	f001 f83f 	bl	80024f6 <arm_pid_init_f32>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 8001478:	2208      	movs	r2, #8
 800147a:	496d      	ldr	r1, [pc, #436]	@ (8001630 <main+0x250>)
 800147c:	486b      	ldr	r0, [pc, #428]	@ (800162c <main+0x24c>)
 800147e:	f001 fb03 	bl	8002a88 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t current_time = HAL_GetTick();
 8001482:	f001 f8e3 	bl	800264c <HAL_GetTick>
 8001486:	60f8      	str	r0, [r7, #12]
	  float32_t error = 0.0f;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	  float32_t output = 0.0f;
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	613b      	str	r3, [r7, #16]




	  if (current_time - last_telemetry_time >= TELEMETRY_INTERVAL_MS){
 8001494:	4b71      	ldr	r3, [pc, #452]	@ (800165c <main+0x27c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2214      	movs	r2, #20
 800149e:	4293      	cmp	r3, r2
 80014a0:	d3ef      	bcc.n	8001482 <main+0xa2>
	      last_telemetry_time = current_time;
 80014a2:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <main+0x27c>)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6013      	str	r3, [r2, #0]
	      HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 80014a8:	2208      	movs	r2, #8
 80014aa:	4961      	ldr	r1, [pc, #388]	@ (8001630 <main+0x250>)
 80014ac:	485f      	ldr	r0, [pc, #380]	@ (800162c <main+0x24c>)
 80014ae:	f001 faeb 	bl	8002a88 <HAL_ADC_Start_DMA>
	      position = line_data();
 80014b2:	f7ff fdcb 	bl	800104c <line_data>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	4b69      	ldr	r3, [pc, #420]	@ (8001660 <main+0x280>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
	      if (last_known_turn_direction!=0){
 80014c0:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <main+0x284>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <main+0xf0>
	    	  last_last_known_turn_direction=last_known_turn_direction;
 80014c8:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <main+0x284>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	@ (8001668 <main+0x288>)
 80014ce:	6013      	str	r3, [r2, #0]
	      }
	      last_known_turn_direction = (position > 52 && position <= 70) ? -1 : ((position < 20 && position != 255) ? 1 : last_known_turn_direction);
 80014d0:	4b63      	ldr	r3, [pc, #396]	@ (8001660 <main+0x280>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800166c <main+0x28c>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	bfcc      	ite	gt
 80014e4:	2301      	movgt	r3, #1
 80014e6:	2300      	movle	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d111      	bne.n	8001518 <main+0x138>
 80014f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001660 <main+0x280>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001670 <main+0x290>
 80014fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	bf94      	ite	ls
 8001508:	2301      	movls	r3, #1
 800150a:	2300      	movhi	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <main+0x17a>
 8001518:	4b51      	ldr	r3, [pc, #324]	@ (8001660 <main+0x280>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	bf4c      	ite	mi
 800152c:	2301      	movmi	r3, #1
 800152e:	2300      	movpl	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f083 0301 	eor.w	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <main+0x170>
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <main+0x280>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001674 <main+0x294>
 8001546:	eef4 7a47 	vcmp.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d102      	bne.n	8001556 <main+0x176>
 8001550:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <main+0x284>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	e003      	b.n	800155e <main+0x17e>
 8001556:	2301      	movs	r3, #1
 8001558:	e001      	b.n	800155e <main+0x17e>
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155e:	4a41      	ldr	r2, [pc, #260]	@ (8001664 <main+0x284>)
 8001560:	6013      	str	r3, [r2, #0]


	      if (position == 255) {
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <main+0x280>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001674 <main+0x294>
 800156c:	eef4 7a47 	vcmp.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	f040 8084 	bne.w	8001680 <main+0x2a0>

	              arm_pid_reset_f32(&pid);
 8001578:	4835      	ldr	r0, [pc, #212]	@ (8001650 <main+0x270>)
 800157a:	f000 fff2 	bl	8002562 <arm_pid_reset_f32>

	              if (last_known_turn_direction == 1) { // We were heading into a right turn
 800157e:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <main+0x284>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d110      	bne.n	80015a8 <main+0x1c8>
	                  setMotorSpeed(0, turn_speed);
 8001586:	4b3c      	ldr	r3, [pc, #240]	@ (8001678 <main+0x298>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fd19 	bl	8000fc4 <setMotorSpeed>
	                  setMotorSpeed(1, -turn_speed);
 8001592:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <main+0x298>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	425b      	negs	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff fd12 	bl	8000fc4 <setMotorSpeed>
	                  status_to_send = 4;
 80015a0:	4b36      	ldr	r3, [pc, #216]	@ (800167c <main+0x29c>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	e103      	b.n	80017b0 <main+0x3d0>
	              } else if (last_known_turn_direction == -1) { // We were heading into a left turn
 80015a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <main+0x284>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015b0:	d110      	bne.n	80015d4 <main+0x1f4>
	                  setMotorSpeed(0, -turn_speed);
 80015b2:	4b31      	ldr	r3, [pc, #196]	@ (8001678 <main+0x298>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	425b      	negs	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fd02 	bl	8000fc4 <setMotorSpeed>
	                  setMotorSpeed(1, turn_speed);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <main+0x298>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fcfc 	bl	8000fc4 <setMotorSpeed>
	                  status_to_send = 5;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <main+0x29c>)
 80015ce:	2205      	movs	r2, #5
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e0ed      	b.n	80017b0 <main+0x3d0>
	              } else {
	            	  if (last_last_known_turn_direction == 1) { // We were heading into a right turn
 80015d4:	4b24      	ldr	r3, [pc, #144]	@ (8001668 <main+0x288>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d110      	bne.n	80015fe <main+0x21e>
	            		  setMotorSpeed(0, turn_speed);
 80015dc:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <main+0x298>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fcee 	bl	8000fc4 <setMotorSpeed>
	            		  setMotorSpeed(1, -turn_speed);
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <main+0x298>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	425b      	negs	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fce7 	bl	8000fc4 <setMotorSpeed>
	            		  status_to_send = 6;
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <main+0x29c>)
 80015f8:	2206      	movs	r2, #6
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e0d8      	b.n	80017b0 <main+0x3d0>
	            	  } else if (last_last_known_turn_direction == -1) { // We were heading into a left turn
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <main+0x288>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001606:	f040 80d3 	bne.w	80017b0 <main+0x3d0>
	            		  setMotorSpeed(0, -turn_speed);
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <main+0x298>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	425b      	negs	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fcd6 	bl	8000fc4 <setMotorSpeed>
	            		  setMotorSpeed(1, turn_speed);
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <main+0x298>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fcd0 	bl	8000fc4 <setMotorSpeed>
	            		  status_to_send = 7;
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <main+0x29c>)
 8001626:	2207      	movs	r2, #7
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e0c1      	b.n	80017b0 <main+0x3d0>
 800162c:	20000220 	.word	0x20000220
 8001630:	20000450 	.word	0x20000450
 8001634:	200002c8 	.word	0x200002c8
 8001638:	20000358 	.word	0x20000358
 800163c:	20000310 	.word	0x20000310
 8001640:	20000498 	.word	0x20000498
 8001644:	200003a0 	.word	0x200003a0
 8001648:	200003e8 	.word	0x200003e8
 800164c:	20000000 	.word	0x20000000
 8001650:	20000474 	.word	0x20000474
 8001654:	20000448 	.word	0x20000448
 8001658:	20000004 	.word	0x20000004
 800165c:	200004b8 	.word	0x200004b8
 8001660:	20000470 	.word	0x20000470
 8001664:	200004bc 	.word	0x200004bc
 8001668:	2000002c 	.word	0x2000002c
 800166c:	42500000 	.word	0x42500000
 8001670:	428c0000 	.word	0x428c0000
 8001674:	437f0000 	.word	0x437f0000
 8001678:	2000000b 	.word	0x2000000b
 800167c:	2000044c 	.word	0x2000044c
	            	  }
	              }
	            } else {
	              error = ((float32_t)position - 35.0f);
 8001680:	4b51      	ldr	r3, [pc, #324]	@ (80017c8 <main+0x3e8>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80017cc <main+0x3ec>
 800168a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800168e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001692:	4b4f      	ldr	r3, [pc, #316]	@ (80017d0 <main+0x3f0>)
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	607b      	str	r3, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	ed93 7a00 	vldr	s14, [r3]
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80016b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	edd3 6a02 	vldr	s13, [r3, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	edc7 7a00 	vstr	s15, [r7]

    /* Update state */
    S->state[1] = S->state[0];
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80016f2:	683b      	ldr	r3, [r7, #0]
	              output = arm_pid_f32(&pid, error);
 80016f4:	613b      	str	r3, [r7, #16]
	              if (output > base_speed) output = base_speed;
 80016f6:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <main+0x3f4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001702:	ed97 7a04 	vldr	s14, [r7, #16]
 8001706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	dd07      	ble.n	8001720 <main+0x340>
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <main+0x3f4>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	edc7 7a04 	vstr	s15, [r7, #16]
	              if (output < -base_speed) output = -base_speed;
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <main+0x3f4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	425b      	negs	r3, r3
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d508      	bpl.n	800174e <main+0x36e>
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <main+0x3f4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	425b      	negs	r3, r3
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	edc7 7a04 	vstr	s15, [r7, #16]

	              setMotorSpeed(0, base_speed - (int32_t)output);
 800174e:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <main+0x3f4>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	edd7 7a04 	vldr	s15, [r7, #16]
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 2a90 	vmov	r2, s15
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	4619      	mov	r1, r3
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fc2e 	bl	8000fc4 <setMotorSpeed>
	              setMotorSpeed(1, base_speed + (int32_t)output);
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <main+0x3f4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 2a90 	vmov	r2, s15
 8001778:	4413      	add	r3, r2
 800177a:	4619      	mov	r1, r3
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff fc21 	bl	8000fc4 <setMotorSpeed>

	              if (position > 25 && position < 45) {
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <main+0x3e8>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800178c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	dd0c      	ble.n	80017b0 <main+0x3d0>
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <main+0x3e8>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80017d8 <main+0x3f8>
 80017a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d502      	bpl.n	80017b0 <main+0x3d0>
	                  last_known_turn_direction = 0;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <main+0x3fc>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
	              }
	            }


	      send_telemetry_data(position,error,output);
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <main+0x3e8>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed97 1a04 	vldr	s2, [r7, #16]
 80017ba:	edd7 0a05 	vldr	s1, [r7, #20]
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	f7ff fc8d 	bl	80010e0 <send_telemetry_data>
  {
 80017c6:	e65c      	b.n	8001482 <main+0xa2>
 80017c8:	20000470 	.word	0x20000470
 80017cc:	420c0000 	.word	0x420c0000
 80017d0:	20000474 	.word	0x20000474
 80017d4:	2000000a 	.word	0x2000000a
 80017d8:	42340000 	.word	0x42340000
 80017dc:	200004bc 	.word	0x200004bc

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	@ 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	@ 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 fdd8 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <SystemClock_Config+0xc8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	4a26      	ldr	r2, [pc, #152]	@ (80018a8 <SystemClock_Config+0xc8>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	@ 0x40
 8001814:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <SystemClock_Config+0xc8>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <SystemClock_Config+0xcc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <SystemClock_Config+0xcc>)
 800182a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <SystemClock_Config+0xcc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001850:	2308      	movs	r3, #8
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001854:	2364      	movs	r3, #100	@ 0x64
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f002 fb93 	bl	8003f90 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001870:	f000 faec 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2103      	movs	r1, #3
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fdf5 	bl	8004480 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800189c:	f000 fad6 	bl	8001e4c <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3750      	adds	r7, #80	@ 0x50
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2012      	movs	r0, #18
 80018ba:	f001 fd92 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018be:	2012      	movs	r0, #18
 80018c0:	f001 fdab 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018da:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018dc:	4a53      	ldr	r2, [pc, #332]	@ (8001a2c <MX_ADC1_Init+0x164>)
 80018de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018e0:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80018e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001904:	4b48      	ldr	r3, [pc, #288]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001906:	2200      	movs	r2, #0
 8001908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <MX_ADC1_Init+0x160>)
 800190c:	4a48      	ldr	r2, [pc, #288]	@ (8001a30 <MX_ADC1_Init+0x168>)
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001916:	4b44      	ldr	r3, [pc, #272]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001918:	2208      	movs	r2, #8
 800191a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800191c:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <MX_ADC1_Init+0x160>)
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001924:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800192a:	483f      	ldr	r0, [pc, #252]	@ (8001a28 <MX_ADC1_Init+0x160>)
 800192c:	f000 fe9a 	bl	8002664 <HAL_ADC_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001936:	f000 fa89 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001942:	2304      	movs	r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4837      	ldr	r0, [pc, #220]	@ (8001a28 <MX_ADC1_Init+0x160>)
 800194c:	f001 f9b4 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001956:	f000 fa79 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800195a:	2301      	movs	r3, #1
 800195c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800195e:	2302      	movs	r3, #2
 8001960:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	4830      	ldr	r0, [pc, #192]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001968:	f001 f9a6 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001972:	f000 fa6b 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001976:	2302      	movs	r3, #2
 8001978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800197a:	2303      	movs	r3, #3
 800197c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	4829      	ldr	r0, [pc, #164]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001984:	f001 f998 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800198e:	f000 fa5d 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001992:	2303      	movs	r3, #3
 8001994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001996:	2304      	movs	r3, #4
 8001998:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	4822      	ldr	r0, [pc, #136]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80019a0:	f001 f98a 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80019aa:	f000 fa4f 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019ae:	2304      	movs	r3, #4
 80019b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80019b2:	2305      	movs	r3, #5
 80019b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	481b      	ldr	r0, [pc, #108]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80019bc:	f001 f97c 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 80019c6:	f000 fa41 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019ca:	2305      	movs	r3, #5
 80019cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80019ce:	2306      	movs	r3, #6
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4814      	ldr	r0, [pc, #80]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80019d8:	f001 f96e 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80019e2:	f000 fa33 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019e6:	2306      	movs	r3, #6
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80019ea:	2307      	movs	r3, #7
 80019ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	480d      	ldr	r0, [pc, #52]	@ (8001a28 <MX_ADC1_Init+0x160>)
 80019f4:	f001 f960 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80019fe:	f000 fa25 	bl	8001e4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a02:	2307      	movs	r3, #7
 8001a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001a06:	2308      	movs	r3, #8
 8001a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <MX_ADC1_Init+0x160>)
 8001a10:	f001 f952 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001a1a:	f000 fa17 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000220 	.word	0x20000220
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	0f000001 	.word	0x0f000001

08001a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b092      	sub	sp, #72	@ 0x48
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fca0 	bl	80073a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a66:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <MX_TIM1_Init+0x11c>)
 8001a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001a78:	4b34      	ldr	r3, [pc, #208]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a7a:	22c8      	movs	r2, #200	@ 0xc8
 8001a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7e:	4b33      	ldr	r3, [pc, #204]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b30      	ldr	r3, [pc, #192]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a90:	482e      	ldr	r0, [pc, #184]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001a92:	f002 fed5 	bl	8004840 <HAL_TIM_PWM_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a9c:	f000 f9d6 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aac:	4619      	mov	r1, r3
 8001aae:	4827      	ldr	r0, [pc, #156]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001ab0:	f003 fac6 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001aba:	f000 f9c7 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abe:	2360      	movs	r3, #96	@ 0x60
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aca:	2300      	movs	r3, #0
 8001acc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481a      	ldr	r0, [pc, #104]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001ae4:	f002 ffac 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001aee:	f000 f9ad 	bl	8001e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af6:	2204      	movs	r2, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4814      	ldr	r0, [pc, #80]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001afc:	f002 ffa0 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b06:	f000 f9a1 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001b2e:	f003 faf5 	bl	800511c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001b38:	f000 f988 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <MX_TIM1_Init+0x118>)
 8001b3e:	f000 fa77 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3748      	adds	r7, #72	@ 0x48
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002c8 	.word	0x200002c8
 8001b50:	40010000 	.word	0x40010000

08001b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b76:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b8e:	22c8      	movs	r2, #200	@ 0xc8
 8001b90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b9e:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001ba0:	f002 fe4e 	bl	8004840 <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001baa:	f000 f94f 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4810      	ldr	r0, [pc, #64]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001bbe:	f003 fa3f 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001bc8:	f000 f940 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	2360      	movs	r3, #96	@ 0x60
 8001bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001be4:	f002 ff2c 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001bee:	f000 f92d 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bf2:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <MX_TIM2_Init+0xac>)
 8001bf4:	f000 fa1c 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	@ 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000310 	.word	0x20000310

08001c04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	615a      	str	r2, [r3, #20]
 8001c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c28:	4a22      	ldr	r2, [pc, #136]	@ (8001cb4 <MX_TIM3_Init+0xb0>)
 8001c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c3c:	22c8      	movs	r2, #200	@ 0xc8
 8001c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c4c:	4818      	ldr	r0, [pc, #96]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c4e:	f002 fdf7 	bl	8004840 <HAL_TIM_PWM_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c58:	f000 f8f8 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c6c:	f003 f9e8 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c76:	f000 f8e9 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7a:	2360      	movs	r3, #96	@ 0x60
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001c92:	f002 fed5 	bl	8004a40 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c9c:	f000 f8d6 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ca0:	4803      	ldr	r0, [pc, #12]	@ (8001cb0 <MX_TIM3_Init+0xac>)
 8001ca2:	f000 f9c5 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	@ 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000358 	.word	0x20000358
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <MX_USART6_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cf0:	f003 fa66 	bl	80051c0 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f8a7 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200003a0 	.word	0x200003a0
 8001d08:	40011400 	.word	0x40011400

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <MX_DMA_Init+0x4c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2038      	movs	r0, #56	@ 0x38
 8001d34:	f001 fb55 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d38:	2038      	movs	r0, #56	@ 0x38
 8001d3a:	f001 fb6e 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2039      	movs	r0, #57	@ 0x39
 8001d44:	f001 fb4d 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d48:	2039      	movs	r0, #57	@ 0x39
 8001d4a:	f001 fb66 	bl	800341a <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b32      	ldr	r3, [pc, #200]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a31      	ldr	r2, [pc, #196]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b2f      	ldr	r3, [pc, #188]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <MX_GPIO_Init+0xe4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de8:	4816      	ldr	r0, [pc, #88]	@ (8001e44 <MX_GPIO_Init+0xe8>)
 8001dea:	f002 f8b7 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001df4:	4814      	ldr	r0, [pc, #80]	@ (8001e48 <MX_GPIO_Init+0xec>)
 8001df6:	f002 f8b1 	bl	8003f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <MX_GPIO_Init+0xe8>)
 8001e14:	f001 ff1e 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_GPIO_Init+0xec>)
 8001e32:	f001 ff0f 	bl	8003c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020000 	.word	0x40020000

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <Error_Handler+0x8>

08001e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f84 <HAL_ADC_MspInit+0xdc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d157      	bne.n	8001f7a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b2e      	ldr	r3, [pc, #184]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eda:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a26      	ldr	r2, [pc, #152]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_ADC_MspInit+0xe0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f02:	23ff      	movs	r3, #255	@ 0xff
 8001f04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	481d      	ldr	r0, [pc, #116]	@ (8001f8c <HAL_ADC_MspInit+0xe4>)
 8001f16:	f001 fe9d 	bl	8003c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_ADC_MspInit+0xec>)
 8001f1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f5e:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f60:	f001 fa76 	bl	8003450 <HAL_DMA_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f6a:	f7ff ff6f 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f74:	4a06      	ldr	r2, [pc, #24]	@ (8001f90 <HAL_ADC_MspInit+0xe8>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	@ 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40012000 	.word	0x40012000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	20000268 	.word	0x20000268
 8001f94:	40026410 	.word	0x40026410

08001f98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fc6:	e026      	b.n	8002016 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	e012      	b.n	8002016 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_TIM_PWM_MspInit+0x94>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10d      	bne.n	8002016 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <HAL_TIM_PWM_MspInit+0x90>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40023800 	.word	0x40023800
 800202c:	40000400 	.word	0x40000400

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a37      	ldr	r2, [pc, #220]	@ (800212c <HAL_TIM_MspPostInit+0xfc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11f      	bne.n	8002092 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a35      	ldr	r2, [pc, #212]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800206e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002080:	2301      	movs	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	482a      	ldr	r0, [pc, #168]	@ (8002134 <HAL_TIM_MspPostInit+0x104>)
 800208c:	f001 fde2 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002090:	e047      	b.n	8002122 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209a:	d11f      	bne.n	80020dc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ca:	2301      	movs	r3, #1
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4817      	ldr	r0, [pc, #92]	@ (8002134 <HAL_TIM_MspPostInit+0x104>)
 80020d6:	f001 fdbd 	bl	8003c54 <HAL_GPIO_Init>
}
 80020da:	e022      	b.n	8002122 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_TIM_MspPostInit+0x108>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d11d      	bne.n	8002122 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_TIM_MspPostInit+0x100>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002102:	2310      	movs	r3, #16
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002112:	2302      	movs	r3, #2
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <HAL_TIM_MspPostInit+0x10c>)
 800211e:	f001 fd99 	bl	8003c54 <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	@ 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40000400 	.word	0x40000400
 800213c:	40020400 	.word	0x40020400

08002140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	@ 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a34      	ldr	r2, [pc, #208]	@ (8002230 <HAL_UART_MspInit+0xf0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d162      	bne.n	8002228 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b33      	ldr	r3, [pc, #204]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a32      	ldr	r2, [pc, #200]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 800216c:	f043 0320 	orr.w	r3, r3, #32
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b30      	ldr	r3, [pc, #192]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <HAL_UART_MspInit+0xf4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800219a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021ac:	2308      	movs	r3, #8
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4820      	ldr	r0, [pc, #128]	@ (8002238 <HAL_UART_MspInit+0xf8>)
 80021b8:	f001 fd4c 	bl	8003c54 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021be:	4a20      	ldr	r2, [pc, #128]	@ (8002240 <HAL_UART_MspInit+0x100>)
 80021c0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021c4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80021c8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021dc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021de:	4b17      	ldr	r3, [pc, #92]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80021fc:	480f      	ldr	r0, [pc, #60]	@ (800223c <HAL_UART_MspInit+0xfc>)
 80021fe:	f001 f927 	bl	8003450 <HAL_DMA_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002208:	f7ff fe20 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_UART_MspInit+0xfc>)
 8002210:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <HAL_UART_MspInit+0xfc>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	2047      	movs	r0, #71	@ 0x47
 800221e:	f001 f8e0 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002222:	2047      	movs	r0, #71	@ 0x47
 8002224:	f001 f8f9 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	@ 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40011400 	.word	0x40011400
 8002234:	40023800 	.word	0x40023800
 8002238:	40020000 	.word	0x40020000
 800223c:	200003e8 	.word	0x200003e8
 8002240:	40026428 	.word	0x40026428

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <NMI_Handler+0x4>

0800224c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <MemManage_Handler+0x4>

0800225c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <BusFault_Handler+0x4>

08002264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <UsageFault_Handler+0x4>

0800226c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229a:	f000 f9c3 	bl	8002624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <ADC_IRQHandler+0x10>)
 80022aa:	f000 fadd 	bl	8002868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000220 	.word	0x20000220

080022b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA2_Stream0_IRQHandler+0x10>)
 80022be:	f001 fa5f 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000268 	.word	0x20000268

080022cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <DMA2_Stream1_IRQHandler+0x10>)
 80022d2:	f001 fa55 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200003e8 	.word	0x200003e8

080022e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <USART6_IRQHandler+0x10>)
 80022e6:	f003 f8a3 	bl	8005430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200003a0 	.word	0x200003a0

080022f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return 1;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_kill>:

int _kill(int pid, int sig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230e:	f005 f871 	bl	80073f4 <__errno>
 8002312:	4603      	mov	r3, r0
 8002314:	2216      	movs	r2, #22
 8002316:	601a      	str	r2, [r3, #0]
  return -1;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_exit>:

void _exit (int status)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ffe7 	bl	8002304 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <_exit+0x12>

0800233a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00a      	b.n	8002362 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800234c:	f3af 8000 	nop.w
 8002350:	4601      	mov	r1, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	60ba      	str	r2, [r7, #8]
 8002358:	b2ca      	uxtb	r2, r1
 800235a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	dbf0      	blt.n	800234c <_read+0x12>
  }

  return len;
 800236a:	687b      	ldr	r3, [r7, #4]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e009      	b.n	800239a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	60ba      	str	r2, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbf1      	blt.n	8002386 <_write+0x12>
  }
  return len;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_close>:

int _close(int file)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023d4:	605a      	str	r2, [r3, #4]
  return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_isatty>:

int _isatty(int file)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800241c:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <_sbrk+0x5c>)
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <_sbrk+0x60>)
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002428:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <_sbrk+0x64>)
 8002432:	4a12      	ldr	r2, [pc, #72]	@ (800247c <_sbrk+0x68>)
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <_sbrk+0x64>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002444:	f004 ffd6 	bl	80073f4 <__errno>
 8002448:	4603      	mov	r3, r0
 800244a:	220c      	movs	r2, #12
 800244c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002452:	e009      	b.n	8002468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <_sbrk+0x64>)
 8002464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20020000 	.word	0x20020000
 8002474:	00000400 	.word	0x00000400
 8002478:	200004f0 	.word	0x200004f0
 800247c:	20000648 	.word	0x20000648

08002480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <SystemInit+0x20>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <SystemInit+0x20>)
 800248c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002490:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024a8:	f7ff ffea 	bl	8002480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ac:	480c      	ldr	r0, [pc, #48]	@ (80024e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ae:	490d      	ldr	r1, [pc, #52]	@ (80024e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b0:	4a0d      	ldr	r2, [pc, #52]	@ (80024e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c4:	4c0a      	ldr	r4, [pc, #40]	@ (80024f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f004 ff95 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d6:	f7fe ff83 	bl	80013e0 <main>
  bx  lr    
 80024da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80024e8:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 80024ec:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80024f0:	20000644 	.word	0x20000644

080024f4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <DMA1_Stream0_IRQHandler>

080024f6 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	ed93 7a06 	vldr	s14, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	edd3 7a07 	vldr	s15, [r3, #28]
 800250c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 7a08 	vldr	s15, [r3, #32]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edd3 7a06 	vldr	s15, [r3, #24]
 8002526:	eeb1 7a67 	vneg.f32	s14, s15
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002530:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	330c      	adds	r3, #12
 8002550:	220c      	movs	r2, #12
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f004 ff25 	bl	80073a4 <memset>
  }

}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <arm_pid_reset_f32>:
                   The function resets the state buffer to zeros.
 */

void arm_pid_reset_f32(
  arm_pid_instance_f32 * S)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Reset state to zero, The size will be always 3 samples */
  memset(S->state, 0, 3U * sizeof(float32_t));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	330c      	adds	r3, #12
 800256e:	220c      	movs	r2, #12
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f004 ff16 	bl	80073a4 <memset>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <HAL_Init+0x40>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800258e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <HAL_Init+0x40>)
 8002596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_Init+0x40>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a8:	2003      	movs	r0, #3
 80025aa:	f000 ff0f 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ae:	200f      	movs	r0, #15
 80025b0:	f000 f808 	bl	80025c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b4:	f7ff fc50 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00

080025c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025cc:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_InitTick+0x54>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_InitTick+0x58>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025da:	fbb3 f3f1 	udiv	r3, r3, r1
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 ff27 	bl	8003436 <HAL_SYSTICK_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00e      	b.n	8002610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b0f      	cmp	r3, #15
 80025f6:	d80a      	bhi.n	800260e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f8:	2200      	movs	r2, #0
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002600:	f000 feef 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002604:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <HAL_InitTick+0x5c>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000030 	.word	0x20000030
 800261c:	20000038 	.word	0x20000038
 8002620:	20000034 	.word	0x20000034

08002624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_IncTick+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_IncTick+0x24>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4413      	add	r3, r2
 8002634:	4a04      	ldr	r2, [pc, #16]	@ (8002648 <HAL_IncTick+0x24>)
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000038 	.word	0x20000038
 8002648:	200004f4 	.word	0x200004f4

0800264c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return uwTick;
 8002650:	4b03      	ldr	r3, [pc, #12]	@ (8002660 <HAL_GetTick+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200004f4 	.word	0x200004f4

08002664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e033      	b.n	80026e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fc10 	bl	8001ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026aa:	f023 0302 	bic.w	r3, r3, #2
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fc30 	bl	8002f1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80026d2:	e001      	b.n	80026d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start_IT+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e0a1      	b.n	800284a <HAL_ADC_Start_IT+0x15e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d018      	beq.n	800274e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800272c:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_ADC_Start_IT+0x16c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4a      	ldr	r2, [pc, #296]	@ (800285c <HAL_ADC_Start_IT+0x170>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9a      	lsrs	r2, r3, #18
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002740:	e002      	b.n	8002748 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d169      	bne.n	8002830 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002786:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	d106      	bne.n	80027aa <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f023 0206 	bic.w	r2, r3, #6
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b8:	4b29      	ldr	r3, [pc, #164]	@ (8002860 <HAL_ADC_Start_IT+0x174>)
 80027ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027c4:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027d4:	f043 0320 	orr.w	r3, r3, #32
 80027d8:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d129      	bne.n	8002848 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	e020      	b.n	8002848 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <HAL_ADC_Start_IT+0x178>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d11b      	bne.n	8002848 <HAL_ADC_Start_IT+0x15c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d114      	bne.n	8002848 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	e00b      	b.n	8002848 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f043 0210 	orr.w	r2, r3, #16
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000030 	.word	0x20000030
 800285c:	431bde83 	.word	0x431bde83
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000

08002868 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d049      	beq.n	8002932 <HAL_ADC_IRQHandler+0xca>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d12b      	bne.n	8002922 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d127      	bne.n	8002922 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0220 	bic.w	r2, r2, #32
 80028fc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9a0 	bl	8002c68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0212 	mvn.w	r2, #18
 8002930:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002940:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d057      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x190>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d054      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d139      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800298c:	2b00      	cmp	r3, #0
 800298e:	d12b      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d124      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11d      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d119      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fc15 	bl	8003218 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 020c 	mvn.w	r2, #12
 80029f6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a06:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d017      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x1d6>
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d014      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10d      	bne.n	8002a3e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f92e 	bl	8002c90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a4c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d015      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x218>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0220 	mvn.w	r2, #32
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f917 	bl	8002ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0220 	mvn.w	r2, #32
 8002a7e:	601a      	str	r2, [r3, #0]
  }
}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0ce      	b.n	8002c44 <HAL_ADC_Start_DMA+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d018      	beq.n	8002aee <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002acc:	4b5f      	ldr	r3, [pc, #380]	@ (8002c4c <HAL_ADC_Start_DMA+0x1c4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c50 <HAL_ADC_Start_DMA+0x1c8>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afc:	d107      	bne.n	8002b0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b0c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 8086 	bne.w	8002c2a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f023 0206 	bic.w	r2, r3, #6
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_ADC_Start_DMA+0x1cc>)
 8002b7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <HAL_ADC_Start_DMA+0x1d0>)
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8a:	4a34      	ldr	r2, [pc, #208]	@ (8002c5c <HAL_ADC_Start_DMA+0x1d4>)
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b92:	4a33      	ldr	r2, [pc, #204]	@ (8002c60 <HAL_ADC_Start_DMA+0x1d8>)
 8002b94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002bae:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bbe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	334c      	adds	r3, #76	@ 0x4c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f000 fcec 	bl	80035ac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10f      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d129      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e020      	b.n	8002c42 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_ADC_Start_DMA+0x1dc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d11b      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x1ba>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d114      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	e00b      	b.n	8002c42 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000030 	.word	0x20000030
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	40012300 	.word	0x40012300
 8002c58:	08003115 	.word	0x08003115
 8002c5c:	080031cf 	.word	0x080031cf
 8002c60:	080031eb 	.word	0x080031eb
 8002c64:	40012000 	.word	0x40012000

08002c68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e113      	b.n	8002efc <HAL_ADC_ConfigChannel+0x244>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d925      	bls.n	8002d30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	400a      	ands	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4403      	add	r3, r0
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	409a      	lsls	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	e022      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4403      	add	r3, r0
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d824      	bhi.n	8002dc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b05      	subs	r3, #5
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b05      	subs	r3, #5
 8002dba:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dc6:	e04c      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d824      	bhi.n	8002e1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	3b23      	subs	r3, #35	@ 0x23
 8002de2:	221f      	movs	r2, #31
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b23      	subs	r3, #35	@ 0x23
 8002e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e18:	e023      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b41      	subs	r3, #65	@ 0x41
 8002e2c:	221f      	movs	r2, #31
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b41      	subs	r3, #65	@ 0x41
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e62:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <HAL_ADC_ConfigChannel+0x250>)
 8002e64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10f      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x1f4>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b11      	cmp	r3, #17
 8002eaa:	d122      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	@ (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_ADC_ConfigChannel+0x25c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <HAL_ADC_ConfigChannel+0x260>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9a      	lsrs	r2, r3, #18
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012300 	.word	0x40012300
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	10000012 	.word	0x10000012
 8002f14:	20000030 	.word	0x20000030
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f24:	4b79      	ldr	r3, [pc, #484]	@ (800310c <ADC_Init+0x1f0>)
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	4a58      	ldr	r2, [pc, #352]	@ (8003110 <ADC_Init+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e00f      	b.n	800301a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003018:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0202 	bic.w	r2, r2, #2
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7e1b      	ldrb	r3, [r3, #24]
 8003034:	005a      	lsls	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	3b01      	subs	r3, #1
 8003074:	035a      	lsls	r2, r3, #13
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e007      	b.n	8003090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	051a      	lsls	r2, r3, #20
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030d2:	025a      	lsls	r2, r3, #9
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	029a      	lsls	r2, r3, #10
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012300 	.word	0x40012300
 8003110:	0f000001 	.word	0x0f000001

08003114 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d13c      	bne.n	80031a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d12b      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d127      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d119      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0220 	bic.w	r2, r2, #32
 800317a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff fd61 	bl	8002c68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031a6:	e00e      	b.n	80031c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fd75 	bl	8002ca4 <HAL_ADC_ErrorCallback>
}
 80031ba:	e004      	b.n	80031c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fd4d 	bl	8002c7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2240      	movs	r2, #64	@ 0x40
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fd4a 	bl	8002ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	@ (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff29 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff3e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff31 	bl	8003290 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffa2 	bl	8003388 <SysTick_Config>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff f8f6 	bl	800264c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e099      	b.n	80035a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	e00f      	b.n	80034ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348e:	f7ff f8dd 	bl	800264c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b05      	cmp	r3, #5
 800349a:	d908      	bls.n	80034ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e078      	b.n	80035a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_DMA_Init+0x158>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2b04      	cmp	r3, #4
 8003540:	d117      	bne.n	8003572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb01 	bl	8003b5c <DMA_CheckFifoParam>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	@ 0x40
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800356e:	2301      	movs	r3, #1
 8003570:	e016      	b.n	80035a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fab8 	bl	8003af0 <DMA_CalcBaseAndBitshift>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	223f      	movs	r2, #63	@ 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	f010803f 	.word	0xf010803f

080035ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Start_IT+0x26>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e040      	b.n	8003654 <HAL_DMA_Start_IT+0xa8>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d12f      	bne.n	8003646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa4a 	bl	8003a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	223f      	movs	r2, #63	@ 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0216 	orr.w	r2, r2, #22
 800361a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e005      	b.n	8003652 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003668:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800366a:	f7fe ffef 	bl	800264c <HAL_GetTick>
 800366e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d008      	beq.n	800368e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2280      	movs	r2, #128	@ 0x80
 8003680:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e052      	b.n	8003734 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0216 	bic.w	r2, r2, #22
 800369c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <HAL_DMA_Abort+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0208 	bic.w	r2, r2, #8
 80036cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036de:	e013      	b.n	8003708 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e0:	f7fe ffb4 	bl	800264c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d90c      	bls.n	8003708 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2203      	movs	r2, #3
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e015      	b.n	8003734 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e4      	bne.n	80036e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	223f      	movs	r2, #63	@ 0x3f
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d004      	beq.n	800375a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2280      	movs	r2, #128	@ 0x80
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00c      	b.n	8003774 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2205      	movs	r2, #5
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800378c:	4b8e      	ldr	r3, [pc, #568]	@ (80039c8 <HAL_DMA_IRQHandler+0x248>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a8e      	ldr	r2, [pc, #568]	@ (80039cc <HAL_DMA_IRQHandler+0x24c>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0a9b      	lsrs	r3, r3, #10
 8003798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	2208      	movs	r2, #8
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01a      	beq.n	80037ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d8:	2208      	movs	r2, #8
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380e:	2201      	movs	r2, #1
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	f043 0202 	orr.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	2204      	movs	r2, #4
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003844:	2204      	movs	r2, #4
 8003846:	409a      	lsls	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	2210      	movs	r2, #16
 800385e:	409a      	lsls	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d043      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d03c      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	2210      	movs	r2, #16
 800387c:	409a      	lsls	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d024      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
 80038ae:	e01f      	b.n	80038f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
 80038c0:	e016      	b.n	80038f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d107      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0208 	bic.w	r2, r2, #8
 80038de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	2220      	movs	r2, #32
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 808f 	beq.w	8003a20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8087 	beq.w	8003a20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	2220      	movs	r2, #32
 8003918:	409a      	lsls	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b05      	cmp	r3, #5
 8003928:	d136      	bne.n	8003998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0216 	bic.w	r2, r2, #22
 8003938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <HAL_DMA_IRQHandler+0x1da>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0208 	bic.w	r2, r2, #8
 8003968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	223f      	movs	r2, #63	@ 0x3f
 8003970:	409a      	lsls	r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398a:	2b00      	cmp	r3, #0
 800398c:	d07e      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
        }
        return;
 8003996:	e079      	b.n	8003a8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d031      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
 80039c4:	e02c      	b.n	8003a20 <HAL_DMA_IRQHandler+0x2a0>
 80039c6:	bf00      	nop
 80039c8:	20000030 	.word	0x20000030
 80039cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d023      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
 80039e0:	e01e      	b.n	8003a20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10f      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0210 	bic.w	r2, r2, #16
 80039fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d032      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2205      	movs	r2, #5
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d307      	bcc.n	8003a68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f2      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x2cc>
 8003a66:	e000      	b.n	8003a6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a8c:	bf00      	nop
    }
  }
}
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b40      	cmp	r3, #64	@ 0x40
 8003ac0:	d108      	bne.n	8003ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ad2:	e007      	b.n	8003ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3b10      	subs	r3, #16
 8003b00:	4a14      	ldr	r2, [pc, #80]	@ (8003b54 <DMA_CalcBaseAndBitshift+0x64>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b0a:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x68>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d909      	bls.n	8003b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	1d1a      	adds	r2, r3, #4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b30:	e007      	b.n	8003b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	aaaaaaab 	.word	0xaaaaaaab
 8003b58:	0800923c 	.word	0x0800923c

08003b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11f      	bne.n	8003bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d856      	bhi.n	8003c2a <DMA_CheckFifoParam+0xce>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <DMA_CheckFifoParam+0x28>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba7 	.word	0x08003ba7
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003c2b 	.word	0x08003c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d046      	beq.n	8003c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e043      	b.n	8003c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bae:	d140      	bne.n	8003c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e03d      	b.n	8003c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bbe:	d121      	bne.n	8003c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d837      	bhi.n	8003c36 <DMA_CheckFifoParam+0xda>
 8003bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <DMA_CheckFifoParam+0x70>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be3 	.word	0x08003be3
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08003bf5 	.word	0x08003bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e030      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d025      	beq.n	8003c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf2:	e022      	b.n	8003c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bfc:	d11f      	bne.n	8003c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c02:	e01c      	b.n	8003c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d903      	bls.n	8003c12 <DMA_CheckFifoParam+0xb6>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d003      	beq.n	8003c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c10:	e018      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      break;
 8003c16:	e015      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e00b      	b.n	8003c42 <DMA_CheckFifoParam+0xe6>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e00a      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e008      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e006      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
    }
  } 
  
  return status; 
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	e159      	b.n	8003f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c70:	2201      	movs	r2, #1
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4013      	ands	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f040 8148 	bne.w	8003f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d005      	beq.n	8003ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d130      	bne.n	8003d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cdc:	2201      	movs	r2, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 0201 	and.w	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d017      	beq.n	8003d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d123      	bne.n	8003d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	08da      	lsrs	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3208      	adds	r2, #8
 8003d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	08da      	lsrs	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3208      	adds	r2, #8
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0203 	and.w	r2, r3, #3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a2 	beq.w	8003f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	4b57      	ldr	r3, [pc, #348]	@ (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	4a56      	ldr	r2, [pc, #344]	@ (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dea:	4b54      	ldr	r3, [pc, #336]	@ (8003f3c <HAL_GPIO_Init+0x2e8>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003df6:	4a52      	ldr	r2, [pc, #328]	@ (8003f40 <HAL_GPIO_Init+0x2ec>)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a49      	ldr	r2, [pc, #292]	@ (8003f44 <HAL_GPIO_Init+0x2f0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_GPIO_Init+0x202>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a48      	ldr	r2, [pc, #288]	@ (8003f48 <HAL_GPIO_Init+0x2f4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_GPIO_Init+0x1fe>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a47      	ldr	r2, [pc, #284]	@ (8003f4c <HAL_GPIO_Init+0x2f8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00d      	beq.n	8003e4e <HAL_GPIO_Init+0x1fa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a46      	ldr	r2, [pc, #280]	@ (8003f50 <HAL_GPIO_Init+0x2fc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <HAL_GPIO_Init+0x1f6>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a45      	ldr	r2, [pc, #276]	@ (8003f54 <HAL_GPIO_Init+0x300>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_GPIO_Init+0x1f2>
 8003e42:	2304      	movs	r3, #4
 8003e44:	e008      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e46:	2307      	movs	r3, #7
 8003e48:	e006      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e004      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e002      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x204>
 8003e56:	2300      	movs	r3, #0
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	f002 0203 	and.w	r2, r2, #3
 8003e5e:	0092      	lsls	r2, r2, #2
 8003e60:	4093      	lsls	r3, r2
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e68:	4935      	ldr	r1, [pc, #212]	@ (8003f40 <HAL_GPIO_Init+0x2ec>)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e76:	4b38      	ldr	r3, [pc, #224]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec4:	4a24      	ldr	r2, [pc, #144]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eca:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef4:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f18:	4a0f      	ldr	r2, [pc, #60]	@ (8003f58 <HAL_GPIO_Init+0x304>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b0f      	cmp	r3, #15
 8003f28:	f67f aea2 	bls.w	8003c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	3724      	adds	r7, #36	@ 0x24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40013800 	.word	0x40013800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40020400 	.word	0x40020400
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	40020c00 	.word	0x40020c00
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f6c:	787b      	ldrb	r3, [r7, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f78:	e003      	b.n	8003f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	619a      	str	r2, [r3, #24]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e267      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d075      	beq.n	800409a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fae:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fba:	4b85      	ldr	r3, [pc, #532]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d112      	bne.n	8003fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc6:	4b82      	ldr	r3, [pc, #520]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd2:	d10b      	bne.n	8003fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05b      	beq.n	8004098 <HAL_RCC_OscConfig+0x108>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d157      	bne.n	8004098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e242      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x74>
 8003ff6:	4b76      	ldr	r3, [pc, #472]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a75      	ldr	r2, [pc, #468]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e01d      	b.n	8004040 <HAL_RCC_OscConfig+0xb0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x98>
 800400e:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6f      	ldr	r2, [pc, #444]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b6d      	ldr	r3, [pc, #436]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6c      	ldr	r2, [pc, #432]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0xb0>
 8004028:	4b69      	ldr	r3, [pc, #420]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a68      	ldr	r2, [pc, #416]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800402e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	4b66      	ldr	r3, [pc, #408]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a65      	ldr	r2, [pc, #404]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800403a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800403e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d013      	beq.n	8004070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe fb00 	bl	800264c <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe fafc 	bl	800264c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	@ 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e207      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b5b      	ldr	r3, [pc, #364]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0xc0>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe faec 	bl	800264c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004078:	f7fe fae8 	bl	800264c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	@ 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e1f3      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	4b51      	ldr	r3, [pc, #324]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0xe8>
 8004096:	e000      	b.n	800409a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d063      	beq.n	800416e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d11c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040be:	4b44      	ldr	r3, [pc, #272]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d116      	bne.n	80040f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ca:	4b41      	ldr	r3, [pc, #260]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_RCC_OscConfig+0x152>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e1c7      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e2:	4b3b      	ldr	r3, [pc, #236]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4937      	ldr	r1, [pc, #220]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	e03a      	b.n	800416e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004100:	4b34      	ldr	r3, [pc, #208]	@ (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7fe faa1 	bl	800264c <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800410e:	f7fe fa9d 	bl	800264c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e1a8      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004120:	4b2b      	ldr	r3, [pc, #172]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412c:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4925      	ldr	r1, [pc, #148]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
 8004140:	e015      	b.n	800416e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004142:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <HAL_RCC_OscConfig+0x244>)
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fe fa80 	bl	800264c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004150:	f7fe fa7c 	bl	800264c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e187      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004162:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d036      	beq.n	80041e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004182:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <HAL_RCC_OscConfig+0x248>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fe fa60 	bl	800264c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004190:	f7fe fa5c 	bl	800264c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e167      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x200>
 80041ae:	e01b      	b.n	80041e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_RCC_OscConfig+0x248>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b6:	f7fe fa49 	bl	800264c <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	e00e      	b.n	80041dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041be:	f7fe fa45 	bl	800264c <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d907      	bls.n	80041dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e150      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
 80041d0:	40023800 	.word	0x40023800
 80041d4:	42470000 	.word	0x42470000
 80041d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	4b88      	ldr	r3, [pc, #544]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80041de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ea      	bne.n	80041be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8097 	beq.w	8004324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fa:	4b81      	ldr	r3, [pc, #516]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	4b7d      	ldr	r3, [pc, #500]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a7c      	ldr	r2, [pc, #496]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b7a      	ldr	r3, [pc, #488]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004222:	2301      	movs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	4b77      	ldr	r3, [pc, #476]	@ (8004404 <HAL_RCC_OscConfig+0x474>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d118      	bne.n	8004264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004232:	4b74      	ldr	r3, [pc, #464]	@ (8004404 <HAL_RCC_OscConfig+0x474>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a73      	ldr	r2, [pc, #460]	@ (8004404 <HAL_RCC_OscConfig+0x474>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423e:	f7fe fa05 	bl	800264c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004246:	f7fe fa01 	bl	800264c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e10c      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	4b6a      	ldr	r3, [pc, #424]	@ (8004404 <HAL_RCC_OscConfig+0x474>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x2ea>
 800426c:	4b64      	ldr	r3, [pc, #400]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	4a63      	ldr	r2, [pc, #396]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	@ 0x70
 8004278:	e01c      	b.n	80042b4 <HAL_RCC_OscConfig+0x324>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b05      	cmp	r3, #5
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x30c>
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a5e      	ldr	r2, [pc, #376]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	4b5c      	ldr	r3, [pc, #368]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	4a5b      	ldr	r2, [pc, #364]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6713      	str	r3, [r2, #112]	@ 0x70
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0x324>
 800429c:	4b58      	ldr	r3, [pc, #352]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	4a57      	ldr	r2, [pc, #348]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a8:	4b55      	ldr	r3, [pc, #340]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ac:	4a54      	ldr	r2, [pc, #336]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80042ae:	f023 0304 	bic.w	r3, r3, #4
 80042b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fe f9c6 	bl	800264c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	e00a      	b.n	80042da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fe f9c2 	bl	800264c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e0cb      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042da:	4b49      	ldr	r3, [pc, #292]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ee      	beq.n	80042c4 <HAL_RCC_OscConfig+0x334>
 80042e6:	e014      	b.n	8004312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e8:	f7fe f9b0 	bl	800264c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fe f9ac 	bl	800264c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0b5      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004306:	4b3e      	ldr	r3, [pc, #248]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ee      	bne.n	80042f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d105      	bne.n	8004324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004318:	4b39      	ldr	r3, [pc, #228]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	4a38      	ldr	r2, [pc, #224]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 800431e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004322:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80a1 	beq.w	8004470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800432e:	4b34      	ldr	r3, [pc, #208]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	d05c      	beq.n	80043f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d141      	bne.n	80043c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <HAL_RCC_OscConfig+0x478>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe f980 	bl	800264c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe f97c 	bl	800264c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e087      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	3b01      	subs	r3, #1
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	491b      	ldr	r1, [pc, #108]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <HAL_RCC_OscConfig+0x478>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fe f955 	bl	800264c <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fe f951 	bl	800264c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e05c      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b8:	4b11      	ldr	r3, [pc, #68]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x416>
 80043c4:	e054      	b.n	8004470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fe f93e 	bl	800264c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe f93a 	bl	800264c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e045      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x444>
 80043f2:	e03d      	b.n	8004470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e038      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
 8004400:	40023800 	.word	0x40023800
 8004404:	40007000 	.word	0x40007000
 8004408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800440c:	4b1b      	ldr	r3, [pc, #108]	@ (800447c <HAL_RCC_OscConfig+0x4ec>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d028      	beq.n	800446c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d121      	bne.n	800446c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d11a      	bne.n	800446c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800443c:	4013      	ands	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004444:	4293      	cmp	r3, r2
 8004446:	d111      	bne.n	800446c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	3b01      	subs	r3, #1
 8004456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0cc      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004494:	4b68      	ldr	r3, [pc, #416]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d90c      	bls.n	80044bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b65      	ldr	r3, [pc, #404]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b63      	ldr	r3, [pc, #396]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0b8      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d4:	4b59      	ldr	r3, [pc, #356]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a58      	ldr	r2, [pc, #352]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ec:	4b53      	ldr	r3, [pc, #332]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a52      	ldr	r2, [pc, #328]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b50      	ldr	r3, [pc, #320]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	494d      	ldr	r1, [pc, #308]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d044      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b47      	ldr	r3, [pc, #284]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d119      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d003      	beq.n	800453e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	4b3f      	ldr	r3, [pc, #252]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e06f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e067      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800455e:	4b37      	ldr	r3, [pc, #220]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 0203 	bic.w	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4934      	ldr	r1, [pc, #208]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004570:	f7fe f86c 	bl	800264c <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	e00a      	b.n	800458e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004578:	f7fe f868 	bl	800264c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e04f      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	4b2b      	ldr	r3, [pc, #172]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 020c 	and.w	r2, r3, #12
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	429a      	cmp	r2, r3
 800459e:	d1eb      	bne.n	8004578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d20c      	bcs.n	80045c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b22      	ldr	r3, [pc, #136]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e032      	b.n	800462e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d4:	4b19      	ldr	r3, [pc, #100]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4916      	ldr	r1, [pc, #88]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	490e      	ldr	r1, [pc, #56]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004606:	f000 f821 	bl	800464c <HAL_RCC_GetSysClockFreq>
 800460a:	4602      	mov	r2, r0
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	490a      	ldr	r1, [pc, #40]	@ (8004640 <HAL_RCC_ClockConfig+0x1c0>)
 8004618:	5ccb      	ldrb	r3, [r1, r3]
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004622:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd ffcc 	bl	80025c4 <HAL_InitTick>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023c00 	.word	0x40023c00
 800463c:	40023800 	.word	0x40023800
 8004640:	08009224 	.word	0x08009224
 8004644:	20000030 	.word	0x20000030
 8004648:	20000034 	.word	0x20000034

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b090      	sub	sp, #64	@ 0x40
 8004652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	@ 0x34
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465c:	2300      	movs	r3, #0
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d00d      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x40>
 8004670:	2b08      	cmp	r3, #8
 8004672:	f200 80a1 	bhi.w	80047b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 800467a:	2b04      	cmp	r3, #4
 800467c:	d003      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x3a>
 800467e:	e09b      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004682:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004684:	e09b      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004686:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004688:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800468a:	e098      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800468c:	4b4f      	ldr	r3, [pc, #316]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004696:	4b4d      	ldr	r3, [pc, #308]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b4a      	ldr	r3, [pc, #296]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b4:	2100      	movs	r1, #0
 80046b6:	4b47      	ldr	r3, [pc, #284]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	fb03 f201 	mul.w	r2, r3, r1
 80046bc:	2300      	movs	r3, #0
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	4a43      	ldr	r2, [pc, #268]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c6:	fba0 1202 	umull	r1, r2, r0, r2
 80046ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046cc:	460a      	mov	r2, r1
 80046ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80046d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d2:	4413      	add	r3, r2
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d8:	2200      	movs	r2, #0
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046e6:	f7fc faa1 	bl	8000c2c <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4613      	mov	r3, r2
 80046f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f2:	e053      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f4:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	2200      	movs	r2, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	617a      	str	r2, [r7, #20]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004706:	f04f 0b00 	mov.w	fp, #0
 800470a:	4652      	mov	r2, sl
 800470c:	465b      	mov	r3, fp
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	0159      	lsls	r1, r3, #5
 8004718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471c:	0150      	lsls	r0, r2, #5
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	ebb2 080a 	subs.w	r8, r2, sl
 8004726:	eb63 090b 	sbc.w	r9, r3, fp
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004736:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800473a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800473e:	ebb2 0408 	subs.w	r4, r2, r8
 8004742:	eb63 0509 	sbc.w	r5, r3, r9
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	00eb      	lsls	r3, r5, #3
 8004750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004754:	00e2      	lsls	r2, r4, #3
 8004756:	4614      	mov	r4, r2
 8004758:	461d      	mov	r5, r3
 800475a:	eb14 030a 	adds.w	r3, r4, sl
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	eb45 030b 	adc.w	r3, r5, fp
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004772:	4629      	mov	r1, r5
 8004774:	028b      	lsls	r3, r1, #10
 8004776:	4621      	mov	r1, r4
 8004778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800477c:	4621      	mov	r1, r4
 800477e:	028a      	lsls	r2, r1, #10
 8004780:	4610      	mov	r0, r2
 8004782:	4619      	mov	r1, r3
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	2200      	movs	r2, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	60fa      	str	r2, [r7, #12]
 800478c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004790:	f7fc fa4c 	bl	8000c2c <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479c:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	3301      	adds	r3, #1
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80047ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047b6:	e002      	b.n	80047be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b8:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3740      	adds	r7, #64	@ 0x40
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	017d7840 	.word	0x017d7840

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b03      	ldr	r3, [pc, #12]	@ (80047ec <HAL_RCC_GetHCLKFreq+0x14>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000030 	.word	0x20000030

080047f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f4:	f7ff fff0 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b05      	ldr	r3, [pc, #20]	@ (8004810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	4903      	ldr	r1, [pc, #12]	@ (8004814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004806:	5ccb      	ldrb	r3, [r1, r3]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	08009234 	.word	0x08009234

08004818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800481c:	f7ff ffdc 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0b5b      	lsrs	r3, r3, #13
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	@ (800483c <HAL_RCC_GetPCLK2Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	08009234 	.word	0x08009234

08004840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e041      	b.n	80048d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fb96 	bl	8001f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 f9a0 	bl	8004bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d109      	bne.n	8004904 <HAL_TIM_PWM_Start+0x24>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e022      	b.n	800494a <HAL_TIM_PWM_Start+0x6a>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d109      	bne.n	800491e <HAL_TIM_PWM_Start+0x3e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	bf14      	ite	ne
 8004916:	2301      	movne	r3, #1
 8004918:	2300      	moveq	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	e015      	b.n	800494a <HAL_TIM_PWM_Start+0x6a>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d109      	bne.n	8004938 <HAL_TIM_PWM_Start+0x58>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e008      	b.n	800494a <HAL_TIM_PWM_Start+0x6a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e068      	b.n	8004a24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Start+0x82>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004960:	e013      	b.n	800498a <HAL_TIM_PWM_Start+0xaa>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d104      	bne.n	8004972 <HAL_TIM_PWM_Start+0x92>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004970:	e00b      	b.n	800498a <HAL_TIM_PWM_Start+0xaa>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d104      	bne.n	8004982 <HAL_TIM_PWM_Start+0xa2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004980:	e003      	b.n	800498a <HAL_TIM_PWM_Start+0xaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb2e 	bl	8004ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a23      	ldr	r2, [pc, #140]	@ (8004a2c <HAL_TIM_PWM_Start+0x14c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a2c <HAL_TIM_PWM_Start+0x14c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <HAL_TIM_PWM_Start+0x10e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Start+0x10e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <HAL_TIM_PWM_Start+0x150>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Start+0x10e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a17      	ldr	r2, [pc, #92]	@ (8004a34 <HAL_TIM_PWM_Start+0x154>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Start+0x10e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a16      	ldr	r2, [pc, #88]	@ (8004a38 <HAL_TIM_PWM_Start+0x158>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Start+0x10e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a14      	ldr	r2, [pc, #80]	@ (8004a3c <HAL_TIM_PWM_Start+0x15c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d111      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d010      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	e007      	b.n	8004a22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40014000 	.word	0x40014000

08004a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0ae      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	f200 809f 	bhi.w	8004bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004bad 	.word	0x08004bad
 8004a7c:	08004bad 	.word	0x08004bad
 8004a80:	08004bad 	.word	0x08004bad
 8004a84:	08004ae9 	.word	0x08004ae9
 8004a88:	08004bad 	.word	0x08004bad
 8004a8c:	08004bad 	.word	0x08004bad
 8004a90:	08004bad 	.word	0x08004bad
 8004a94:	08004b2b 	.word	0x08004b2b
 8004a98:	08004bad 	.word	0x08004bad
 8004a9c:	08004bad 	.word	0x08004bad
 8004aa0:	08004bad 	.word	0x08004bad
 8004aa4:	08004b6b 	.word	0x08004b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f914 	bl	8004cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0204 	bic.w	r2, r2, #4
 8004ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	619a      	str	r2, [r3, #24]
      break;
 8004ae6:	e064      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f95a 	bl	8004da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	021a      	lsls	r2, r3, #8
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	619a      	str	r2, [r3, #24]
      break;
 8004b28:	e043      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f9a5 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0208 	orr.w	r2, r2, #8
 8004b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0204 	bic.w	r2, r2, #4
 8004b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
      break;
 8004b68:	e023      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f9ef 	bl	8004f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	021a      	lsls	r2, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	61da      	str	r2, [r3, #28]
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc0 <TIM_Base_SetConfig+0xfc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00f      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a37      	ldr	r2, [pc, #220]	@ (8004cc4 <TIM_Base_SetConfig+0x100>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a36      	ldr	r2, [pc, #216]	@ (8004cc8 <TIM_Base_SetConfig+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x38>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a35      	ldr	r2, [pc, #212]	@ (8004ccc <TIM_Base_SetConfig+0x108>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <TIM_Base_SetConfig+0xfc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01b      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1c:	d017      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a28      	ldr	r2, [pc, #160]	@ (8004cc4 <TIM_Base_SetConfig+0x100>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a27      	ldr	r2, [pc, #156]	@ (8004cc8 <TIM_Base_SetConfig+0x104>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a26      	ldr	r2, [pc, #152]	@ (8004ccc <TIM_Base_SetConfig+0x108>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a25      	ldr	r2, [pc, #148]	@ (8004cd0 <TIM_Base_SetConfig+0x10c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a24      	ldr	r2, [pc, #144]	@ (8004cd4 <TIM_Base_SetConfig+0x110>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_Base_SetConfig+0x8a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a23      	ldr	r2, [pc, #140]	@ (8004cd8 <TIM_Base_SetConfig+0x114>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d108      	bne.n	8004c60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc0 <TIM_Base_SetConfig+0xfc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0201 	bic.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0302 	bic.w	r3, r3, #2
 8004d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <TIM_OC1_SetConfig+0xc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0308 	bic.w	r3, r3, #8
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <TIM_OC1_SetConfig+0xc8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d111      	bne.n	8004d7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40010000 	.word	0x40010000

08004da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0210 	bic.w	r2, r3, #16
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0320 	bic.w	r3, r3, #32
 8004df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <TIM_OC2_SetConfig+0xd4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10d      	bne.n	8004e24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <TIM_OC2_SetConfig+0xd4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d113      	bne.n	8004e54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <TIM_OC3_SetConfig+0xd0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10d      	bne.n	8004efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a14      	ldr	r2, [pc, #80]	@ (8004f50 <TIM_OC3_SetConfig+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d113      	bne.n	8004f2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000

08004f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a10      	ldr	r2, [pc, #64]	@ (8004ff0 <TIM_OC4_SetConfig+0x9c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d109      	bne.n	8004fc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	43db      	mvns	r3, r3
 8005016:	401a      	ands	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e050      	b.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1c      	ldr	r2, [pc, #112]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d018      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a4:	d013      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a18      	ldr	r2, [pc, #96]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00e      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d009      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d004      	beq.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a13      	ldr	r2, [pc, #76]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10c      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000

0800511c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e03d      	b.n	80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e042      	b.n	8005258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc ffaa 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	@ 0x24
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 ff85 	bl	8006114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	@ 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b20      	cmp	r3, #32
 800527e:	d175      	bne.n	800536c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Transmit+0x2c>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e06e      	b.n	800536e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2221      	movs	r2, #33	@ 0x21
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800529e:	f7fd f9d5 	bl	800264c <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b8:	d108      	bne.n	80052cc <HAL_UART_Transmit+0x6c>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e003      	b.n	80052d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d4:	e02e      	b.n	8005334 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	@ 0x80
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fc5d 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e03a      	b.n	800536e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800530c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3302      	adds	r3, #2
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	e007      	b.n	8005326 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	781a      	ldrb	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1cb      	bne.n	80052d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	2140      	movs	r1, #64	@ 0x40
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fc29 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e006      	b.n	800536e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08c      	sub	sp, #48	@ 0x30
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b20      	cmp	r3, #32
 800538e:	d14a      	bne.n	8005426 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e043      	b.n	8005428 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fc4e 	bl	8005c54 <UART_Start_Receive_DMA>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80053be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d12c      	bne.n	8005420 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d125      	bne.n	800541a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	617b      	str	r3, [r7, #20]
   return(result);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f043 0310 	orr.w	r3, r3, #16
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005404:	627a      	str	r2, [r7, #36]	@ 0x24
 8005406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6a39      	ldr	r1, [r7, #32]
 800540a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	61fb      	str	r3, [r7, #28]
   return(result);
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e5      	bne.n	80053e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005418:	e002      	b.n	8005420 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005424:	e000      	b.n	8005428 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
  }
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	@ 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b0ba      	sub	sp, #232	@ 0xe8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005456:	2300      	movs	r3, #0
 8005458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800545c:	2300      	movs	r3, #0
 800545e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800546e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_UART_IRQHandler+0x66>
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fd81 	bl	8005f96 <UART_Receive_IT>
      return;
 8005494:	e25b      	b.n	800594e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80de 	beq.w	800565c <HAL_UART_IRQHandler+0x22c>
 80054a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80d1 	beq.w	800565c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <HAL_UART_IRQHandler+0xae>
 80054c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_UART_IRQHandler+0xd2>
 80054ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	f043 0202 	orr.w	r2, r3, #2
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_UART_IRQHandler+0xf6>
 800550e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <HAL_UART_IRQHandler+0x126>
 8005532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d105      	bne.n	800554a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800553e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f043 0208 	orr.w	r2, r3, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 81f2 	beq.w	8005944 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_UART_IRQHandler+0x14e>
 800556c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fd0c 	bl	8005f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_UART_IRQHandler+0x17a>
 80055a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04f      	beq.n	800564a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fc14 	bl	8005dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b40      	cmp	r3, #64	@ 0x40
 80055bc:	d141      	bne.n	8005642 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80055d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1d9      	bne.n	80055be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d013      	beq.n	800563a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005616:	4a7e      	ldr	r2, [pc, #504]	@ (8005810 <HAL_UART_IRQHandler+0x3e0>)
 8005618:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe f88c 	bl	800373c <HAL_DMA_Abort_IT>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005634:	4610      	mov	r0, r2
 8005636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00e      	b.n	8005658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9a8 	bl	8005990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e00a      	b.n	8005658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9a4 	bl	8005990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e006      	b.n	8005658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f9a0 	bl	8005990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005656:	e175      	b.n	8005944 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	bf00      	nop
    return;
 800565a:	e173      	b.n	8005944 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005660:	2b01      	cmp	r3, #1
 8005662:	f040 814f 	bne.w	8005904 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8148 	beq.w	8005904 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 8141 	beq.w	8005904 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a2:	2b40      	cmp	r3, #64	@ 0x40
 80056a4:	f040 80b6 	bne.w	8005814 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8145 	beq.w	8005948 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056c6:	429a      	cmp	r2, r3
 80056c8:	f080 813e 	bcs.w	8005948 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056de:	f000 8088 	beq.w	80057f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800570e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800571a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d9      	bne.n	80056e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3314      	adds	r3, #20
 8005734:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800573e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005740:	f023 0301 	bic.w	r3, r3, #1
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3314      	adds	r3, #20
 800574e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005752:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005756:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800575a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e1      	bne.n	800572e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800577a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800577c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800578e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005790:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005794:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800579c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e3      	bne.n	800576a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	330c      	adds	r3, #12
 80057b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c2:	f023 0310 	bic.w	r3, r3, #16
 80057c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80057d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e3      	bne.n	80057b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fd ff35 	bl	800365c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005800:	b29b      	uxth	r3, r3
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	b29b      	uxth	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fdbf 	bl	800138c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800580e:	e09b      	b.n	8005948 <HAL_UART_IRQHandler+0x518>
 8005810:	08005e9f 	.word	0x08005e9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 808e 	beq.w	800594c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8089 	beq.w	800594c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800584a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005850:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800585e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005860:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e3      	bne.n	800583a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3314      	adds	r3, #20
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	623b      	str	r3, [r7, #32]
   return(result);
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005896:	633a      	str	r2, [r7, #48]	@ 0x30
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800589c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e3      	bne.n	8005872 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80058dc:	61fa      	str	r2, [r7, #28]
 80058de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69b9      	ldr	r1, [r7, #24]
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e3      	bne.n	80058b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fb fd45 	bl	800138c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005902:	e023      	b.n	800594c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_UART_IRQHandler+0x4f4>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fad2 	bl	8005ec6 <UART_Transmit_IT>
    return;
 8005922:	e014      	b.n	800594e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <HAL_UART_IRQHandler+0x51e>
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fb12 	bl	8005f66 <UART_EndTransmit_IT>
    return;
 8005942:	e004      	b.n	800594e <HAL_UART_IRQHandler+0x51e>
    return;
 8005944:	bf00      	nop
 8005946:	e002      	b.n	800594e <HAL_UART_IRQHandler+0x51e>
      return;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <HAL_UART_IRQHandler+0x51e>
      return;
 800594c:	bf00      	nop
  }
}
 800594e:	37e8      	adds	r7, #232	@ 0xe8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b09c      	sub	sp, #112	@ 0x70
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d172      	bne.n	8005aa6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c2:	2200      	movs	r2, #0
 80059c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80059e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e5      	bne.n	80059fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e5      	bne.n	8005a2e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d119      	bne.n	8005aa6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f023 0310 	bic.w	r3, r3, #16
 8005a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d106      	bne.n	8005ac2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005abc:	f7fb fc66 	bl	800138c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ac0:	e002      	b.n	8005ac8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ac2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ac4:	f7ff ff50 	bl	8005968 <HAL_UART_RxCpltCallback>
}
 8005ac8:	bf00      	nop
 8005aca:	3770      	adds	r7, #112	@ 0x70
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d108      	bne.n	8005afe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4619      	mov	r1, r3
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7fb fc48 	bl	800138c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005afc:	e002      	b.n	8005b04 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff3c 	bl	800597c <HAL_UART_RxHalfCpltCallback>
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b80      	cmp	r3, #128	@ 0x80
 8005b2a:	bf0c      	ite	eq
 8005b2c:	2301      	moveq	r3, #1
 8005b2e:	2300      	movne	r3, #0
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b21      	cmp	r3, #33	@ 0x21
 8005b3e:	d108      	bne.n	8005b52 <UART_DMAError+0x46>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005b4c:	68b8      	ldr	r0, [r7, #8]
 8005b4e:	f000 f91b 	bl	8005d88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b22      	cmp	r3, #34	@ 0x22
 8005b72:	d108      	bne.n	8005b86 <UART_DMAError+0x7a>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f000 f929 	bl	8005dd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f043 0210 	orr.w	r2, r3, #16
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	f7ff fefc 	bl	8005990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	e03b      	b.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb8:	d037      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fc fd47 	bl	800264c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e03a      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b80      	cmp	r3, #128	@ 0x80
 8005be6:	d020      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b40      	cmp	r3, #64	@ 0x40
 8005bec:	d01d      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d116      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f8e0 	bl	8005dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e00f      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	bf0c      	ite	eq
 8005c3a:	2301      	moveq	r3, #1
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d0b4      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b098      	sub	sp, #96	@ 0x60
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2222      	movs	r2, #34	@ 0x22
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	4a3e      	ldr	r2, [pc, #248]	@ (8005d7c <UART_Start_Receive_DMA+0x128>)
 8005c82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	4a3d      	ldr	r2, [pc, #244]	@ (8005d80 <UART_Start_Receive_DMA+0x12c>)
 8005c8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	4a3c      	ldr	r2, [pc, #240]	@ (8005d84 <UART_Start_Receive_DMA+0x130>)
 8005c92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c9c:	f107 0308 	add.w	r3, r7, #8
 8005ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	f7fd fc7a 	bl	80035ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d019      	beq.n	8005d0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e5      	bne.n	8005cd6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3314      	adds	r3, #20
 8005d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6a39      	ldr	r1, [r7, #32]
 8005d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e5      	bne.n	8005d3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3760      	adds	r7, #96	@ 0x60
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	080059a5 	.word	0x080059a5
 8005d80:	08005ad1 	.word	0x08005ad1
 8005d84:	08005b0d 	.word	0x08005b0d

08005d88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	@ 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	61ba      	str	r2, [r7, #24]
 8005db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6979      	ldr	r1, [r7, #20]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005dcc:	bf00      	nop
 8005dce:	3724      	adds	r7, #36	@ 0x24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b095      	sub	sp, #84	@ 0x54
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e00:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3314      	adds	r3, #20
 8005e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d119      	bne.n	8005e84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f023 0310 	bic.w	r3, r3, #16
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	330c      	adds	r3, #12
 8005e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e70:	61ba      	str	r2, [r7, #24]
 8005e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	6979      	ldr	r1, [r7, #20]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e5      	bne.n	8005e50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e92:	bf00      	nop
 8005e94:	3754      	adds	r7, #84	@ 0x54
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fd69 	bl	8005990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b21      	cmp	r3, #33	@ 0x21
 8005ed8:	d13e      	bne.n	8005f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee2:	d114      	bne.n	8005f0e <UART_Transmit_IT+0x48>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d110      	bne.n	8005f0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]
 8005f0c:	e008      	b.n	8005f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6211      	str	r1, [r2, #32]
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10f      	bne.n	8005f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fce4 	bl	8005954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b08c      	sub	sp, #48	@ 0x30
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b22      	cmp	r3, #34	@ 0x22
 8005fa8:	f040 80ae 	bne.w	8006108 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb4:	d117      	bne.n	8005fe6 <UART_Receive_IT+0x50>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d113      	bne.n	8005fe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fe4:	e026      	b.n	8006034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ff8:	d007      	beq.n	800600a <UART_Receive_IT+0x74>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <UART_Receive_IT+0x82>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e008      	b.n	800602a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006024:	b2da      	uxtb	r2, r3
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4619      	mov	r1, r3
 8006042:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006044:	2b00      	cmp	r3, #0
 8006046:	d15d      	bne.n	8006104 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0220 	bic.w	r2, r2, #32
 8006056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608a:	2b01      	cmp	r3, #1
 800608c:	d135      	bne.n	80060fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	613b      	str	r3, [r7, #16]
   return(result);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b4:	623a      	str	r2, [r7, #32]
 80060b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69f9      	ldr	r1, [r7, #28]
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b10      	cmp	r3, #16
 80060d4:	d10a      	bne.n	80060ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fb f94a 	bl	800138c <HAL_UARTEx_RxEventCallback>
 80060f8:	e002      	b.n	8006100 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fc34 	bl	8005968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	e002      	b.n	800610a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	@ 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b0c0      	sub	sp, #256	@ 0x100
 800611a:	af00      	add	r7, sp, #0
 800611c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	68d9      	ldr	r1, [r3, #12]
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	ea40 0301 	orr.w	r3, r0, r1
 800613c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	431a      	orrs	r2, r3
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	431a      	orrs	r2, r3
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800616c:	f021 010c 	bic.w	r1, r1, #12
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800617a:	430b      	orrs	r3, r1
 800617c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	6999      	ldr	r1, [r3, #24]
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	ea40 0301 	orr.w	r3, r0, r1
 800619a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b8f      	ldr	r3, [pc, #572]	@ (80063e0 <UART_SetConfig+0x2cc>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d005      	beq.n	80061b4 <UART_SetConfig+0xa0>
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b8d      	ldr	r3, [pc, #564]	@ (80063e4 <UART_SetConfig+0x2d0>)
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d104      	bne.n	80061be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7fe fb30 	bl	8004818 <HAL_RCC_GetPCLK2Freq>
 80061b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061bc:	e003      	b.n	80061c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe fb17 	bl	80047f0 <HAL_RCC_GetPCLK1Freq>
 80061c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d0:	f040 810c 	bne.w	80063ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	1891      	adds	r1, r2, r2
 80061ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061ee:	415b      	adcs	r3, r3
 80061f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061f6:	4621      	mov	r1, r4
 80061f8:	eb12 0801 	adds.w	r8, r2, r1
 80061fc:	4629      	mov	r1, r5
 80061fe:	eb43 0901 	adc.w	r9, r3, r1
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006216:	4690      	mov	r8, r2
 8006218:	4699      	mov	r9, r3
 800621a:	4623      	mov	r3, r4
 800621c:	eb18 0303 	adds.w	r3, r8, r3
 8006220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006224:	462b      	mov	r3, r5
 8006226:	eb49 0303 	adc.w	r3, r9, r3
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800623a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800623e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006242:	460b      	mov	r3, r1
 8006244:	18db      	adds	r3, r3, r3
 8006246:	653b      	str	r3, [r7, #80]	@ 0x50
 8006248:	4613      	mov	r3, r2
 800624a:	eb42 0303 	adc.w	r3, r2, r3
 800624e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006258:	f7fa fce8 	bl	8000c2c <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4b61      	ldr	r3, [pc, #388]	@ (80063e8 <UART_SetConfig+0x2d4>)
 8006262:	fba3 2302 	umull	r2, r3, r3, r2
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	011c      	lsls	r4, r3, #4
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006274:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	1891      	adds	r1, r2, r2
 8006282:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006284:	415b      	adcs	r3, r3
 8006286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800628c:	4641      	mov	r1, r8
 800628e:	eb12 0a01 	adds.w	sl, r2, r1
 8006292:	4649      	mov	r1, r9
 8006294:	eb43 0b01 	adc.w	fp, r3, r1
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ac:	4692      	mov	sl, r2
 80062ae:	469b      	mov	fp, r3
 80062b0:	4643      	mov	r3, r8
 80062b2:	eb1a 0303 	adds.w	r3, sl, r3
 80062b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062ba:	464b      	mov	r3, r9
 80062bc:	eb4b 0303 	adc.w	r3, fp, r3
 80062c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062d8:	460b      	mov	r3, r1
 80062da:	18db      	adds	r3, r3, r3
 80062dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80062de:	4613      	mov	r3, r2
 80062e0:	eb42 0303 	adc.w	r3, r2, r3
 80062e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062ee:	f7fa fc9d 	bl	8000c2c <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	4b3b      	ldr	r3, [pc, #236]	@ (80063e8 <UART_SetConfig+0x2d4>)
 80062fa:	fba3 2301 	umull	r2, r3, r3, r1
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	2264      	movs	r2, #100	@ 0x64
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	1acb      	subs	r3, r1, r3
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800630e:	4b36      	ldr	r3, [pc, #216]	@ (80063e8 <UART_SetConfig+0x2d4>)
 8006310:	fba3 2302 	umull	r2, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800631c:	441c      	add	r4, r3
 800631e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006328:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800632c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	1891      	adds	r1, r2, r2
 8006336:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006338:	415b      	adcs	r3, r3
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006340:	4641      	mov	r1, r8
 8006342:	1851      	adds	r1, r2, r1
 8006344:	6339      	str	r1, [r7, #48]	@ 0x30
 8006346:	4649      	mov	r1, r9
 8006348:	414b      	adcs	r3, r1
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006358:	4659      	mov	r1, fp
 800635a:	00cb      	lsls	r3, r1, #3
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006362:	4651      	mov	r1, sl
 8006364:	00ca      	lsls	r2, r1, #3
 8006366:	4610      	mov	r0, r2
 8006368:	4619      	mov	r1, r3
 800636a:	4603      	mov	r3, r0
 800636c:	4642      	mov	r2, r8
 800636e:	189b      	adds	r3, r3, r2
 8006370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006374:	464b      	mov	r3, r9
 8006376:	460a      	mov	r2, r1
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800638c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006394:	460b      	mov	r3, r1
 8006396:	18db      	adds	r3, r3, r3
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800639a:	4613      	mov	r3, r2
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063aa:	f7fa fc3f 	bl	8000c2c <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4b0d      	ldr	r3, [pc, #52]	@ (80063e8 <UART_SetConfig+0x2d4>)
 80063b4:	fba3 1302 	umull	r1, r3, r3, r2
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	2164      	movs	r1, #100	@ 0x64
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	3332      	adds	r3, #50	@ 0x32
 80063c6:	4a08      	ldr	r2, [pc, #32]	@ (80063e8 <UART_SetConfig+0x2d4>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	f003 0207 	and.w	r2, r3, #7
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4422      	add	r2, r4
 80063da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063dc:	e106      	b.n	80065ec <UART_SetConfig+0x4d8>
 80063de:	bf00      	nop
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40011400 	.word	0x40011400
 80063e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063fe:	4642      	mov	r2, r8
 8006400:	464b      	mov	r3, r9
 8006402:	1891      	adds	r1, r2, r2
 8006404:	6239      	str	r1, [r7, #32]
 8006406:	415b      	adcs	r3, r3
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
 800640a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800640e:	4641      	mov	r1, r8
 8006410:	1854      	adds	r4, r2, r1
 8006412:	4649      	mov	r1, r9
 8006414:	eb43 0501 	adc.w	r5, r3, r1
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	00eb      	lsls	r3, r5, #3
 8006422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006426:	00e2      	lsls	r2, r4, #3
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	4643      	mov	r3, r8
 800642e:	18e3      	adds	r3, r4, r3
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006434:	464b      	mov	r3, r9
 8006436:	eb45 0303 	adc.w	r3, r5, r3
 800643a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800644a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800645a:	4629      	mov	r1, r5
 800645c:	008b      	lsls	r3, r1, #2
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006464:	4621      	mov	r1, r4
 8006466:	008a      	lsls	r2, r1, #2
 8006468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800646c:	f7fa fbde 	bl	8000c2c <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b60      	ldr	r3, [pc, #384]	@ (80065f8 <UART_SetConfig+0x4e4>)
 8006476:	fba3 2302 	umull	r2, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	011c      	lsls	r4, r3, #4
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800648c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	61b9      	str	r1, [r7, #24]
 8006498:	415b      	adcs	r3, r3
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a0:	4641      	mov	r1, r8
 80064a2:	1851      	adds	r1, r2, r1
 80064a4:	6139      	str	r1, [r7, #16]
 80064a6:	4649      	mov	r1, r9
 80064a8:	414b      	adcs	r3, r1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b8:	4659      	mov	r1, fp
 80064ba:	00cb      	lsls	r3, r1, #3
 80064bc:	4651      	mov	r1, sl
 80064be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c2:	4651      	mov	r1, sl
 80064c4:	00ca      	lsls	r2, r1, #3
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	4642      	mov	r2, r8
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064d4:	464b      	mov	r3, r9
 80064d6:	460a      	mov	r2, r1
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064f8:	4649      	mov	r1, r9
 80064fa:	008b      	lsls	r3, r1, #2
 80064fc:	4641      	mov	r1, r8
 80064fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006502:	4641      	mov	r1, r8
 8006504:	008a      	lsls	r2, r1, #2
 8006506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800650a:	f7fa fb8f 	bl	8000c2c <__aeabi_uldivmod>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4611      	mov	r1, r2
 8006514:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <UART_SetConfig+0x4e4>)
 8006516:	fba3 2301 	umull	r2, r3, r3, r1
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2264      	movs	r2, #100	@ 0x64
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	1acb      	subs	r3, r1, r3
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	3332      	adds	r3, #50	@ 0x32
 8006528:	4a33      	ldr	r2, [pc, #204]	@ (80065f8 <UART_SetConfig+0x4e4>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006534:	441c      	add	r4, r3
 8006536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800653a:	2200      	movs	r2, #0
 800653c:	673b      	str	r3, [r7, #112]	@ 0x70
 800653e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006540:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006544:	4642      	mov	r2, r8
 8006546:	464b      	mov	r3, r9
 8006548:	1891      	adds	r1, r2, r2
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	415b      	adcs	r3, r3
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006554:	4641      	mov	r1, r8
 8006556:	1851      	adds	r1, r2, r1
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	4649      	mov	r1, r9
 800655c:	414b      	adcs	r3, r1
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800656c:	4659      	mov	r1, fp
 800656e:	00cb      	lsls	r3, r1, #3
 8006570:	4651      	mov	r1, sl
 8006572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006576:	4651      	mov	r1, sl
 8006578:	00ca      	lsls	r2, r1, #3
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	4603      	mov	r3, r0
 8006580:	4642      	mov	r2, r8
 8006582:	189b      	adds	r3, r3, r2
 8006584:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006586:	464b      	mov	r3, r9
 8006588:	460a      	mov	r2, r1
 800658a:	eb42 0303 	adc.w	r3, r2, r3
 800658e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	663b      	str	r3, [r7, #96]	@ 0x60
 800659a:	667a      	str	r2, [r7, #100]	@ 0x64
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065a8:	4649      	mov	r1, r9
 80065aa:	008b      	lsls	r3, r1, #2
 80065ac:	4641      	mov	r1, r8
 80065ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b2:	4641      	mov	r1, r8
 80065b4:	008a      	lsls	r2, r1, #2
 80065b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065ba:	f7fa fb37 	bl	8000c2c <__aeabi_uldivmod>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <UART_SetConfig+0x4e4>)
 80065c4:	fba3 1302 	umull	r1, r3, r3, r2
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	2164      	movs	r1, #100	@ 0x64
 80065cc:	fb01 f303 	mul.w	r3, r1, r3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	3332      	adds	r3, #50	@ 0x32
 80065d6:	4a08      	ldr	r2, [pc, #32]	@ (80065f8 <UART_SetConfig+0x4e4>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4422      	add	r2, r4
 80065ea:	609a      	str	r2, [r3, #8]
}
 80065ec:	bf00      	nop
 80065ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065f2:	46bd      	mov	sp, r7
 80065f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f8:	51eb851f 	.word	0x51eb851f

080065fc <atof>:
 80065fc:	2100      	movs	r1, #0
 80065fe:	f000 bea7 	b.w	8007350 <strtod>
	...

08006604 <std>:
 8006604:	2300      	movs	r3, #0
 8006606:	b510      	push	{r4, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	e9c0 3300 	strd	r3, r3, [r0]
 800660e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006612:	6083      	str	r3, [r0, #8]
 8006614:	8181      	strh	r1, [r0, #12]
 8006616:	6643      	str	r3, [r0, #100]	@ 0x64
 8006618:	81c2      	strh	r2, [r0, #14]
 800661a:	6183      	str	r3, [r0, #24]
 800661c:	4619      	mov	r1, r3
 800661e:	2208      	movs	r2, #8
 8006620:	305c      	adds	r0, #92	@ 0x5c
 8006622:	f000 febf 	bl	80073a4 <memset>
 8006626:	4b0d      	ldr	r3, [pc, #52]	@ (800665c <std+0x58>)
 8006628:	6263      	str	r3, [r4, #36]	@ 0x24
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <std+0x5c>)
 800662c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800662e:	4b0d      	ldr	r3, [pc, #52]	@ (8006664 <std+0x60>)
 8006630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <std+0x64>)
 8006634:	6323      	str	r3, [r4, #48]	@ 0x30
 8006636:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <std+0x68>)
 8006638:	6224      	str	r4, [r4, #32]
 800663a:	429c      	cmp	r4, r3
 800663c:	d006      	beq.n	800664c <std+0x48>
 800663e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006642:	4294      	cmp	r4, r2
 8006644:	d002      	beq.n	800664c <std+0x48>
 8006646:	33d0      	adds	r3, #208	@ 0xd0
 8006648:	429c      	cmp	r4, r3
 800664a:	d105      	bne.n	8006658 <std+0x54>
 800664c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006654:	f000 bef8 	b.w	8007448 <__retarget_lock_init_recursive>
 8006658:	bd10      	pop	{r4, pc}
 800665a:	bf00      	nop
 800665c:	08008721 	.word	0x08008721
 8006660:	08008743 	.word	0x08008743
 8006664:	0800877b 	.word	0x0800877b
 8006668:	0800879f 	.word	0x0800879f
 800666c:	200004f8 	.word	0x200004f8

08006670 <stdio_exit_handler>:
 8006670:	4a02      	ldr	r2, [pc, #8]	@ (800667c <stdio_exit_handler+0xc>)
 8006672:	4903      	ldr	r1, [pc, #12]	@ (8006680 <stdio_exit_handler+0x10>)
 8006674:	4803      	ldr	r0, [pc, #12]	@ (8006684 <stdio_exit_handler+0x14>)
 8006676:	f000 be77 	b.w	8007368 <_fwalk_sglue>
 800667a:	bf00      	nop
 800667c:	2000003c 	.word	0x2000003c
 8006680:	08007d65 	.word	0x08007d65
 8006684:	200001b8 	.word	0x200001b8

08006688 <cleanup_stdio>:
 8006688:	6841      	ldr	r1, [r0, #4]
 800668a:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <cleanup_stdio+0x34>)
 800668c:	4299      	cmp	r1, r3
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
 8006692:	d001      	beq.n	8006698 <cleanup_stdio+0x10>
 8006694:	f001 fb66 	bl	8007d64 <_fflush_r>
 8006698:	68a1      	ldr	r1, [r4, #8]
 800669a:	4b09      	ldr	r3, [pc, #36]	@ (80066c0 <cleanup_stdio+0x38>)
 800669c:	4299      	cmp	r1, r3
 800669e:	d002      	beq.n	80066a6 <cleanup_stdio+0x1e>
 80066a0:	4620      	mov	r0, r4
 80066a2:	f001 fb5f 	bl	8007d64 <_fflush_r>
 80066a6:	68e1      	ldr	r1, [r4, #12]
 80066a8:	4b06      	ldr	r3, [pc, #24]	@ (80066c4 <cleanup_stdio+0x3c>)
 80066aa:	4299      	cmp	r1, r3
 80066ac:	d004      	beq.n	80066b8 <cleanup_stdio+0x30>
 80066ae:	4620      	mov	r0, r4
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f001 bb56 	b.w	8007d64 <_fflush_r>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	200004f8 	.word	0x200004f8
 80066c0:	20000560 	.word	0x20000560
 80066c4:	200005c8 	.word	0x200005c8

080066c8 <global_stdio_init.part.0>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <global_stdio_init.part.0+0x30>)
 80066cc:	4c0b      	ldr	r4, [pc, #44]	@ (80066fc <global_stdio_init.part.0+0x34>)
 80066ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006700 <global_stdio_init.part.0+0x38>)
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	4620      	mov	r0, r4
 80066d4:	2200      	movs	r2, #0
 80066d6:	2104      	movs	r1, #4
 80066d8:	f7ff ff94 	bl	8006604 <std>
 80066dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066e0:	2201      	movs	r2, #1
 80066e2:	2109      	movs	r1, #9
 80066e4:	f7ff ff8e 	bl	8006604 <std>
 80066e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066ec:	2202      	movs	r2, #2
 80066ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f2:	2112      	movs	r1, #18
 80066f4:	f7ff bf86 	b.w	8006604 <std>
 80066f8:	20000630 	.word	0x20000630
 80066fc:	200004f8 	.word	0x200004f8
 8006700:	08006671 	.word	0x08006671

08006704 <__sfp_lock_acquire>:
 8006704:	4801      	ldr	r0, [pc, #4]	@ (800670c <__sfp_lock_acquire+0x8>)
 8006706:	f000 bea0 	b.w	800744a <__retarget_lock_acquire_recursive>
 800670a:	bf00      	nop
 800670c:	20000635 	.word	0x20000635

08006710 <__sfp_lock_release>:
 8006710:	4801      	ldr	r0, [pc, #4]	@ (8006718 <__sfp_lock_release+0x8>)
 8006712:	f000 be9b 	b.w	800744c <__retarget_lock_release_recursive>
 8006716:	bf00      	nop
 8006718:	20000635 	.word	0x20000635

0800671c <__sinit>:
 800671c:	b510      	push	{r4, lr}
 800671e:	4604      	mov	r4, r0
 8006720:	f7ff fff0 	bl	8006704 <__sfp_lock_acquire>
 8006724:	6a23      	ldr	r3, [r4, #32]
 8006726:	b11b      	cbz	r3, 8006730 <__sinit+0x14>
 8006728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800672c:	f7ff bff0 	b.w	8006710 <__sfp_lock_release>
 8006730:	4b04      	ldr	r3, [pc, #16]	@ (8006744 <__sinit+0x28>)
 8006732:	6223      	str	r3, [r4, #32]
 8006734:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <__sinit+0x2c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f5      	bne.n	8006728 <__sinit+0xc>
 800673c:	f7ff ffc4 	bl	80066c8 <global_stdio_init.part.0>
 8006740:	e7f2      	b.n	8006728 <__sinit+0xc>
 8006742:	bf00      	nop
 8006744:	08006689 	.word	0x08006689
 8006748:	20000630 	.word	0x20000630

0800674c <sulp>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4604      	mov	r4, r0
 8006750:	460d      	mov	r5, r1
 8006752:	ec45 4b10 	vmov	d0, r4, r5
 8006756:	4616      	mov	r6, r2
 8006758:	f001 fea4 	bl	80084a4 <__ulp>
 800675c:	ec51 0b10 	vmov	r0, r1, d0
 8006760:	b17e      	cbz	r6, 8006782 <sulp+0x36>
 8006762:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006766:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800676a:	2b00      	cmp	r3, #0
 800676c:	dd09      	ble.n	8006782 <sulp+0x36>
 800676e:	051b      	lsls	r3, r3, #20
 8006770:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006774:	2400      	movs	r4, #0
 8006776:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	f7f9 ff4b 	bl	8000618 <__aeabi_dmul>
 8006782:	ec41 0b10 	vmov	d0, r0, r1
 8006786:	bd70      	pop	{r4, r5, r6, pc}

08006788 <_strtod_l>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	b09f      	sub	sp, #124	@ 0x7c
 800678e:	460c      	mov	r4, r1
 8006790:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006792:	2200      	movs	r2, #0
 8006794:	921a      	str	r2, [sp, #104]	@ 0x68
 8006796:	9005      	str	r0, [sp, #20]
 8006798:	f04f 0a00 	mov.w	sl, #0
 800679c:	f04f 0b00 	mov.w	fp, #0
 80067a0:	460a      	mov	r2, r1
 80067a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067a4:	7811      	ldrb	r1, [r2, #0]
 80067a6:	292b      	cmp	r1, #43	@ 0x2b
 80067a8:	d04a      	beq.n	8006840 <_strtod_l+0xb8>
 80067aa:	d838      	bhi.n	800681e <_strtod_l+0x96>
 80067ac:	290d      	cmp	r1, #13
 80067ae:	d832      	bhi.n	8006816 <_strtod_l+0x8e>
 80067b0:	2908      	cmp	r1, #8
 80067b2:	d832      	bhi.n	800681a <_strtod_l+0x92>
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d03b      	beq.n	8006830 <_strtod_l+0xa8>
 80067b8:	2200      	movs	r2, #0
 80067ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80067bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80067be:	782a      	ldrb	r2, [r5, #0]
 80067c0:	2a30      	cmp	r2, #48	@ 0x30
 80067c2:	f040 80b2 	bne.w	800692a <_strtod_l+0x1a2>
 80067c6:	786a      	ldrb	r2, [r5, #1]
 80067c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067cc:	2a58      	cmp	r2, #88	@ 0x58
 80067ce:	d16e      	bne.n	80068ae <_strtod_l+0x126>
 80067d0:	9302      	str	r3, [sp, #8]
 80067d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	4a8f      	ldr	r2, [pc, #572]	@ (8006a18 <_strtod_l+0x290>)
 80067dc:	9805      	ldr	r0, [sp, #20]
 80067de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80067e0:	a919      	add	r1, sp, #100	@ 0x64
 80067e2:	f000 feb5 	bl	8007550 <__gethex>
 80067e6:	f010 060f 	ands.w	r6, r0, #15
 80067ea:	4604      	mov	r4, r0
 80067ec:	d005      	beq.n	80067fa <_strtod_l+0x72>
 80067ee:	2e06      	cmp	r6, #6
 80067f0:	d128      	bne.n	8006844 <_strtod_l+0xbc>
 80067f2:	3501      	adds	r5, #1
 80067f4:	2300      	movs	r3, #0
 80067f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80067f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80067fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 858e 	bne.w	800731e <_strtod_l+0xb96>
 8006802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006804:	b1cb      	cbz	r3, 800683a <_strtod_l+0xb2>
 8006806:	4652      	mov	r2, sl
 8006808:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800680c:	ec43 2b10 	vmov	d0, r2, r3
 8006810:	b01f      	add	sp, #124	@ 0x7c
 8006812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006816:	2920      	cmp	r1, #32
 8006818:	d1ce      	bne.n	80067b8 <_strtod_l+0x30>
 800681a:	3201      	adds	r2, #1
 800681c:	e7c1      	b.n	80067a2 <_strtod_l+0x1a>
 800681e:	292d      	cmp	r1, #45	@ 0x2d
 8006820:	d1ca      	bne.n	80067b8 <_strtod_l+0x30>
 8006822:	2101      	movs	r1, #1
 8006824:	910e      	str	r1, [sp, #56]	@ 0x38
 8006826:	1c51      	adds	r1, r2, #1
 8006828:	9119      	str	r1, [sp, #100]	@ 0x64
 800682a:	7852      	ldrb	r2, [r2, #1]
 800682c:	2a00      	cmp	r2, #0
 800682e:	d1c5      	bne.n	80067bc <_strtod_l+0x34>
 8006830:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006832:	9419      	str	r4, [sp, #100]	@ 0x64
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 8570 	bne.w	800731a <_strtod_l+0xb92>
 800683a:	4652      	mov	r2, sl
 800683c:	465b      	mov	r3, fp
 800683e:	e7e5      	b.n	800680c <_strtod_l+0x84>
 8006840:	2100      	movs	r1, #0
 8006842:	e7ef      	b.n	8006824 <_strtod_l+0x9c>
 8006844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006846:	b13a      	cbz	r2, 8006858 <_strtod_l+0xd0>
 8006848:	2135      	movs	r1, #53	@ 0x35
 800684a:	a81c      	add	r0, sp, #112	@ 0x70
 800684c:	f001 ff24 	bl	8008698 <__copybits>
 8006850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006852:	9805      	ldr	r0, [sp, #20]
 8006854:	f001 fafa 	bl	8007e4c <_Bfree>
 8006858:	3e01      	subs	r6, #1
 800685a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800685c:	2e04      	cmp	r6, #4
 800685e:	d806      	bhi.n	800686e <_strtod_l+0xe6>
 8006860:	e8df f006 	tbb	[pc, r6]
 8006864:	201d0314 	.word	0x201d0314
 8006868:	14          	.byte	0x14
 8006869:	00          	.byte	0x00
 800686a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800686e:	05e1      	lsls	r1, r4, #23
 8006870:	bf48      	it	mi
 8006872:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800687a:	0d1b      	lsrs	r3, r3, #20
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1bb      	bne.n	80067fa <_strtod_l+0x72>
 8006882:	f000 fdb7 	bl	80073f4 <__errno>
 8006886:	2322      	movs	r3, #34	@ 0x22
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	e7b6      	b.n	80067fa <_strtod_l+0x72>
 800688c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006890:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006894:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006898:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800689c:	e7e7      	b.n	800686e <_strtod_l+0xe6>
 800689e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006a20 <_strtod_l+0x298>
 80068a2:	e7e4      	b.n	800686e <_strtod_l+0xe6>
 80068a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068a8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80068ac:	e7df      	b.n	800686e <_strtod_l+0xe6>
 80068ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b30      	cmp	r3, #48	@ 0x30
 80068b8:	d0f9      	beq.n	80068ae <_strtod_l+0x126>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d09d      	beq.n	80067fa <_strtod_l+0x72>
 80068be:	2301      	movs	r3, #1
 80068c0:	2700      	movs	r7, #0
 80068c2:	9308      	str	r3, [sp, #32]
 80068c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80068ca:	46b9      	mov	r9, r7
 80068cc:	220a      	movs	r2, #10
 80068ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80068d0:	7805      	ldrb	r5, [r0, #0]
 80068d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80068d6:	b2d9      	uxtb	r1, r3
 80068d8:	2909      	cmp	r1, #9
 80068da:	d928      	bls.n	800692e <_strtod_l+0x1a6>
 80068dc:	494f      	ldr	r1, [pc, #316]	@ (8006a1c <_strtod_l+0x294>)
 80068de:	2201      	movs	r2, #1
 80068e0:	f000 fd75 	bl	80073ce <strncmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d032      	beq.n	800694e <_strtod_l+0x1c6>
 80068e8:	2000      	movs	r0, #0
 80068ea:	462a      	mov	r2, r5
 80068ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80068ee:	464d      	mov	r5, r9
 80068f0:	4603      	mov	r3, r0
 80068f2:	2a65      	cmp	r2, #101	@ 0x65
 80068f4:	d001      	beq.n	80068fa <_strtod_l+0x172>
 80068f6:	2a45      	cmp	r2, #69	@ 0x45
 80068f8:	d114      	bne.n	8006924 <_strtod_l+0x19c>
 80068fa:	b91d      	cbnz	r5, 8006904 <_strtod_l+0x17c>
 80068fc:	9a08      	ldr	r2, [sp, #32]
 80068fe:	4302      	orrs	r2, r0
 8006900:	d096      	beq.n	8006830 <_strtod_l+0xa8>
 8006902:	2500      	movs	r5, #0
 8006904:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006906:	1c62      	adds	r2, r4, #1
 8006908:	9219      	str	r2, [sp, #100]	@ 0x64
 800690a:	7862      	ldrb	r2, [r4, #1]
 800690c:	2a2b      	cmp	r2, #43	@ 0x2b
 800690e:	d07a      	beq.n	8006a06 <_strtod_l+0x27e>
 8006910:	2a2d      	cmp	r2, #45	@ 0x2d
 8006912:	d07e      	beq.n	8006a12 <_strtod_l+0x28a>
 8006914:	f04f 0c00 	mov.w	ip, #0
 8006918:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800691c:	2909      	cmp	r1, #9
 800691e:	f240 8085 	bls.w	8006a2c <_strtod_l+0x2a4>
 8006922:	9419      	str	r4, [sp, #100]	@ 0x64
 8006924:	f04f 0800 	mov.w	r8, #0
 8006928:	e0a5      	b.n	8006a76 <_strtod_l+0x2ee>
 800692a:	2300      	movs	r3, #0
 800692c:	e7c8      	b.n	80068c0 <_strtod_l+0x138>
 800692e:	f1b9 0f08 	cmp.w	r9, #8
 8006932:	bfd8      	it	le
 8006934:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006936:	f100 0001 	add.w	r0, r0, #1
 800693a:	bfda      	itte	le
 800693c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006940:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006942:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006946:	f109 0901 	add.w	r9, r9, #1
 800694a:	9019      	str	r0, [sp, #100]	@ 0x64
 800694c:	e7bf      	b.n	80068ce <_strtod_l+0x146>
 800694e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	9219      	str	r2, [sp, #100]	@ 0x64
 8006954:	785a      	ldrb	r2, [r3, #1]
 8006956:	f1b9 0f00 	cmp.w	r9, #0
 800695a:	d03b      	beq.n	80069d4 <_strtod_l+0x24c>
 800695c:	900a      	str	r0, [sp, #40]	@ 0x28
 800695e:	464d      	mov	r5, r9
 8006960:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006964:	2b09      	cmp	r3, #9
 8006966:	d912      	bls.n	800698e <_strtod_l+0x206>
 8006968:	2301      	movs	r3, #1
 800696a:	e7c2      	b.n	80068f2 <_strtod_l+0x16a>
 800696c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	9219      	str	r2, [sp, #100]	@ 0x64
 8006972:	785a      	ldrb	r2, [r3, #1]
 8006974:	3001      	adds	r0, #1
 8006976:	2a30      	cmp	r2, #48	@ 0x30
 8006978:	d0f8      	beq.n	800696c <_strtod_l+0x1e4>
 800697a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800697e:	2b08      	cmp	r3, #8
 8006980:	f200 84d2 	bhi.w	8007328 <_strtod_l+0xba0>
 8006984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006986:	900a      	str	r0, [sp, #40]	@ 0x28
 8006988:	2000      	movs	r0, #0
 800698a:	930c      	str	r3, [sp, #48]	@ 0x30
 800698c:	4605      	mov	r5, r0
 800698e:	3a30      	subs	r2, #48	@ 0x30
 8006990:	f100 0301 	add.w	r3, r0, #1
 8006994:	d018      	beq.n	80069c8 <_strtod_l+0x240>
 8006996:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006998:	4419      	add	r1, r3
 800699a:	910a      	str	r1, [sp, #40]	@ 0x28
 800699c:	462e      	mov	r6, r5
 800699e:	f04f 0e0a 	mov.w	lr, #10
 80069a2:	1c71      	adds	r1, r6, #1
 80069a4:	eba1 0c05 	sub.w	ip, r1, r5
 80069a8:	4563      	cmp	r3, ip
 80069aa:	dc15      	bgt.n	80069d8 <_strtod_l+0x250>
 80069ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80069b0:	182b      	adds	r3, r5, r0
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	f105 0501 	add.w	r5, r5, #1
 80069b8:	4405      	add	r5, r0
 80069ba:	dc1a      	bgt.n	80069f2 <_strtod_l+0x26a>
 80069bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069be:	230a      	movs	r3, #10
 80069c0:	fb03 2301 	mla	r3, r3, r1, r2
 80069c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069c6:	2300      	movs	r3, #0
 80069c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069ca:	1c51      	adds	r1, r2, #1
 80069cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80069ce:	7852      	ldrb	r2, [r2, #1]
 80069d0:	4618      	mov	r0, r3
 80069d2:	e7c5      	b.n	8006960 <_strtod_l+0x1d8>
 80069d4:	4648      	mov	r0, r9
 80069d6:	e7ce      	b.n	8006976 <_strtod_l+0x1ee>
 80069d8:	2e08      	cmp	r6, #8
 80069da:	dc05      	bgt.n	80069e8 <_strtod_l+0x260>
 80069dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069de:	fb0e f606 	mul.w	r6, lr, r6
 80069e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80069e4:	460e      	mov	r6, r1
 80069e6:	e7dc      	b.n	80069a2 <_strtod_l+0x21a>
 80069e8:	2910      	cmp	r1, #16
 80069ea:	bfd8      	it	le
 80069ec:	fb0e f707 	mulle.w	r7, lr, r7
 80069f0:	e7f8      	b.n	80069e4 <_strtod_l+0x25c>
 80069f2:	2b0f      	cmp	r3, #15
 80069f4:	bfdc      	itt	le
 80069f6:	230a      	movle	r3, #10
 80069f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80069fc:	e7e3      	b.n	80069c6 <_strtod_l+0x23e>
 80069fe:	2300      	movs	r3, #0
 8006a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a02:	2301      	movs	r3, #1
 8006a04:	e77a      	b.n	80068fc <_strtod_l+0x174>
 8006a06:	f04f 0c00 	mov.w	ip, #0
 8006a0a:	1ca2      	adds	r2, r4, #2
 8006a0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a0e:	78a2      	ldrb	r2, [r4, #2]
 8006a10:	e782      	b.n	8006918 <_strtod_l+0x190>
 8006a12:	f04f 0c01 	mov.w	ip, #1
 8006a16:	e7f8      	b.n	8006a0a <_strtod_l+0x282>
 8006a18:	080093c0 	.word	0x080093c0
 8006a1c:	08009244 	.word	0x08009244
 8006a20:	7ff00000 	.word	0x7ff00000
 8006a24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a26:	1c51      	adds	r1, r2, #1
 8006a28:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a2a:	7852      	ldrb	r2, [r2, #1]
 8006a2c:	2a30      	cmp	r2, #48	@ 0x30
 8006a2e:	d0f9      	beq.n	8006a24 <_strtod_l+0x29c>
 8006a30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a34:	2908      	cmp	r1, #8
 8006a36:	f63f af75 	bhi.w	8006924 <_strtod_l+0x19c>
 8006a3a:	3a30      	subs	r2, #48	@ 0x30
 8006a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a40:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a42:	f04f 080a 	mov.w	r8, #10
 8006a46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a48:	1c56      	adds	r6, r2, #1
 8006a4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a4c:	7852      	ldrb	r2, [r2, #1]
 8006a4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a52:	f1be 0f09 	cmp.w	lr, #9
 8006a56:	d939      	bls.n	8006acc <_strtod_l+0x344>
 8006a58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a5a:	1a76      	subs	r6, r6, r1
 8006a5c:	2e08      	cmp	r6, #8
 8006a5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a62:	dc03      	bgt.n	8006a6c <_strtod_l+0x2e4>
 8006a64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a66:	4588      	cmp	r8, r1
 8006a68:	bfa8      	it	ge
 8006a6a:	4688      	movge	r8, r1
 8006a6c:	f1bc 0f00 	cmp.w	ip, #0
 8006a70:	d001      	beq.n	8006a76 <_strtod_l+0x2ee>
 8006a72:	f1c8 0800 	rsb	r8, r8, #0
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	d14e      	bne.n	8006b18 <_strtod_l+0x390>
 8006a7a:	9908      	ldr	r1, [sp, #32]
 8006a7c:	4308      	orrs	r0, r1
 8006a7e:	f47f aebc 	bne.w	80067fa <_strtod_l+0x72>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f47f aed4 	bne.w	8006830 <_strtod_l+0xa8>
 8006a88:	2a69      	cmp	r2, #105	@ 0x69
 8006a8a:	d028      	beq.n	8006ade <_strtod_l+0x356>
 8006a8c:	dc25      	bgt.n	8006ada <_strtod_l+0x352>
 8006a8e:	2a49      	cmp	r2, #73	@ 0x49
 8006a90:	d025      	beq.n	8006ade <_strtod_l+0x356>
 8006a92:	2a4e      	cmp	r2, #78	@ 0x4e
 8006a94:	f47f aecc 	bne.w	8006830 <_strtod_l+0xa8>
 8006a98:	499a      	ldr	r1, [pc, #616]	@ (8006d04 <_strtod_l+0x57c>)
 8006a9a:	a819      	add	r0, sp, #100	@ 0x64
 8006a9c:	f000 ff7a 	bl	8007994 <__match>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	f43f aec5 	beq.w	8006830 <_strtod_l+0xa8>
 8006aa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b28      	cmp	r3, #40	@ 0x28
 8006aac:	d12e      	bne.n	8006b0c <_strtod_l+0x384>
 8006aae:	4996      	ldr	r1, [pc, #600]	@ (8006d08 <_strtod_l+0x580>)
 8006ab0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ab2:	a819      	add	r0, sp, #100	@ 0x64
 8006ab4:	f000 ff82 	bl	80079bc <__hexnan>
 8006ab8:	2805      	cmp	r0, #5
 8006aba:	d127      	bne.n	8006b0c <_strtod_l+0x384>
 8006abc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006abe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006ac2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006ac6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006aca:	e696      	b.n	80067fa <_strtod_l+0x72>
 8006acc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ace:	fb08 2101 	mla	r1, r8, r1, r2
 8006ad2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad8:	e7b5      	b.n	8006a46 <_strtod_l+0x2be>
 8006ada:	2a6e      	cmp	r2, #110	@ 0x6e
 8006adc:	e7da      	b.n	8006a94 <_strtod_l+0x30c>
 8006ade:	498b      	ldr	r1, [pc, #556]	@ (8006d0c <_strtod_l+0x584>)
 8006ae0:	a819      	add	r0, sp, #100	@ 0x64
 8006ae2:	f000 ff57 	bl	8007994 <__match>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f43f aea2 	beq.w	8006830 <_strtod_l+0xa8>
 8006aec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aee:	4988      	ldr	r1, [pc, #544]	@ (8006d10 <_strtod_l+0x588>)
 8006af0:	3b01      	subs	r3, #1
 8006af2:	a819      	add	r0, sp, #100	@ 0x64
 8006af4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006af6:	f000 ff4d 	bl	8007994 <__match>
 8006afa:	b910      	cbnz	r0, 8006b02 <_strtod_l+0x37a>
 8006afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006afe:	3301      	adds	r3, #1
 8006b00:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006d20 <_strtod_l+0x598>
 8006b06:	f04f 0a00 	mov.w	sl, #0
 8006b0a:	e676      	b.n	80067fa <_strtod_l+0x72>
 8006b0c:	4881      	ldr	r0, [pc, #516]	@ (8006d14 <_strtod_l+0x58c>)
 8006b0e:	f000 fcaf 	bl	8007470 <nan>
 8006b12:	ec5b ab10 	vmov	sl, fp, d0
 8006b16:	e670      	b.n	80067fa <_strtod_l+0x72>
 8006b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006b1c:	eba8 0303 	sub.w	r3, r8, r3
 8006b20:	f1b9 0f00 	cmp.w	r9, #0
 8006b24:	bf08      	it	eq
 8006b26:	46a9      	moveq	r9, r5
 8006b28:	2d10      	cmp	r5, #16
 8006b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2c:	462c      	mov	r4, r5
 8006b2e:	bfa8      	it	ge
 8006b30:	2410      	movge	r4, #16
 8006b32:	f7f9 fcf7 	bl	8000524 <__aeabi_ui2d>
 8006b36:	2d09      	cmp	r5, #9
 8006b38:	4682      	mov	sl, r0
 8006b3a:	468b      	mov	fp, r1
 8006b3c:	dc13      	bgt.n	8006b66 <_strtod_l+0x3de>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f43f ae5a 	beq.w	80067fa <_strtod_l+0x72>
 8006b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b48:	dd78      	ble.n	8006c3c <_strtod_l+0x4b4>
 8006b4a:	2b16      	cmp	r3, #22
 8006b4c:	dc5f      	bgt.n	8006c0e <_strtod_l+0x486>
 8006b4e:	4972      	ldr	r1, [pc, #456]	@ (8006d18 <_strtod_l+0x590>)
 8006b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b58:	4652      	mov	r2, sl
 8006b5a:	465b      	mov	r3, fp
 8006b5c:	f7f9 fd5c 	bl	8000618 <__aeabi_dmul>
 8006b60:	4682      	mov	sl, r0
 8006b62:	468b      	mov	fp, r1
 8006b64:	e649      	b.n	80067fa <_strtod_l+0x72>
 8006b66:	4b6c      	ldr	r3, [pc, #432]	@ (8006d18 <_strtod_l+0x590>)
 8006b68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006b70:	f7f9 fd52 	bl	8000618 <__aeabi_dmul>
 8006b74:	4682      	mov	sl, r0
 8006b76:	4638      	mov	r0, r7
 8006b78:	468b      	mov	fp, r1
 8006b7a:	f7f9 fcd3 	bl	8000524 <__aeabi_ui2d>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4650      	mov	r0, sl
 8006b84:	4659      	mov	r1, fp
 8006b86:	f7f9 fb91 	bl	80002ac <__adddf3>
 8006b8a:	2d0f      	cmp	r5, #15
 8006b8c:	4682      	mov	sl, r0
 8006b8e:	468b      	mov	fp, r1
 8006b90:	ddd5      	ble.n	8006b3e <_strtod_l+0x3b6>
 8006b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b94:	1b2c      	subs	r4, r5, r4
 8006b96:	441c      	add	r4, r3
 8006b98:	2c00      	cmp	r4, #0
 8006b9a:	f340 8093 	ble.w	8006cc4 <_strtod_l+0x53c>
 8006b9e:	f014 030f 	ands.w	r3, r4, #15
 8006ba2:	d00a      	beq.n	8006bba <_strtod_l+0x432>
 8006ba4:	495c      	ldr	r1, [pc, #368]	@ (8006d18 <_strtod_l+0x590>)
 8006ba6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006baa:	4652      	mov	r2, sl
 8006bac:	465b      	mov	r3, fp
 8006bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb2:	f7f9 fd31 	bl	8000618 <__aeabi_dmul>
 8006bb6:	4682      	mov	sl, r0
 8006bb8:	468b      	mov	fp, r1
 8006bba:	f034 040f 	bics.w	r4, r4, #15
 8006bbe:	d073      	beq.n	8006ca8 <_strtod_l+0x520>
 8006bc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006bc4:	dd49      	ble.n	8006c5a <_strtod_l+0x4d2>
 8006bc6:	2400      	movs	r4, #0
 8006bc8:	46a0      	mov	r8, r4
 8006bca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bcc:	46a1      	mov	r9, r4
 8006bce:	9a05      	ldr	r2, [sp, #20]
 8006bd0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006d20 <_strtod_l+0x598>
 8006bd4:	2322      	movs	r3, #34	@ 0x22
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	f04f 0a00 	mov.w	sl, #0
 8006bdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f43f ae0b 	beq.w	80067fa <_strtod_l+0x72>
 8006be4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006be6:	9805      	ldr	r0, [sp, #20]
 8006be8:	f001 f930 	bl	8007e4c <_Bfree>
 8006bec:	9805      	ldr	r0, [sp, #20]
 8006bee:	4649      	mov	r1, r9
 8006bf0:	f001 f92c 	bl	8007e4c <_Bfree>
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	f001 f928 	bl	8007e4c <_Bfree>
 8006bfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bfe:	9805      	ldr	r0, [sp, #20]
 8006c00:	f001 f924 	bl	8007e4c <_Bfree>
 8006c04:	9805      	ldr	r0, [sp, #20]
 8006c06:	4621      	mov	r1, r4
 8006c08:	f001 f920 	bl	8007e4c <_Bfree>
 8006c0c:	e5f5      	b.n	80067fa <_strtod_l+0x72>
 8006c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c14:	4293      	cmp	r3, r2
 8006c16:	dbbc      	blt.n	8006b92 <_strtod_l+0x40a>
 8006c18:	4c3f      	ldr	r4, [pc, #252]	@ (8006d18 <_strtod_l+0x590>)
 8006c1a:	f1c5 050f 	rsb	r5, r5, #15
 8006c1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c22:	4652      	mov	r2, sl
 8006c24:	465b      	mov	r3, fp
 8006c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2a:	f7f9 fcf5 	bl	8000618 <__aeabi_dmul>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	1b5d      	subs	r5, r3, r5
 8006c32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c3a:	e78f      	b.n	8006b5c <_strtod_l+0x3d4>
 8006c3c:	3316      	adds	r3, #22
 8006c3e:	dba8      	blt.n	8006b92 <_strtod_l+0x40a>
 8006c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c42:	eba3 0808 	sub.w	r8, r3, r8
 8006c46:	4b34      	ldr	r3, [pc, #208]	@ (8006d18 <_strtod_l+0x590>)
 8006c48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c50:	4650      	mov	r0, sl
 8006c52:	4659      	mov	r1, fp
 8006c54:	f7f9 fe0a 	bl	800086c <__aeabi_ddiv>
 8006c58:	e782      	b.n	8006b60 <_strtod_l+0x3d8>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4f2f      	ldr	r7, [pc, #188]	@ (8006d1c <_strtod_l+0x594>)
 8006c5e:	1124      	asrs	r4, r4, #4
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	461e      	mov	r6, r3
 8006c66:	2c01      	cmp	r4, #1
 8006c68:	dc21      	bgt.n	8006cae <_strtod_l+0x526>
 8006c6a:	b10b      	cbz	r3, 8006c70 <_strtod_l+0x4e8>
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	468b      	mov	fp, r1
 8006c70:	492a      	ldr	r1, [pc, #168]	@ (8006d1c <_strtod_l+0x594>)
 8006c72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006c76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c82:	f7f9 fcc9 	bl	8000618 <__aeabi_dmul>
 8006c86:	4b26      	ldr	r3, [pc, #152]	@ (8006d20 <_strtod_l+0x598>)
 8006c88:	460a      	mov	r2, r1
 8006c8a:	400b      	ands	r3, r1
 8006c8c:	4925      	ldr	r1, [pc, #148]	@ (8006d24 <_strtod_l+0x59c>)
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	4682      	mov	sl, r0
 8006c92:	d898      	bhi.n	8006bc6 <_strtod_l+0x43e>
 8006c94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf86      	itte	hi
 8006c9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006d28 <_strtod_l+0x5a0>
 8006ca0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006ca4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9308      	str	r3, [sp, #32]
 8006cac:	e076      	b.n	8006d9c <_strtod_l+0x614>
 8006cae:	07e2      	lsls	r2, r4, #31
 8006cb0:	d504      	bpl.n	8006cbc <_strtod_l+0x534>
 8006cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb6:	f7f9 fcaf 	bl	8000618 <__aeabi_dmul>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	3601      	adds	r6, #1
 8006cbe:	1064      	asrs	r4, r4, #1
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	e7d0      	b.n	8006c66 <_strtod_l+0x4de>
 8006cc4:	d0f0      	beq.n	8006ca8 <_strtod_l+0x520>
 8006cc6:	4264      	negs	r4, r4
 8006cc8:	f014 020f 	ands.w	r2, r4, #15
 8006ccc:	d00a      	beq.n	8006ce4 <_strtod_l+0x55c>
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <_strtod_l+0x590>)
 8006cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f7f9 fdc6 	bl	800086c <__aeabi_ddiv>
 8006ce0:	4682      	mov	sl, r0
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	1124      	asrs	r4, r4, #4
 8006ce6:	d0df      	beq.n	8006ca8 <_strtod_l+0x520>
 8006ce8:	2c1f      	cmp	r4, #31
 8006cea:	dd1f      	ble.n	8006d2c <_strtod_l+0x5a4>
 8006cec:	2400      	movs	r4, #0
 8006cee:	46a0      	mov	r8, r4
 8006cf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cf2:	46a1      	mov	r9, r4
 8006cf4:	9a05      	ldr	r2, [sp, #20]
 8006cf6:	2322      	movs	r3, #34	@ 0x22
 8006cf8:	f04f 0a00 	mov.w	sl, #0
 8006cfc:	f04f 0b00 	mov.w	fp, #0
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	e76b      	b.n	8006bdc <_strtod_l+0x454>
 8006d04:	0800924f 	.word	0x0800924f
 8006d08:	080093ac 	.word	0x080093ac
 8006d0c:	08009246 	.word	0x08009246
 8006d10:	08009249 	.word	0x08009249
 8006d14:	08009376 	.word	0x08009376
 8006d18:	08009538 	.word	0x08009538
 8006d1c:	08009510 	.word	0x08009510
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	7ca00000 	.word	0x7ca00000
 8006d28:	7fefffff 	.word	0x7fefffff
 8006d2c:	f014 0310 	ands.w	r3, r4, #16
 8006d30:	bf18      	it	ne
 8006d32:	236a      	movne	r3, #106	@ 0x6a
 8006d34:	4ea9      	ldr	r6, [pc, #676]	@ (8006fdc <_strtod_l+0x854>)
 8006d36:	9308      	str	r3, [sp, #32]
 8006d38:	4650      	mov	r0, sl
 8006d3a:	4659      	mov	r1, fp
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	07e7      	lsls	r7, r4, #31
 8006d40:	d504      	bpl.n	8006d4c <_strtod_l+0x5c4>
 8006d42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d46:	f7f9 fc67 	bl	8000618 <__aeabi_dmul>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	1064      	asrs	r4, r4, #1
 8006d4e:	f106 0608 	add.w	r6, r6, #8
 8006d52:	d1f4      	bne.n	8006d3e <_strtod_l+0x5b6>
 8006d54:	b10b      	cbz	r3, 8006d5a <_strtod_l+0x5d2>
 8006d56:	4682      	mov	sl, r0
 8006d58:	468b      	mov	fp, r1
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	b1b3      	cbz	r3, 8006d8c <_strtod_l+0x604>
 8006d5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	4659      	mov	r1, fp
 8006d6a:	dd0f      	ble.n	8006d8c <_strtod_l+0x604>
 8006d6c:	2b1f      	cmp	r3, #31
 8006d6e:	dd56      	ble.n	8006e1e <_strtod_l+0x696>
 8006d70:	2b34      	cmp	r3, #52	@ 0x34
 8006d72:	bfde      	ittt	le
 8006d74:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006d78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006d7c:	4093      	lslle	r3, r2
 8006d7e:	f04f 0a00 	mov.w	sl, #0
 8006d82:	bfcc      	ite	gt
 8006d84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006d88:	ea03 0b01 	andle.w	fp, r3, r1
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4650      	mov	r0, sl
 8006d92:	4659      	mov	r1, fp
 8006d94:	f7f9 fea8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d1a7      	bne.n	8006cec <_strtod_l+0x564>
 8006d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006da2:	9805      	ldr	r0, [sp, #20]
 8006da4:	462b      	mov	r3, r5
 8006da6:	464a      	mov	r2, r9
 8006da8:	f001 f8b8 	bl	8007f1c <__s2b>
 8006dac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f43f af09 	beq.w	8006bc6 <_strtod_l+0x43e>
 8006db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	eba3 0308 	sub.w	r3, r3, r8
 8006dbe:	bfa8      	it	ge
 8006dc0:	2300      	movge	r3, #0
 8006dc2:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dc4:	2400      	movs	r4, #0
 8006dc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006dca:	9316      	str	r3, [sp, #88]	@ 0x58
 8006dcc:	46a0      	mov	r8, r4
 8006dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd0:	9805      	ldr	r0, [sp, #20]
 8006dd2:	6859      	ldr	r1, [r3, #4]
 8006dd4:	f000 fffa 	bl	8007dcc <_Balloc>
 8006dd8:	4681      	mov	r9, r0
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	f43f aef7 	beq.w	8006bce <_strtod_l+0x446>
 8006de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	3202      	adds	r2, #2
 8006de6:	f103 010c 	add.w	r1, r3, #12
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	300c      	adds	r0, #12
 8006dee:	f000 fb2e 	bl	800744e <memcpy>
 8006df2:	ec4b ab10 	vmov	d0, sl, fp
 8006df6:	9805      	ldr	r0, [sp, #20]
 8006df8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006dfa:	a91b      	add	r1, sp, #108	@ 0x6c
 8006dfc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e00:	f001 fbc0 	bl	8008584 <__d2b>
 8006e04:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f aee1 	beq.w	8006bce <_strtod_l+0x446>
 8006e0c:	9805      	ldr	r0, [sp, #20]
 8006e0e:	2101      	movs	r1, #1
 8006e10:	f001 f91a 	bl	8008048 <__i2b>
 8006e14:	4680      	mov	r8, r0
 8006e16:	b948      	cbnz	r0, 8006e2c <_strtod_l+0x6a4>
 8006e18:	f04f 0800 	mov.w	r8, #0
 8006e1c:	e6d7      	b.n	8006bce <_strtod_l+0x446>
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e22:	fa02 f303 	lsl.w	r3, r2, r3
 8006e26:	ea03 0a0a 	and.w	sl, r3, sl
 8006e2a:	e7af      	b.n	8006d8c <_strtod_l+0x604>
 8006e2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	bfab      	itete	ge
 8006e34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e3c:	bfac      	ite	ge
 8006e3e:	18ef      	addge	r7, r5, r3
 8006e40:	1b5e      	sublt	r6, r3, r5
 8006e42:	9b08      	ldr	r3, [sp, #32]
 8006e44:	1aed      	subs	r5, r5, r3
 8006e46:	4415      	add	r5, r2
 8006e48:	4b65      	ldr	r3, [pc, #404]	@ (8006fe0 <_strtod_l+0x858>)
 8006e4a:	3d01      	subs	r5, #1
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e52:	da50      	bge.n	8006ef6 <_strtod_l+0x76e>
 8006e54:	1b5b      	subs	r3, r3, r5
 8006e56:	2b1f      	cmp	r3, #31
 8006e58:	eba2 0203 	sub.w	r2, r2, r3
 8006e5c:	f04f 0101 	mov.w	r1, #1
 8006e60:	dc3d      	bgt.n	8006ede <_strtod_l+0x756>
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e6c:	18bd      	adds	r5, r7, r2
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	42af      	cmp	r7, r5
 8006e72:	4416      	add	r6, r2
 8006e74:	441e      	add	r6, r3
 8006e76:	463b      	mov	r3, r7
 8006e78:	bfa8      	it	ge
 8006e7a:	462b      	movge	r3, r5
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	bfa8      	it	ge
 8006e80:	4633      	movge	r3, r6
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfc2      	ittt	gt
 8006e86:	1aed      	subgt	r5, r5, r3
 8006e88:	1af6      	subgt	r6, r6, r3
 8006e8a:	1aff      	subgt	r7, r7, r3
 8006e8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd16      	ble.n	8006ec0 <_strtod_l+0x738>
 8006e92:	4641      	mov	r1, r8
 8006e94:	9805      	ldr	r0, [sp, #20]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f001 f98e 	bl	80081b8 <__pow5mult>
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d0ba      	beq.n	8006e18 <_strtod_l+0x690>
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ea6:	9805      	ldr	r0, [sp, #20]
 8006ea8:	f001 f8e4 	bl	8008074 <__multiply>
 8006eac:	900a      	str	r0, [sp, #40]	@ 0x28
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f ae8d 	beq.w	8006bce <_strtod_l+0x446>
 8006eb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eb6:	9805      	ldr	r0, [sp, #20]
 8006eb8:	f000 ffc8 	bl	8007e4c <_Bfree>
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ebe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	dc1d      	bgt.n	8006f00 <_strtod_l+0x778>
 8006ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dd23      	ble.n	8006f12 <_strtod_l+0x78a>
 8006eca:	4649      	mov	r1, r9
 8006ecc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006ece:	9805      	ldr	r0, [sp, #20]
 8006ed0:	f001 f972 	bl	80081b8 <__pow5mult>
 8006ed4:	4681      	mov	r9, r0
 8006ed6:	b9e0      	cbnz	r0, 8006f12 <_strtod_l+0x78a>
 8006ed8:	f04f 0900 	mov.w	r9, #0
 8006edc:	e677      	b.n	8006bce <_strtod_l+0x446>
 8006ede:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006ee2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006ee6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006eea:	35e2      	adds	r5, #226	@ 0xe2
 8006eec:	fa01 f305 	lsl.w	r3, r1, r5
 8006ef0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ef2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ef4:	e7ba      	b.n	8006e6c <_strtod_l+0x6e4>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006efa:	2301      	movs	r3, #1
 8006efc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006efe:	e7b5      	b.n	8006e6c <_strtod_l+0x6e4>
 8006f00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f02:	9805      	ldr	r0, [sp, #20]
 8006f04:	462a      	mov	r2, r5
 8006f06:	f001 f9b1 	bl	800826c <__lshift>
 8006f0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1d9      	bne.n	8006ec4 <_strtod_l+0x73c>
 8006f10:	e65d      	b.n	8006bce <_strtod_l+0x446>
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	dd07      	ble.n	8006f26 <_strtod_l+0x79e>
 8006f16:	4649      	mov	r1, r9
 8006f18:	9805      	ldr	r0, [sp, #20]
 8006f1a:	4632      	mov	r2, r6
 8006f1c:	f001 f9a6 	bl	800826c <__lshift>
 8006f20:	4681      	mov	r9, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d0d8      	beq.n	8006ed8 <_strtod_l+0x750>
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	dd08      	ble.n	8006f3c <_strtod_l+0x7b4>
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	9805      	ldr	r0, [sp, #20]
 8006f2e:	463a      	mov	r2, r7
 8006f30:	f001 f99c 	bl	800826c <__lshift>
 8006f34:	4680      	mov	r8, r0
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f ae49 	beq.w	8006bce <_strtod_l+0x446>
 8006f3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f3e:	9805      	ldr	r0, [sp, #20]
 8006f40:	464a      	mov	r2, r9
 8006f42:	f001 fa1b 	bl	800837c <__mdiff>
 8006f46:	4604      	mov	r4, r0
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f43f ae40 	beq.w	8006bce <_strtod_l+0x446>
 8006f4e:	68c3      	ldr	r3, [r0, #12]
 8006f50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f52:	2300      	movs	r3, #0
 8006f54:	60c3      	str	r3, [r0, #12]
 8006f56:	4641      	mov	r1, r8
 8006f58:	f001 f9f4 	bl	8008344 <__mcmp>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	da45      	bge.n	8006fec <_strtod_l+0x864>
 8006f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f62:	ea53 030a 	orrs.w	r3, r3, sl
 8006f66:	d16b      	bne.n	8007040 <_strtod_l+0x8b8>
 8006f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d167      	bne.n	8007040 <_strtod_l+0x8b8>
 8006f70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f74:	0d1b      	lsrs	r3, r3, #20
 8006f76:	051b      	lsls	r3, r3, #20
 8006f78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f7c:	d960      	bls.n	8007040 <_strtod_l+0x8b8>
 8006f7e:	6963      	ldr	r3, [r4, #20]
 8006f80:	b913      	cbnz	r3, 8006f88 <_strtod_l+0x800>
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	dd5b      	ble.n	8007040 <_strtod_l+0x8b8>
 8006f88:	4621      	mov	r1, r4
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	9805      	ldr	r0, [sp, #20]
 8006f8e:	f001 f96d 	bl	800826c <__lshift>
 8006f92:	4641      	mov	r1, r8
 8006f94:	4604      	mov	r4, r0
 8006f96:	f001 f9d5 	bl	8008344 <__mcmp>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	dd50      	ble.n	8007040 <_strtod_l+0x8b8>
 8006f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fa2:	9a08      	ldr	r2, [sp, #32]
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	051b      	lsls	r3, r3, #20
 8006fa8:	2a00      	cmp	r2, #0
 8006faa:	d06a      	beq.n	8007082 <_strtod_l+0x8fa>
 8006fac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fb0:	d867      	bhi.n	8007082 <_strtod_l+0x8fa>
 8006fb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006fb6:	f67f ae9d 	bls.w	8006cf4 <_strtod_l+0x56c>
 8006fba:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe4 <_strtod_l+0x85c>)
 8006fbc:	4650      	mov	r0, sl
 8006fbe:	4659      	mov	r1, fp
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f7f9 fb29 	bl	8000618 <__aeabi_dmul>
 8006fc6:	4b08      	ldr	r3, [pc, #32]	@ (8006fe8 <_strtod_l+0x860>)
 8006fc8:	400b      	ands	r3, r1
 8006fca:	4682      	mov	sl, r0
 8006fcc:	468b      	mov	fp, r1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f47f ae08 	bne.w	8006be4 <_strtod_l+0x45c>
 8006fd4:	9a05      	ldr	r2, [sp, #20]
 8006fd6:	2322      	movs	r3, #34	@ 0x22
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e603      	b.n	8006be4 <_strtod_l+0x45c>
 8006fdc:	080093d8 	.word	0x080093d8
 8006fe0:	fffffc02 	.word	0xfffffc02
 8006fe4:	39500000 	.word	0x39500000
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006ff0:	d165      	bne.n	80070be <_strtod_l+0x936>
 8006ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ff8:	b35a      	cbz	r2, 8007052 <_strtod_l+0x8ca>
 8006ffa:	4a9f      	ldr	r2, [pc, #636]	@ (8007278 <_strtod_l+0xaf0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d12b      	bne.n	8007058 <_strtod_l+0x8d0>
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	4651      	mov	r1, sl
 8007004:	b303      	cbz	r3, 8007048 <_strtod_l+0x8c0>
 8007006:	4b9d      	ldr	r3, [pc, #628]	@ (800727c <_strtod_l+0xaf4>)
 8007008:	465a      	mov	r2, fp
 800700a:	4013      	ands	r3, r2
 800700c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007010:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007014:	d81b      	bhi.n	800704e <_strtod_l+0x8c6>
 8007016:	0d1b      	lsrs	r3, r3, #20
 8007018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	4299      	cmp	r1, r3
 8007022:	d119      	bne.n	8007058 <_strtod_l+0x8d0>
 8007024:	4b96      	ldr	r3, [pc, #600]	@ (8007280 <_strtod_l+0xaf8>)
 8007026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007028:	429a      	cmp	r2, r3
 800702a:	d102      	bne.n	8007032 <_strtod_l+0x8aa>
 800702c:	3101      	adds	r1, #1
 800702e:	f43f adce 	beq.w	8006bce <_strtod_l+0x446>
 8007032:	4b92      	ldr	r3, [pc, #584]	@ (800727c <_strtod_l+0xaf4>)
 8007034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007036:	401a      	ands	r2, r3
 8007038:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800703c:	f04f 0a00 	mov.w	sl, #0
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1b9      	bne.n	8006fba <_strtod_l+0x832>
 8007046:	e5cd      	b.n	8006be4 <_strtod_l+0x45c>
 8007048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800704c:	e7e8      	b.n	8007020 <_strtod_l+0x898>
 800704e:	4613      	mov	r3, r2
 8007050:	e7e6      	b.n	8007020 <_strtod_l+0x898>
 8007052:	ea53 030a 	orrs.w	r3, r3, sl
 8007056:	d0a2      	beq.n	8006f9e <_strtod_l+0x816>
 8007058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800705a:	b1db      	cbz	r3, 8007094 <_strtod_l+0x90c>
 800705c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800705e:	4213      	tst	r3, r2
 8007060:	d0ee      	beq.n	8007040 <_strtod_l+0x8b8>
 8007062:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007064:	9a08      	ldr	r2, [sp, #32]
 8007066:	4650      	mov	r0, sl
 8007068:	4659      	mov	r1, fp
 800706a:	b1bb      	cbz	r3, 800709c <_strtod_l+0x914>
 800706c:	f7ff fb6e 	bl	800674c <sulp>
 8007070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007074:	ec53 2b10 	vmov	r2, r3, d0
 8007078:	f7f9 f918 	bl	80002ac <__adddf3>
 800707c:	4682      	mov	sl, r0
 800707e:	468b      	mov	fp, r1
 8007080:	e7de      	b.n	8007040 <_strtod_l+0x8b8>
 8007082:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007086:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800708a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800708e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007092:	e7d5      	b.n	8007040 <_strtod_l+0x8b8>
 8007094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007096:	ea13 0f0a 	tst.w	r3, sl
 800709a:	e7e1      	b.n	8007060 <_strtod_l+0x8d8>
 800709c:	f7ff fb56 	bl	800674c <sulp>
 80070a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070a4:	ec53 2b10 	vmov	r2, r3, d0
 80070a8:	f7f9 f8fe 	bl	80002a8 <__aeabi_dsub>
 80070ac:	2200      	movs	r2, #0
 80070ae:	2300      	movs	r3, #0
 80070b0:	4682      	mov	sl, r0
 80070b2:	468b      	mov	fp, r1
 80070b4:	f7f9 fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d0c1      	beq.n	8007040 <_strtod_l+0x8b8>
 80070bc:	e61a      	b.n	8006cf4 <_strtod_l+0x56c>
 80070be:	4641      	mov	r1, r8
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 fab7 	bl	8008634 <__ratio>
 80070c6:	ec57 6b10 	vmov	r6, r7, d0
 80070ca:	2200      	movs	r2, #0
 80070cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd1c 	bl	8000b10 <__aeabi_dcmple>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d06f      	beq.n	80071bc <_strtod_l+0xa34>
 80070dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d17a      	bne.n	80071d8 <_strtod_l+0xa50>
 80070e2:	f1ba 0f00 	cmp.w	sl, #0
 80070e6:	d158      	bne.n	800719a <_strtod_l+0xa12>
 80070e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d15a      	bne.n	80071a8 <_strtod_l+0xa20>
 80070f2:	4b64      	ldr	r3, [pc, #400]	@ (8007284 <_strtod_l+0xafc>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 fcff 	bl	8000afc <__aeabi_dcmplt>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d159      	bne.n	80071b6 <_strtod_l+0xa2e>
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	4b60      	ldr	r3, [pc, #384]	@ (8007288 <_strtod_l+0xb00>)
 8007108:	2200      	movs	r2, #0
 800710a:	f7f9 fa85 	bl	8000618 <__aeabi_dmul>
 800710e:	4606      	mov	r6, r0
 8007110:	460f      	mov	r7, r1
 8007112:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007116:	9606      	str	r6, [sp, #24]
 8007118:	9307      	str	r3, [sp, #28]
 800711a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800711e:	4d57      	ldr	r5, [pc, #348]	@ (800727c <_strtod_l+0xaf4>)
 8007120:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007126:	401d      	ands	r5, r3
 8007128:	4b58      	ldr	r3, [pc, #352]	@ (800728c <_strtod_l+0xb04>)
 800712a:	429d      	cmp	r5, r3
 800712c:	f040 80b2 	bne.w	8007294 <_strtod_l+0xb0c>
 8007130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007132:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007136:	ec4b ab10 	vmov	d0, sl, fp
 800713a:	f001 f9b3 	bl	80084a4 <__ulp>
 800713e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007142:	ec51 0b10 	vmov	r0, r1, d0
 8007146:	f7f9 fa67 	bl	8000618 <__aeabi_dmul>
 800714a:	4652      	mov	r2, sl
 800714c:	465b      	mov	r3, fp
 800714e:	f7f9 f8ad 	bl	80002ac <__adddf3>
 8007152:	460b      	mov	r3, r1
 8007154:	4949      	ldr	r1, [pc, #292]	@ (800727c <_strtod_l+0xaf4>)
 8007156:	4a4e      	ldr	r2, [pc, #312]	@ (8007290 <_strtod_l+0xb08>)
 8007158:	4019      	ands	r1, r3
 800715a:	4291      	cmp	r1, r2
 800715c:	4682      	mov	sl, r0
 800715e:	d942      	bls.n	80071e6 <_strtod_l+0xa5e>
 8007160:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007162:	4b47      	ldr	r3, [pc, #284]	@ (8007280 <_strtod_l+0xaf8>)
 8007164:	429a      	cmp	r2, r3
 8007166:	d103      	bne.n	8007170 <_strtod_l+0x9e8>
 8007168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800716a:	3301      	adds	r3, #1
 800716c:	f43f ad2f 	beq.w	8006bce <_strtod_l+0x446>
 8007170:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007280 <_strtod_l+0xaf8>
 8007174:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800717a:	9805      	ldr	r0, [sp, #20]
 800717c:	f000 fe66 	bl	8007e4c <_Bfree>
 8007180:	9805      	ldr	r0, [sp, #20]
 8007182:	4649      	mov	r1, r9
 8007184:	f000 fe62 	bl	8007e4c <_Bfree>
 8007188:	9805      	ldr	r0, [sp, #20]
 800718a:	4641      	mov	r1, r8
 800718c:	f000 fe5e 	bl	8007e4c <_Bfree>
 8007190:	9805      	ldr	r0, [sp, #20]
 8007192:	4621      	mov	r1, r4
 8007194:	f000 fe5a 	bl	8007e4c <_Bfree>
 8007198:	e619      	b.n	8006dce <_strtod_l+0x646>
 800719a:	f1ba 0f01 	cmp.w	sl, #1
 800719e:	d103      	bne.n	80071a8 <_strtod_l+0xa20>
 80071a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f43f ada6 	beq.w	8006cf4 <_strtod_l+0x56c>
 80071a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007258 <_strtod_l+0xad0>
 80071ac:	4f35      	ldr	r7, [pc, #212]	@ (8007284 <_strtod_l+0xafc>)
 80071ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071b2:	2600      	movs	r6, #0
 80071b4:	e7b1      	b.n	800711a <_strtod_l+0x992>
 80071b6:	4f34      	ldr	r7, [pc, #208]	@ (8007288 <_strtod_l+0xb00>)
 80071b8:	2600      	movs	r6, #0
 80071ba:	e7aa      	b.n	8007112 <_strtod_l+0x98a>
 80071bc:	4b32      	ldr	r3, [pc, #200]	@ (8007288 <_strtod_l+0xb00>)
 80071be:	4630      	mov	r0, r6
 80071c0:	4639      	mov	r1, r7
 80071c2:	2200      	movs	r2, #0
 80071c4:	f7f9 fa28 	bl	8000618 <__aeabi_dmul>
 80071c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ca:	4606      	mov	r6, r0
 80071cc:	460f      	mov	r7, r1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d09f      	beq.n	8007112 <_strtod_l+0x98a>
 80071d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80071d6:	e7a0      	b.n	800711a <_strtod_l+0x992>
 80071d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007260 <_strtod_l+0xad8>
 80071dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071e0:	ec57 6b17 	vmov	r6, r7, d7
 80071e4:	e799      	b.n	800711a <_strtod_l+0x992>
 80071e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80071ea:	9b08      	ldr	r3, [sp, #32]
 80071ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1c1      	bne.n	8007178 <_strtod_l+0x9f0>
 80071f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071f8:	0d1b      	lsrs	r3, r3, #20
 80071fa:	051b      	lsls	r3, r3, #20
 80071fc:	429d      	cmp	r5, r3
 80071fe:	d1bb      	bne.n	8007178 <_strtod_l+0x9f0>
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f9 fd2a 	bl	8000c5c <__aeabi_d2lz>
 8007208:	f7f9 f9d8 	bl	80005bc <__aeabi_l2d>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 f848 	bl	80002a8 <__aeabi_dsub>
 8007218:	460b      	mov	r3, r1
 800721a:	4602      	mov	r2, r0
 800721c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007220:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007226:	ea46 060a 	orr.w	r6, r6, sl
 800722a:	431e      	orrs	r6, r3
 800722c:	d06f      	beq.n	800730e <_strtod_l+0xb86>
 800722e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007268 <_strtod_l+0xae0>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 fc62 	bl	8000afc <__aeabi_dcmplt>
 8007238:	2800      	cmp	r0, #0
 800723a:	f47f acd3 	bne.w	8006be4 <_strtod_l+0x45c>
 800723e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007270 <_strtod_l+0xae8>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007248:	f7f9 fc76 	bl	8000b38 <__aeabi_dcmpgt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d093      	beq.n	8007178 <_strtod_l+0x9f0>
 8007250:	e4c8      	b.n	8006be4 <_strtod_l+0x45c>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	00000000 	.word	0x00000000
 800725c:	bff00000 	.word	0xbff00000
 8007260:	00000000 	.word	0x00000000
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	94a03595 	.word	0x94a03595
 800726c:	3fdfffff 	.word	0x3fdfffff
 8007270:	35afe535 	.word	0x35afe535
 8007274:	3fe00000 	.word	0x3fe00000
 8007278:	000fffff 	.word	0x000fffff
 800727c:	7ff00000 	.word	0x7ff00000
 8007280:	7fefffff 	.word	0x7fefffff
 8007284:	3ff00000 	.word	0x3ff00000
 8007288:	3fe00000 	.word	0x3fe00000
 800728c:	7fe00000 	.word	0x7fe00000
 8007290:	7c9fffff 	.word	0x7c9fffff
 8007294:	9b08      	ldr	r3, [sp, #32]
 8007296:	b323      	cbz	r3, 80072e2 <_strtod_l+0xb5a>
 8007298:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800729c:	d821      	bhi.n	80072e2 <_strtod_l+0xb5a>
 800729e:	a328      	add	r3, pc, #160	@ (adr r3, 8007340 <_strtod_l+0xbb8>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f7f9 fc32 	bl	8000b10 <__aeabi_dcmple>
 80072ac:	b1a0      	cbz	r0, 80072d8 <_strtod_l+0xb50>
 80072ae:	4639      	mov	r1, r7
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7f9 fc4b 	bl	8000b4c <__aeabi_d2uiz>
 80072b6:	2801      	cmp	r0, #1
 80072b8:	bf38      	it	cc
 80072ba:	2001      	movcc	r0, #1
 80072bc:	f7f9 f932 	bl	8000524 <__aeabi_ui2d>
 80072c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072c2:	4606      	mov	r6, r0
 80072c4:	460f      	mov	r7, r1
 80072c6:	b9fb      	cbnz	r3, 8007308 <_strtod_l+0xb80>
 80072c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80072ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80072d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80072d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80072de:	1b5b      	subs	r3, r3, r5
 80072e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80072e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80072ea:	f001 f8db 	bl	80084a4 <__ulp>
 80072ee:	4650      	mov	r0, sl
 80072f0:	ec53 2b10 	vmov	r2, r3, d0
 80072f4:	4659      	mov	r1, fp
 80072f6:	f7f9 f98f 	bl	8000618 <__aeabi_dmul>
 80072fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80072fe:	f7f8 ffd5 	bl	80002ac <__adddf3>
 8007302:	4682      	mov	sl, r0
 8007304:	468b      	mov	fp, r1
 8007306:	e770      	b.n	80071ea <_strtod_l+0xa62>
 8007308:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800730c:	e7e0      	b.n	80072d0 <_strtod_l+0xb48>
 800730e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007348 <_strtod_l+0xbc0>)
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f7f9 fbf2 	bl	8000afc <__aeabi_dcmplt>
 8007318:	e798      	b.n	800724c <_strtod_l+0xac4>
 800731a:	2300      	movs	r3, #0
 800731c:	930e      	str	r3, [sp, #56]	@ 0x38
 800731e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	f7ff ba6d 	b.w	8006802 <_strtod_l+0x7a>
 8007328:	2a65      	cmp	r2, #101	@ 0x65
 800732a:	f43f ab68 	beq.w	80069fe <_strtod_l+0x276>
 800732e:	2a45      	cmp	r2, #69	@ 0x45
 8007330:	f43f ab65 	beq.w	80069fe <_strtod_l+0x276>
 8007334:	2301      	movs	r3, #1
 8007336:	f7ff bba0 	b.w	8006a7a <_strtod_l+0x2f2>
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w
 8007340:	ffc00000 	.word	0xffc00000
 8007344:	41dfffff 	.word	0x41dfffff
 8007348:	94a03595 	.word	0x94a03595
 800734c:	3fcfffff 	.word	0x3fcfffff

08007350 <strtod>:
 8007350:	460a      	mov	r2, r1
 8007352:	4601      	mov	r1, r0
 8007354:	4802      	ldr	r0, [pc, #8]	@ (8007360 <strtod+0x10>)
 8007356:	4b03      	ldr	r3, [pc, #12]	@ (8007364 <strtod+0x14>)
 8007358:	6800      	ldr	r0, [r0, #0]
 800735a:	f7ff ba15 	b.w	8006788 <_strtod_l>
 800735e:	bf00      	nop
 8007360:	200001b4 	.word	0x200001b4
 8007364:	20000048 	.word	0x20000048

08007368 <_fwalk_sglue>:
 8007368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800736c:	4607      	mov	r7, r0
 800736e:	4688      	mov	r8, r1
 8007370:	4614      	mov	r4, r2
 8007372:	2600      	movs	r6, #0
 8007374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007378:	f1b9 0901 	subs.w	r9, r9, #1
 800737c:	d505      	bpl.n	800738a <_fwalk_sglue+0x22>
 800737e:	6824      	ldr	r4, [r4, #0]
 8007380:	2c00      	cmp	r4, #0
 8007382:	d1f7      	bne.n	8007374 <_fwalk_sglue+0xc>
 8007384:	4630      	mov	r0, r6
 8007386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d907      	bls.n	80073a0 <_fwalk_sglue+0x38>
 8007390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007394:	3301      	adds	r3, #1
 8007396:	d003      	beq.n	80073a0 <_fwalk_sglue+0x38>
 8007398:	4629      	mov	r1, r5
 800739a:	4638      	mov	r0, r7
 800739c:	47c0      	blx	r8
 800739e:	4306      	orrs	r6, r0
 80073a0:	3568      	adds	r5, #104	@ 0x68
 80073a2:	e7e9      	b.n	8007378 <_fwalk_sglue+0x10>

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <strchr>:
 80073b4:	b2c9      	uxtb	r1, r1
 80073b6:	4603      	mov	r3, r0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	b112      	cbz	r2, 80073c6 <strchr+0x12>
 80073c0:	428a      	cmp	r2, r1
 80073c2:	d1f9      	bne.n	80073b8 <strchr+0x4>
 80073c4:	4770      	bx	lr
 80073c6:	2900      	cmp	r1, #0
 80073c8:	bf18      	it	ne
 80073ca:	2000      	movne	r0, #0
 80073cc:	4770      	bx	lr

080073ce <strncmp>:
 80073ce:	b510      	push	{r4, lr}
 80073d0:	b16a      	cbz	r2, 80073ee <strncmp+0x20>
 80073d2:	3901      	subs	r1, #1
 80073d4:	1884      	adds	r4, r0, r2
 80073d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80073de:	429a      	cmp	r2, r3
 80073e0:	d103      	bne.n	80073ea <strncmp+0x1c>
 80073e2:	42a0      	cmp	r0, r4
 80073e4:	d001      	beq.n	80073ea <strncmp+0x1c>
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d1f5      	bne.n	80073d6 <strncmp+0x8>
 80073ea:	1ad0      	subs	r0, r2, r3
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	4610      	mov	r0, r2
 80073f0:	e7fc      	b.n	80073ec <strncmp+0x1e>
	...

080073f4 <__errno>:
 80073f4:	4b01      	ldr	r3, [pc, #4]	@ (80073fc <__errno+0x8>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	200001b4 	.word	0x200001b4

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4d0d      	ldr	r5, [pc, #52]	@ (8007438 <__libc_init_array+0x38>)
 8007404:	4c0d      	ldr	r4, [pc, #52]	@ (800743c <__libc_init_array+0x3c>)
 8007406:	1b64      	subs	r4, r4, r5
 8007408:	10a4      	asrs	r4, r4, #2
 800740a:	2600      	movs	r6, #0
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	4d0b      	ldr	r5, [pc, #44]	@ (8007440 <__libc_init_array+0x40>)
 8007412:	4c0c      	ldr	r4, [pc, #48]	@ (8007444 <__libc_init_array+0x44>)
 8007414:	f001 fef0 	bl	80091f8 <_init>
 8007418:	1b64      	subs	r4, r4, r5
 800741a:	10a4      	asrs	r4, r4, #2
 800741c:	2600      	movs	r6, #0
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f855 3b04 	ldr.w	r3, [r5], #4
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	08009608 	.word	0x08009608
 800743c:	08009608 	.word	0x08009608
 8007440:	08009608 	.word	0x08009608
 8007444:	0800960c 	.word	0x0800960c

08007448 <__retarget_lock_init_recursive>:
 8007448:	4770      	bx	lr

0800744a <__retarget_lock_acquire_recursive>:
 800744a:	4770      	bx	lr

0800744c <__retarget_lock_release_recursive>:
 800744c:	4770      	bx	lr

0800744e <memcpy>:
 800744e:	440a      	add	r2, r1
 8007450:	4291      	cmp	r1, r2
 8007452:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007456:	d100      	bne.n	800745a <memcpy+0xc>
 8007458:	4770      	bx	lr
 800745a:	b510      	push	{r4, lr}
 800745c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007464:	4291      	cmp	r1, r2
 8007466:	d1f9      	bne.n	800745c <memcpy+0xe>
 8007468:	bd10      	pop	{r4, pc}
 800746a:	0000      	movs	r0, r0
 800746c:	0000      	movs	r0, r0
	...

08007470 <nan>:
 8007470:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007478 <nan+0x8>
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	00000000 	.word	0x00000000
 800747c:	7ff80000 	.word	0x7ff80000

08007480 <rshift>:
 8007480:	6903      	ldr	r3, [r0, #16]
 8007482:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800748a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800748e:	f100 0414 	add.w	r4, r0, #20
 8007492:	dd45      	ble.n	8007520 <rshift+0xa0>
 8007494:	f011 011f 	ands.w	r1, r1, #31
 8007498:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800749c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074a0:	d10c      	bne.n	80074bc <rshift+0x3c>
 80074a2:	f100 0710 	add.w	r7, r0, #16
 80074a6:	4629      	mov	r1, r5
 80074a8:	42b1      	cmp	r1, r6
 80074aa:	d334      	bcc.n	8007516 <rshift+0x96>
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	1eea      	subs	r2, r5, #3
 80074b2:	4296      	cmp	r6, r2
 80074b4:	bf38      	it	cc
 80074b6:	2300      	movcc	r3, #0
 80074b8:	4423      	add	r3, r4
 80074ba:	e015      	b.n	80074e8 <rshift+0x68>
 80074bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074c0:	f1c1 0820 	rsb	r8, r1, #32
 80074c4:	40cf      	lsrs	r7, r1
 80074c6:	f105 0e04 	add.w	lr, r5, #4
 80074ca:	46a1      	mov	r9, r4
 80074cc:	4576      	cmp	r6, lr
 80074ce:	46f4      	mov	ip, lr
 80074d0:	d815      	bhi.n	80074fe <rshift+0x7e>
 80074d2:	1a9a      	subs	r2, r3, r2
 80074d4:	0092      	lsls	r2, r2, #2
 80074d6:	3a04      	subs	r2, #4
 80074d8:	3501      	adds	r5, #1
 80074da:	42ae      	cmp	r6, r5
 80074dc:	bf38      	it	cc
 80074de:	2200      	movcc	r2, #0
 80074e0:	18a3      	adds	r3, r4, r2
 80074e2:	50a7      	str	r7, [r4, r2]
 80074e4:	b107      	cbz	r7, 80074e8 <rshift+0x68>
 80074e6:	3304      	adds	r3, #4
 80074e8:	1b1a      	subs	r2, r3, r4
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074f0:	bf08      	it	eq
 80074f2:	2300      	moveq	r3, #0
 80074f4:	6102      	str	r2, [r0, #16]
 80074f6:	bf08      	it	eq
 80074f8:	6143      	streq	r3, [r0, #20]
 80074fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074fe:	f8dc c000 	ldr.w	ip, [ip]
 8007502:	fa0c fc08 	lsl.w	ip, ip, r8
 8007506:	ea4c 0707 	orr.w	r7, ip, r7
 800750a:	f849 7b04 	str.w	r7, [r9], #4
 800750e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007512:	40cf      	lsrs	r7, r1
 8007514:	e7da      	b.n	80074cc <rshift+0x4c>
 8007516:	f851 cb04 	ldr.w	ip, [r1], #4
 800751a:	f847 cf04 	str.w	ip, [r7, #4]!
 800751e:	e7c3      	b.n	80074a8 <rshift+0x28>
 8007520:	4623      	mov	r3, r4
 8007522:	e7e1      	b.n	80074e8 <rshift+0x68>

08007524 <__hexdig_fun>:
 8007524:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007528:	2b09      	cmp	r3, #9
 800752a:	d802      	bhi.n	8007532 <__hexdig_fun+0xe>
 800752c:	3820      	subs	r0, #32
 800752e:	b2c0      	uxtb	r0, r0
 8007530:	4770      	bx	lr
 8007532:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007536:	2b05      	cmp	r3, #5
 8007538:	d801      	bhi.n	800753e <__hexdig_fun+0x1a>
 800753a:	3847      	subs	r0, #71	@ 0x47
 800753c:	e7f7      	b.n	800752e <__hexdig_fun+0xa>
 800753e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007542:	2b05      	cmp	r3, #5
 8007544:	d801      	bhi.n	800754a <__hexdig_fun+0x26>
 8007546:	3827      	subs	r0, #39	@ 0x27
 8007548:	e7f1      	b.n	800752e <__hexdig_fun+0xa>
 800754a:	2000      	movs	r0, #0
 800754c:	4770      	bx	lr
	...

08007550 <__gethex>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	b085      	sub	sp, #20
 8007556:	468a      	mov	sl, r1
 8007558:	9302      	str	r3, [sp, #8]
 800755a:	680b      	ldr	r3, [r1, #0]
 800755c:	9001      	str	r0, [sp, #4]
 800755e:	4690      	mov	r8, r2
 8007560:	1c9c      	adds	r4, r3, #2
 8007562:	46a1      	mov	r9, r4
 8007564:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007568:	2830      	cmp	r0, #48	@ 0x30
 800756a:	d0fa      	beq.n	8007562 <__gethex+0x12>
 800756c:	eba9 0303 	sub.w	r3, r9, r3
 8007570:	f1a3 0b02 	sub.w	fp, r3, #2
 8007574:	f7ff ffd6 	bl	8007524 <__hexdig_fun>
 8007578:	4605      	mov	r5, r0
 800757a:	2800      	cmp	r0, #0
 800757c:	d168      	bne.n	8007650 <__gethex+0x100>
 800757e:	49a0      	ldr	r1, [pc, #640]	@ (8007800 <__gethex+0x2b0>)
 8007580:	2201      	movs	r2, #1
 8007582:	4648      	mov	r0, r9
 8007584:	f7ff ff23 	bl	80073ce <strncmp>
 8007588:	4607      	mov	r7, r0
 800758a:	2800      	cmp	r0, #0
 800758c:	d167      	bne.n	800765e <__gethex+0x10e>
 800758e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007592:	4626      	mov	r6, r4
 8007594:	f7ff ffc6 	bl	8007524 <__hexdig_fun>
 8007598:	2800      	cmp	r0, #0
 800759a:	d062      	beq.n	8007662 <__gethex+0x112>
 800759c:	4623      	mov	r3, r4
 800759e:	7818      	ldrb	r0, [r3, #0]
 80075a0:	2830      	cmp	r0, #48	@ 0x30
 80075a2:	4699      	mov	r9, r3
 80075a4:	f103 0301 	add.w	r3, r3, #1
 80075a8:	d0f9      	beq.n	800759e <__gethex+0x4e>
 80075aa:	f7ff ffbb 	bl	8007524 <__hexdig_fun>
 80075ae:	fab0 f580 	clz	r5, r0
 80075b2:	096d      	lsrs	r5, r5, #5
 80075b4:	f04f 0b01 	mov.w	fp, #1
 80075b8:	464a      	mov	r2, r9
 80075ba:	4616      	mov	r6, r2
 80075bc:	3201      	adds	r2, #1
 80075be:	7830      	ldrb	r0, [r6, #0]
 80075c0:	f7ff ffb0 	bl	8007524 <__hexdig_fun>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1f8      	bne.n	80075ba <__gethex+0x6a>
 80075c8:	498d      	ldr	r1, [pc, #564]	@ (8007800 <__gethex+0x2b0>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fefe 	bl	80073ce <strncmp>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d13f      	bne.n	8007656 <__gethex+0x106>
 80075d6:	b944      	cbnz	r4, 80075ea <__gethex+0x9a>
 80075d8:	1c74      	adds	r4, r6, #1
 80075da:	4622      	mov	r2, r4
 80075dc:	4616      	mov	r6, r2
 80075de:	3201      	adds	r2, #1
 80075e0:	7830      	ldrb	r0, [r6, #0]
 80075e2:	f7ff ff9f 	bl	8007524 <__hexdig_fun>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d1f8      	bne.n	80075dc <__gethex+0x8c>
 80075ea:	1ba4      	subs	r4, r4, r6
 80075ec:	00a7      	lsls	r7, r4, #2
 80075ee:	7833      	ldrb	r3, [r6, #0]
 80075f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80075f4:	2b50      	cmp	r3, #80	@ 0x50
 80075f6:	d13e      	bne.n	8007676 <__gethex+0x126>
 80075f8:	7873      	ldrb	r3, [r6, #1]
 80075fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80075fc:	d033      	beq.n	8007666 <__gethex+0x116>
 80075fe:	2b2d      	cmp	r3, #45	@ 0x2d
 8007600:	d034      	beq.n	800766c <__gethex+0x11c>
 8007602:	1c71      	adds	r1, r6, #1
 8007604:	2400      	movs	r4, #0
 8007606:	7808      	ldrb	r0, [r1, #0]
 8007608:	f7ff ff8c 	bl	8007524 <__hexdig_fun>
 800760c:	1e43      	subs	r3, r0, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b18      	cmp	r3, #24
 8007612:	d830      	bhi.n	8007676 <__gethex+0x126>
 8007614:	f1a0 0210 	sub.w	r2, r0, #16
 8007618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800761c:	f7ff ff82 	bl	8007524 <__hexdig_fun>
 8007620:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007624:	fa5f fc8c 	uxtb.w	ip, ip
 8007628:	f1bc 0f18 	cmp.w	ip, #24
 800762c:	f04f 030a 	mov.w	r3, #10
 8007630:	d91e      	bls.n	8007670 <__gethex+0x120>
 8007632:	b104      	cbz	r4, 8007636 <__gethex+0xe6>
 8007634:	4252      	negs	r2, r2
 8007636:	4417      	add	r7, r2
 8007638:	f8ca 1000 	str.w	r1, [sl]
 800763c:	b1ed      	cbz	r5, 800767a <__gethex+0x12a>
 800763e:	f1bb 0f00 	cmp.w	fp, #0
 8007642:	bf0c      	ite	eq
 8007644:	2506      	moveq	r5, #6
 8007646:	2500      	movne	r5, #0
 8007648:	4628      	mov	r0, r5
 800764a:	b005      	add	sp, #20
 800764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007650:	2500      	movs	r5, #0
 8007652:	462c      	mov	r4, r5
 8007654:	e7b0      	b.n	80075b8 <__gethex+0x68>
 8007656:	2c00      	cmp	r4, #0
 8007658:	d1c7      	bne.n	80075ea <__gethex+0x9a>
 800765a:	4627      	mov	r7, r4
 800765c:	e7c7      	b.n	80075ee <__gethex+0x9e>
 800765e:	464e      	mov	r6, r9
 8007660:	462f      	mov	r7, r5
 8007662:	2501      	movs	r5, #1
 8007664:	e7c3      	b.n	80075ee <__gethex+0x9e>
 8007666:	2400      	movs	r4, #0
 8007668:	1cb1      	adds	r1, r6, #2
 800766a:	e7cc      	b.n	8007606 <__gethex+0xb6>
 800766c:	2401      	movs	r4, #1
 800766e:	e7fb      	b.n	8007668 <__gethex+0x118>
 8007670:	fb03 0002 	mla	r0, r3, r2, r0
 8007674:	e7ce      	b.n	8007614 <__gethex+0xc4>
 8007676:	4631      	mov	r1, r6
 8007678:	e7de      	b.n	8007638 <__gethex+0xe8>
 800767a:	eba6 0309 	sub.w	r3, r6, r9
 800767e:	3b01      	subs	r3, #1
 8007680:	4629      	mov	r1, r5
 8007682:	2b07      	cmp	r3, #7
 8007684:	dc0a      	bgt.n	800769c <__gethex+0x14c>
 8007686:	9801      	ldr	r0, [sp, #4]
 8007688:	f000 fba0 	bl	8007dcc <_Balloc>
 800768c:	4604      	mov	r4, r0
 800768e:	b940      	cbnz	r0, 80076a2 <__gethex+0x152>
 8007690:	4b5c      	ldr	r3, [pc, #368]	@ (8007804 <__gethex+0x2b4>)
 8007692:	4602      	mov	r2, r0
 8007694:	21e4      	movs	r1, #228	@ 0xe4
 8007696:	485c      	ldr	r0, [pc, #368]	@ (8007808 <__gethex+0x2b8>)
 8007698:	f001 f8e8 	bl	800886c <__assert_func>
 800769c:	3101      	adds	r1, #1
 800769e:	105b      	asrs	r3, r3, #1
 80076a0:	e7ef      	b.n	8007682 <__gethex+0x132>
 80076a2:	f100 0a14 	add.w	sl, r0, #20
 80076a6:	2300      	movs	r3, #0
 80076a8:	4655      	mov	r5, sl
 80076aa:	469b      	mov	fp, r3
 80076ac:	45b1      	cmp	r9, r6
 80076ae:	d337      	bcc.n	8007720 <__gethex+0x1d0>
 80076b0:	f845 bb04 	str.w	fp, [r5], #4
 80076b4:	eba5 050a 	sub.w	r5, r5, sl
 80076b8:	10ad      	asrs	r5, r5, #2
 80076ba:	6125      	str	r5, [r4, #16]
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fc77 	bl	8007fb0 <__hi0bits>
 80076c2:	016d      	lsls	r5, r5, #5
 80076c4:	f8d8 6000 	ldr.w	r6, [r8]
 80076c8:	1a2d      	subs	r5, r5, r0
 80076ca:	42b5      	cmp	r5, r6
 80076cc:	dd54      	ble.n	8007778 <__gethex+0x228>
 80076ce:	1bad      	subs	r5, r5, r6
 80076d0:	4629      	mov	r1, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f001 f803 	bl	80086de <__any_on>
 80076d8:	4681      	mov	r9, r0
 80076da:	b178      	cbz	r0, 80076fc <__gethex+0x1ac>
 80076dc:	1e6b      	subs	r3, r5, #1
 80076de:	1159      	asrs	r1, r3, #5
 80076e0:	f003 021f 	and.w	r2, r3, #31
 80076e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80076e8:	f04f 0901 	mov.w	r9, #1
 80076ec:	fa09 f202 	lsl.w	r2, r9, r2
 80076f0:	420a      	tst	r2, r1
 80076f2:	d003      	beq.n	80076fc <__gethex+0x1ac>
 80076f4:	454b      	cmp	r3, r9
 80076f6:	dc36      	bgt.n	8007766 <__gethex+0x216>
 80076f8:	f04f 0902 	mov.w	r9, #2
 80076fc:	4629      	mov	r1, r5
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff febe 	bl	8007480 <rshift>
 8007704:	442f      	add	r7, r5
 8007706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800770a:	42bb      	cmp	r3, r7
 800770c:	da42      	bge.n	8007794 <__gethex+0x244>
 800770e:	9801      	ldr	r0, [sp, #4]
 8007710:	4621      	mov	r1, r4
 8007712:	f000 fb9b 	bl	8007e4c <_Bfree>
 8007716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007718:	2300      	movs	r3, #0
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	25a3      	movs	r5, #163	@ 0xa3
 800771e:	e793      	b.n	8007648 <__gethex+0xf8>
 8007720:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007724:	2a2e      	cmp	r2, #46	@ 0x2e
 8007726:	d012      	beq.n	800774e <__gethex+0x1fe>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d104      	bne.n	8007736 <__gethex+0x1e6>
 800772c:	f845 bb04 	str.w	fp, [r5], #4
 8007730:	f04f 0b00 	mov.w	fp, #0
 8007734:	465b      	mov	r3, fp
 8007736:	7830      	ldrb	r0, [r6, #0]
 8007738:	9303      	str	r3, [sp, #12]
 800773a:	f7ff fef3 	bl	8007524 <__hexdig_fun>
 800773e:	9b03      	ldr	r3, [sp, #12]
 8007740:	f000 000f 	and.w	r0, r0, #15
 8007744:	4098      	lsls	r0, r3
 8007746:	ea4b 0b00 	orr.w	fp, fp, r0
 800774a:	3304      	adds	r3, #4
 800774c:	e7ae      	b.n	80076ac <__gethex+0x15c>
 800774e:	45b1      	cmp	r9, r6
 8007750:	d8ea      	bhi.n	8007728 <__gethex+0x1d8>
 8007752:	492b      	ldr	r1, [pc, #172]	@ (8007800 <__gethex+0x2b0>)
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff fe38 	bl	80073ce <strncmp>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	2800      	cmp	r0, #0
 8007762:	d1e1      	bne.n	8007728 <__gethex+0x1d8>
 8007764:	e7a2      	b.n	80076ac <__gethex+0x15c>
 8007766:	1ea9      	subs	r1, r5, #2
 8007768:	4620      	mov	r0, r4
 800776a:	f000 ffb8 	bl	80086de <__any_on>
 800776e:	2800      	cmp	r0, #0
 8007770:	d0c2      	beq.n	80076f8 <__gethex+0x1a8>
 8007772:	f04f 0903 	mov.w	r9, #3
 8007776:	e7c1      	b.n	80076fc <__gethex+0x1ac>
 8007778:	da09      	bge.n	800778e <__gethex+0x23e>
 800777a:	1b75      	subs	r5, r6, r5
 800777c:	4621      	mov	r1, r4
 800777e:	9801      	ldr	r0, [sp, #4]
 8007780:	462a      	mov	r2, r5
 8007782:	f000 fd73 	bl	800826c <__lshift>
 8007786:	1b7f      	subs	r7, r7, r5
 8007788:	4604      	mov	r4, r0
 800778a:	f100 0a14 	add.w	sl, r0, #20
 800778e:	f04f 0900 	mov.w	r9, #0
 8007792:	e7b8      	b.n	8007706 <__gethex+0x1b6>
 8007794:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007798:	42bd      	cmp	r5, r7
 800779a:	dd6f      	ble.n	800787c <__gethex+0x32c>
 800779c:	1bed      	subs	r5, r5, r7
 800779e:	42ae      	cmp	r6, r5
 80077a0:	dc34      	bgt.n	800780c <__gethex+0x2bc>
 80077a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d022      	beq.n	80077f0 <__gethex+0x2a0>
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d024      	beq.n	80077f8 <__gethex+0x2a8>
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d115      	bne.n	80077de <__gethex+0x28e>
 80077b2:	42ae      	cmp	r6, r5
 80077b4:	d113      	bne.n	80077de <__gethex+0x28e>
 80077b6:	2e01      	cmp	r6, #1
 80077b8:	d10b      	bne.n	80077d2 <__gethex+0x282>
 80077ba:	9a02      	ldr	r2, [sp, #8]
 80077bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	2301      	movs	r3, #1
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	f8ca 3000 	str.w	r3, [sl]
 80077ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077cc:	2562      	movs	r5, #98	@ 0x62
 80077ce:	601c      	str	r4, [r3, #0]
 80077d0:	e73a      	b.n	8007648 <__gethex+0xf8>
 80077d2:	1e71      	subs	r1, r6, #1
 80077d4:	4620      	mov	r0, r4
 80077d6:	f000 ff82 	bl	80086de <__any_on>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d1ed      	bne.n	80077ba <__gethex+0x26a>
 80077de:	9801      	ldr	r0, [sp, #4]
 80077e0:	4621      	mov	r1, r4
 80077e2:	f000 fb33 	bl	8007e4c <_Bfree>
 80077e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077e8:	2300      	movs	r3, #0
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	2550      	movs	r5, #80	@ 0x50
 80077ee:	e72b      	b.n	8007648 <__gethex+0xf8>
 80077f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f3      	bne.n	80077de <__gethex+0x28e>
 80077f6:	e7e0      	b.n	80077ba <__gethex+0x26a>
 80077f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1dd      	bne.n	80077ba <__gethex+0x26a>
 80077fe:	e7ee      	b.n	80077de <__gethex+0x28e>
 8007800:	08009244 	.word	0x08009244
 8007804:	0800925a 	.word	0x0800925a
 8007808:	0800926b 	.word	0x0800926b
 800780c:	1e6f      	subs	r7, r5, #1
 800780e:	f1b9 0f00 	cmp.w	r9, #0
 8007812:	d130      	bne.n	8007876 <__gethex+0x326>
 8007814:	b127      	cbz	r7, 8007820 <__gethex+0x2d0>
 8007816:	4639      	mov	r1, r7
 8007818:	4620      	mov	r0, r4
 800781a:	f000 ff60 	bl	80086de <__any_on>
 800781e:	4681      	mov	r9, r0
 8007820:	117a      	asrs	r2, r7, #5
 8007822:	2301      	movs	r3, #1
 8007824:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007828:	f007 071f 	and.w	r7, r7, #31
 800782c:	40bb      	lsls	r3, r7
 800782e:	4213      	tst	r3, r2
 8007830:	4629      	mov	r1, r5
 8007832:	4620      	mov	r0, r4
 8007834:	bf18      	it	ne
 8007836:	f049 0902 	orrne.w	r9, r9, #2
 800783a:	f7ff fe21 	bl	8007480 <rshift>
 800783e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007842:	1b76      	subs	r6, r6, r5
 8007844:	2502      	movs	r5, #2
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	d047      	beq.n	80078dc <__gethex+0x38c>
 800784c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d015      	beq.n	8007880 <__gethex+0x330>
 8007854:	2b03      	cmp	r3, #3
 8007856:	d017      	beq.n	8007888 <__gethex+0x338>
 8007858:	2b01      	cmp	r3, #1
 800785a:	d109      	bne.n	8007870 <__gethex+0x320>
 800785c:	f019 0f02 	tst.w	r9, #2
 8007860:	d006      	beq.n	8007870 <__gethex+0x320>
 8007862:	f8da 3000 	ldr.w	r3, [sl]
 8007866:	ea49 0903 	orr.w	r9, r9, r3
 800786a:	f019 0f01 	tst.w	r9, #1
 800786e:	d10e      	bne.n	800788e <__gethex+0x33e>
 8007870:	f045 0510 	orr.w	r5, r5, #16
 8007874:	e032      	b.n	80078dc <__gethex+0x38c>
 8007876:	f04f 0901 	mov.w	r9, #1
 800787a:	e7d1      	b.n	8007820 <__gethex+0x2d0>
 800787c:	2501      	movs	r5, #1
 800787e:	e7e2      	b.n	8007846 <__gethex+0x2f6>
 8007880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007882:	f1c3 0301 	rsb	r3, r3, #1
 8007886:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <__gethex+0x320>
 800788e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007892:	f104 0314 	add.w	r3, r4, #20
 8007896:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800789a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800789e:	f04f 0c00 	mov.w	ip, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80078ac:	d01b      	beq.n	80078e6 <__gethex+0x396>
 80078ae:	3201      	adds	r2, #1
 80078b0:	6002      	str	r2, [r0, #0]
 80078b2:	2d02      	cmp	r5, #2
 80078b4:	f104 0314 	add.w	r3, r4, #20
 80078b8:	d13c      	bne.n	8007934 <__gethex+0x3e4>
 80078ba:	f8d8 2000 	ldr.w	r2, [r8]
 80078be:	3a01      	subs	r2, #1
 80078c0:	42b2      	cmp	r2, r6
 80078c2:	d109      	bne.n	80078d8 <__gethex+0x388>
 80078c4:	1171      	asrs	r1, r6, #5
 80078c6:	2201      	movs	r2, #1
 80078c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078cc:	f006 061f 	and.w	r6, r6, #31
 80078d0:	fa02 f606 	lsl.w	r6, r2, r6
 80078d4:	421e      	tst	r6, r3
 80078d6:	d13a      	bne.n	800794e <__gethex+0x3fe>
 80078d8:	f045 0520 	orr.w	r5, r5, #32
 80078dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078de:	601c      	str	r4, [r3, #0]
 80078e0:	9b02      	ldr	r3, [sp, #8]
 80078e2:	601f      	str	r7, [r3, #0]
 80078e4:	e6b0      	b.n	8007648 <__gethex+0xf8>
 80078e6:	4299      	cmp	r1, r3
 80078e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80078ec:	d8d9      	bhi.n	80078a2 <__gethex+0x352>
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	459b      	cmp	fp, r3
 80078f2:	db17      	blt.n	8007924 <__gethex+0x3d4>
 80078f4:	6861      	ldr	r1, [r4, #4]
 80078f6:	9801      	ldr	r0, [sp, #4]
 80078f8:	3101      	adds	r1, #1
 80078fa:	f000 fa67 	bl	8007dcc <_Balloc>
 80078fe:	4681      	mov	r9, r0
 8007900:	b918      	cbnz	r0, 800790a <__gethex+0x3ba>
 8007902:	4b1a      	ldr	r3, [pc, #104]	@ (800796c <__gethex+0x41c>)
 8007904:	4602      	mov	r2, r0
 8007906:	2184      	movs	r1, #132	@ 0x84
 8007908:	e6c5      	b.n	8007696 <__gethex+0x146>
 800790a:	6922      	ldr	r2, [r4, #16]
 800790c:	3202      	adds	r2, #2
 800790e:	f104 010c 	add.w	r1, r4, #12
 8007912:	0092      	lsls	r2, r2, #2
 8007914:	300c      	adds	r0, #12
 8007916:	f7ff fd9a 	bl	800744e <memcpy>
 800791a:	4621      	mov	r1, r4
 800791c:	9801      	ldr	r0, [sp, #4]
 800791e:	f000 fa95 	bl	8007e4c <_Bfree>
 8007922:	464c      	mov	r4, r9
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800792c:	6122      	str	r2, [r4, #16]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]
 8007932:	e7be      	b.n	80078b2 <__gethex+0x362>
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	455a      	cmp	r2, fp
 8007938:	dd0b      	ble.n	8007952 <__gethex+0x402>
 800793a:	2101      	movs	r1, #1
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff fd9f 	bl	8007480 <rshift>
 8007942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007946:	3701      	adds	r7, #1
 8007948:	42bb      	cmp	r3, r7
 800794a:	f6ff aee0 	blt.w	800770e <__gethex+0x1be>
 800794e:	2501      	movs	r5, #1
 8007950:	e7c2      	b.n	80078d8 <__gethex+0x388>
 8007952:	f016 061f 	ands.w	r6, r6, #31
 8007956:	d0fa      	beq.n	800794e <__gethex+0x3fe>
 8007958:	4453      	add	r3, sl
 800795a:	f1c6 0620 	rsb	r6, r6, #32
 800795e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007962:	f000 fb25 	bl	8007fb0 <__hi0bits>
 8007966:	42b0      	cmp	r0, r6
 8007968:	dbe7      	blt.n	800793a <__gethex+0x3ea>
 800796a:	e7f0      	b.n	800794e <__gethex+0x3fe>
 800796c:	0800925a 	.word	0x0800925a

08007970 <L_shift>:
 8007970:	f1c2 0208 	rsb	r2, r2, #8
 8007974:	0092      	lsls	r2, r2, #2
 8007976:	b570      	push	{r4, r5, r6, lr}
 8007978:	f1c2 0620 	rsb	r6, r2, #32
 800797c:	6843      	ldr	r3, [r0, #4]
 800797e:	6804      	ldr	r4, [r0, #0]
 8007980:	fa03 f506 	lsl.w	r5, r3, r6
 8007984:	432c      	orrs	r4, r5
 8007986:	40d3      	lsrs	r3, r2
 8007988:	6004      	str	r4, [r0, #0]
 800798a:	f840 3f04 	str.w	r3, [r0, #4]!
 800798e:	4288      	cmp	r0, r1
 8007990:	d3f4      	bcc.n	800797c <L_shift+0xc>
 8007992:	bd70      	pop	{r4, r5, r6, pc}

08007994 <__match>:
 8007994:	b530      	push	{r4, r5, lr}
 8007996:	6803      	ldr	r3, [r0, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799e:	b914      	cbnz	r4, 80079a6 <__match+0x12>
 80079a0:	6003      	str	r3, [r0, #0]
 80079a2:	2001      	movs	r0, #1
 80079a4:	bd30      	pop	{r4, r5, pc}
 80079a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80079ae:	2d19      	cmp	r5, #25
 80079b0:	bf98      	it	ls
 80079b2:	3220      	addls	r2, #32
 80079b4:	42a2      	cmp	r2, r4
 80079b6:	d0f0      	beq.n	800799a <__match+0x6>
 80079b8:	2000      	movs	r0, #0
 80079ba:	e7f3      	b.n	80079a4 <__match+0x10>

080079bc <__hexnan>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	680b      	ldr	r3, [r1, #0]
 80079c2:	6801      	ldr	r1, [r0, #0]
 80079c4:	115e      	asrs	r6, r3, #5
 80079c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079ca:	f013 031f 	ands.w	r3, r3, #31
 80079ce:	b087      	sub	sp, #28
 80079d0:	bf18      	it	ne
 80079d2:	3604      	addne	r6, #4
 80079d4:	2500      	movs	r5, #0
 80079d6:	1f37      	subs	r7, r6, #4
 80079d8:	4682      	mov	sl, r0
 80079da:	4690      	mov	r8, r2
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	f846 5c04 	str.w	r5, [r6, #-4]
 80079e2:	46b9      	mov	r9, r7
 80079e4:	463c      	mov	r4, r7
 80079e6:	9502      	str	r5, [sp, #8]
 80079e8:	46ab      	mov	fp, r5
 80079ea:	784a      	ldrb	r2, [r1, #1]
 80079ec:	1c4b      	adds	r3, r1, #1
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	b342      	cbz	r2, 8007a44 <__hexnan+0x88>
 80079f2:	4610      	mov	r0, r2
 80079f4:	9105      	str	r1, [sp, #20]
 80079f6:	9204      	str	r2, [sp, #16]
 80079f8:	f7ff fd94 	bl	8007524 <__hexdig_fun>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d151      	bne.n	8007aa4 <__hexnan+0xe8>
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	9905      	ldr	r1, [sp, #20]
 8007a04:	2a20      	cmp	r2, #32
 8007a06:	d818      	bhi.n	8007a3a <__hexnan+0x7e>
 8007a08:	9b02      	ldr	r3, [sp, #8]
 8007a0a:	459b      	cmp	fp, r3
 8007a0c:	dd13      	ble.n	8007a36 <__hexnan+0x7a>
 8007a0e:	454c      	cmp	r4, r9
 8007a10:	d206      	bcs.n	8007a20 <__hexnan+0x64>
 8007a12:	2d07      	cmp	r5, #7
 8007a14:	dc04      	bgt.n	8007a20 <__hexnan+0x64>
 8007a16:	462a      	mov	r2, r5
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff ffa8 	bl	8007970 <L_shift>
 8007a20:	4544      	cmp	r4, r8
 8007a22:	d952      	bls.n	8007aca <__hexnan+0x10e>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f1a4 0904 	sub.w	r9, r4, #4
 8007a2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a2e:	f8cd b008 	str.w	fp, [sp, #8]
 8007a32:	464c      	mov	r4, r9
 8007a34:	461d      	mov	r5, r3
 8007a36:	9903      	ldr	r1, [sp, #12]
 8007a38:	e7d7      	b.n	80079ea <__hexnan+0x2e>
 8007a3a:	2a29      	cmp	r2, #41	@ 0x29
 8007a3c:	d157      	bne.n	8007aee <__hexnan+0x132>
 8007a3e:	3102      	adds	r1, #2
 8007a40:	f8ca 1000 	str.w	r1, [sl]
 8007a44:	f1bb 0f00 	cmp.w	fp, #0
 8007a48:	d051      	beq.n	8007aee <__hexnan+0x132>
 8007a4a:	454c      	cmp	r4, r9
 8007a4c:	d206      	bcs.n	8007a5c <__hexnan+0xa0>
 8007a4e:	2d07      	cmp	r5, #7
 8007a50:	dc04      	bgt.n	8007a5c <__hexnan+0xa0>
 8007a52:	462a      	mov	r2, r5
 8007a54:	4649      	mov	r1, r9
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff ff8a 	bl	8007970 <L_shift>
 8007a5c:	4544      	cmp	r4, r8
 8007a5e:	d936      	bls.n	8007ace <__hexnan+0x112>
 8007a60:	f1a8 0204 	sub.w	r2, r8, #4
 8007a64:	4623      	mov	r3, r4
 8007a66:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a6e:	429f      	cmp	r7, r3
 8007a70:	d2f9      	bcs.n	8007a66 <__hexnan+0xaa>
 8007a72:	1b3b      	subs	r3, r7, r4
 8007a74:	f023 0303 	bic.w	r3, r3, #3
 8007a78:	3304      	adds	r3, #4
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	3e03      	subs	r6, #3
 8007a7e:	42b4      	cmp	r4, r6
 8007a80:	bf88      	it	hi
 8007a82:	2304      	movhi	r3, #4
 8007a84:	4443      	add	r3, r8
 8007a86:	2200      	movs	r2, #0
 8007a88:	f843 2b04 	str.w	r2, [r3], #4
 8007a8c:	429f      	cmp	r7, r3
 8007a8e:	d2fb      	bcs.n	8007a88 <__hexnan+0xcc>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	b91b      	cbnz	r3, 8007a9c <__hexnan+0xe0>
 8007a94:	4547      	cmp	r7, r8
 8007a96:	d128      	bne.n	8007aea <__hexnan+0x12e>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	2005      	movs	r0, #5
 8007a9e:	b007      	add	sp, #28
 8007aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	2d08      	cmp	r5, #8
 8007aa8:	f10b 0b01 	add.w	fp, fp, #1
 8007aac:	dd06      	ble.n	8007abc <__hexnan+0x100>
 8007aae:	4544      	cmp	r4, r8
 8007ab0:	d9c1      	bls.n	8007a36 <__hexnan+0x7a>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ab8:	2501      	movs	r5, #1
 8007aba:	3c04      	subs	r4, #4
 8007abc:	6822      	ldr	r2, [r4, #0]
 8007abe:	f000 000f 	and.w	r0, r0, #15
 8007ac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ac6:	6020      	str	r0, [r4, #0]
 8007ac8:	e7b5      	b.n	8007a36 <__hexnan+0x7a>
 8007aca:	2508      	movs	r5, #8
 8007acc:	e7b3      	b.n	8007a36 <__hexnan+0x7a>
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0dd      	beq.n	8007a90 <__hexnan+0xd4>
 8007ad4:	f1c3 0320 	rsb	r3, r3, #32
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007adc:	40da      	lsrs	r2, r3
 8007ade:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ae8:	e7d2      	b.n	8007a90 <__hexnan+0xd4>
 8007aea:	3f04      	subs	r7, #4
 8007aec:	e7d0      	b.n	8007a90 <__hexnan+0xd4>
 8007aee:	2004      	movs	r0, #4
 8007af0:	e7d5      	b.n	8007a9e <__hexnan+0xe2>
	...

08007af4 <sbrk_aligned>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4e0f      	ldr	r6, [pc, #60]	@ (8007b34 <sbrk_aligned+0x40>)
 8007af8:	460c      	mov	r4, r1
 8007afa:	6831      	ldr	r1, [r6, #0]
 8007afc:	4605      	mov	r5, r0
 8007afe:	b911      	cbnz	r1, 8007b06 <sbrk_aligned+0x12>
 8007b00:	f000 fe82 	bl	8008808 <_sbrk_r>
 8007b04:	6030      	str	r0, [r6, #0]
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 fe7d 	bl	8008808 <_sbrk_r>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d103      	bne.n	8007b1a <sbrk_aligned+0x26>
 8007b12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b16:	4620      	mov	r0, r4
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d0f8      	beq.n	8007b16 <sbrk_aligned+0x22>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fe6e 	bl	8008808 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d1f2      	bne.n	8007b16 <sbrk_aligned+0x22>
 8007b30:	e7ef      	b.n	8007b12 <sbrk_aligned+0x1e>
 8007b32:	bf00      	nop
 8007b34:	20000638 	.word	0x20000638

08007b38 <_malloc_r>:
 8007b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b3c:	1ccd      	adds	r5, r1, #3
 8007b3e:	f025 0503 	bic.w	r5, r5, #3
 8007b42:	3508      	adds	r5, #8
 8007b44:	2d0c      	cmp	r5, #12
 8007b46:	bf38      	it	cc
 8007b48:	250c      	movcc	r5, #12
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	db01      	blt.n	8007b54 <_malloc_r+0x1c>
 8007b50:	42a9      	cmp	r1, r5
 8007b52:	d904      	bls.n	8007b5e <_malloc_r+0x26>
 8007b54:	230c      	movs	r3, #12
 8007b56:	6033      	str	r3, [r6, #0]
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c34 <_malloc_r+0xfc>
 8007b62:	f000 f927 	bl	8007db4 <__malloc_lock>
 8007b66:	f8d8 3000 	ldr.w	r3, [r8]
 8007b6a:	461c      	mov	r4, r3
 8007b6c:	bb44      	cbnz	r4, 8007bc0 <_malloc_r+0x88>
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff ffbf 	bl	8007af4 <sbrk_aligned>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	4604      	mov	r4, r0
 8007b7a:	d158      	bne.n	8007c2e <_malloc_r+0xf6>
 8007b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b80:	4627      	mov	r7, r4
 8007b82:	2f00      	cmp	r7, #0
 8007b84:	d143      	bne.n	8007c0e <_malloc_r+0xd6>
 8007b86:	2c00      	cmp	r4, #0
 8007b88:	d04b      	beq.n	8007c22 <_malloc_r+0xea>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4630      	mov	r0, r6
 8007b90:	eb04 0903 	add.w	r9, r4, r3
 8007b94:	f000 fe38 	bl	8008808 <_sbrk_r>
 8007b98:	4581      	cmp	r9, r0
 8007b9a:	d142      	bne.n	8007c22 <_malloc_r+0xea>
 8007b9c:	6821      	ldr	r1, [r4, #0]
 8007b9e:	1a6d      	subs	r5, r5, r1
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffa6 	bl	8007af4 <sbrk_aligned>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d03a      	beq.n	8007c22 <_malloc_r+0xea>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	442b      	add	r3, r5
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	bb62      	cbnz	r2, 8007c14 <_malloc_r+0xdc>
 8007bba:	f8c8 7000 	str.w	r7, [r8]
 8007bbe:	e00f      	b.n	8007be0 <_malloc_r+0xa8>
 8007bc0:	6822      	ldr	r2, [r4, #0]
 8007bc2:	1b52      	subs	r2, r2, r5
 8007bc4:	d420      	bmi.n	8007c08 <_malloc_r+0xd0>
 8007bc6:	2a0b      	cmp	r2, #11
 8007bc8:	d917      	bls.n	8007bfa <_malloc_r+0xc2>
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	6025      	str	r5, [r4, #0]
 8007bd0:	bf18      	it	ne
 8007bd2:	6059      	strne	r1, [r3, #4]
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	bf08      	it	eq
 8007bd8:	f8c8 1000 	streq.w	r1, [r8]
 8007bdc:	5162      	str	r2, [r4, r5]
 8007bde:	604b      	str	r3, [r1, #4]
 8007be0:	4630      	mov	r0, r6
 8007be2:	f000 f8ed 	bl	8007dc0 <__malloc_unlock>
 8007be6:	f104 000b 	add.w	r0, r4, #11
 8007bea:	1d23      	adds	r3, r4, #4
 8007bec:	f020 0007 	bic.w	r0, r0, #7
 8007bf0:	1ac2      	subs	r2, r0, r3
 8007bf2:	bf1c      	itt	ne
 8007bf4:	1a1b      	subne	r3, r3, r0
 8007bf6:	50a3      	strne	r3, [r4, r2]
 8007bf8:	e7af      	b.n	8007b5a <_malloc_r+0x22>
 8007bfa:	6862      	ldr	r2, [r4, #4]
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	bf0c      	ite	eq
 8007c00:	f8c8 2000 	streq.w	r2, [r8]
 8007c04:	605a      	strne	r2, [r3, #4]
 8007c06:	e7eb      	b.n	8007be0 <_malloc_r+0xa8>
 8007c08:	4623      	mov	r3, r4
 8007c0a:	6864      	ldr	r4, [r4, #4]
 8007c0c:	e7ae      	b.n	8007b6c <_malloc_r+0x34>
 8007c0e:	463c      	mov	r4, r7
 8007c10:	687f      	ldr	r7, [r7, #4]
 8007c12:	e7b6      	b.n	8007b82 <_malloc_r+0x4a>
 8007c14:	461a      	mov	r2, r3
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	d1fb      	bne.n	8007c14 <_malloc_r+0xdc>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6053      	str	r3, [r2, #4]
 8007c20:	e7de      	b.n	8007be0 <_malloc_r+0xa8>
 8007c22:	230c      	movs	r3, #12
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	4630      	mov	r0, r6
 8007c28:	f000 f8ca 	bl	8007dc0 <__malloc_unlock>
 8007c2c:	e794      	b.n	8007b58 <_malloc_r+0x20>
 8007c2e:	6005      	str	r5, [r0, #0]
 8007c30:	e7d6      	b.n	8007be0 <_malloc_r+0xa8>
 8007c32:	bf00      	nop
 8007c34:	2000063c 	.word	0x2000063c

08007c38 <__ascii_mbtowc>:
 8007c38:	b082      	sub	sp, #8
 8007c3a:	b901      	cbnz	r1, 8007c3e <__ascii_mbtowc+0x6>
 8007c3c:	a901      	add	r1, sp, #4
 8007c3e:	b142      	cbz	r2, 8007c52 <__ascii_mbtowc+0x1a>
 8007c40:	b14b      	cbz	r3, 8007c56 <__ascii_mbtowc+0x1e>
 8007c42:	7813      	ldrb	r3, [r2, #0]
 8007c44:	600b      	str	r3, [r1, #0]
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	1e10      	subs	r0, r2, #0
 8007c4a:	bf18      	it	ne
 8007c4c:	2001      	movne	r0, #1
 8007c4e:	b002      	add	sp, #8
 8007c50:	4770      	bx	lr
 8007c52:	4610      	mov	r0, r2
 8007c54:	e7fb      	b.n	8007c4e <__ascii_mbtowc+0x16>
 8007c56:	f06f 0001 	mvn.w	r0, #1
 8007c5a:	e7f8      	b.n	8007c4e <__ascii_mbtowc+0x16>

08007c5c <__sflush_r>:
 8007c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c64:	0716      	lsls	r6, r2, #28
 8007c66:	4605      	mov	r5, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	d454      	bmi.n	8007d16 <__sflush_r+0xba>
 8007c6c:	684b      	ldr	r3, [r1, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x1c>
 8007c72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dd48      	ble.n	8007d0a <__sflush_r+0xae>
 8007c78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d045      	beq.n	8007d0a <__sflush_r+0xae>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	d030      	beq.n	8007cee <__sflush_r+0x92>
 8007c8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0759      	lsls	r1, r3, #29
 8007c92:	d505      	bpl.n	8007ca0 <__sflush_r+0x44>
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c9a:	b10b      	cbz	r3, 8007ca0 <__sflush_r+0x44>
 8007c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	d106      	bne.n	8007cbe <__sflush_r+0x62>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	291d      	cmp	r1, #29
 8007cb4:	d82b      	bhi.n	8007d0e <__sflush_r+0xb2>
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d60 <__sflush_r+0x104>)
 8007cb8:	40ca      	lsrs	r2, r1
 8007cba:	07d6      	lsls	r6, r2, #31
 8007cbc:	d527      	bpl.n	8007d0e <__sflush_r+0xb2>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6062      	str	r2, [r4, #4]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <__sflush_r+0x78>
 8007cca:	1c42      	adds	r2, r0, #1
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0x76>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b903      	cbnz	r3, 8007cd4 <__sflush_r+0x78>
 8007cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	b1b9      	cbz	r1, 8007d0a <__sflush_r+0xae>
 8007cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d002      	beq.n	8007ce8 <__sflush_r+0x8c>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 fdf4 	bl	80088d0 <_free_r>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cec:	e00d      	b.n	8007d0a <__sflush_r+0xae>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b0      	blx	r6
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	1c50      	adds	r0, r2, #1
 8007cf8:	d1c9      	bne.n	8007c8e <__sflush_r+0x32>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c6      	beq.n	8007c8e <__sflush_r+0x32>
 8007d00:	2b1d      	cmp	r3, #29
 8007d02:	d001      	beq.n	8007d08 <__sflush_r+0xac>
 8007d04:	2b16      	cmp	r3, #22
 8007d06:	d11e      	bne.n	8007d46 <__sflush_r+0xea>
 8007d08:	602f      	str	r7, [r5, #0]
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e022      	b.n	8007d54 <__sflush_r+0xf8>
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d12:	b21b      	sxth	r3, r3
 8007d14:	e01b      	b.n	8007d4e <__sflush_r+0xf2>
 8007d16:	690f      	ldr	r7, [r1, #16]
 8007d18:	2f00      	cmp	r7, #0
 8007d1a:	d0f6      	beq.n	8007d0a <__sflush_r+0xae>
 8007d1c:	0793      	lsls	r3, r2, #30
 8007d1e:	680e      	ldr	r6, [r1, #0]
 8007d20:	bf08      	it	eq
 8007d22:	694b      	ldreq	r3, [r1, #20]
 8007d24:	600f      	str	r7, [r1, #0]
 8007d26:	bf18      	it	ne
 8007d28:	2300      	movne	r3, #0
 8007d2a:	eba6 0807 	sub.w	r8, r6, r7
 8007d2e:	608b      	str	r3, [r1, #8]
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	dde9      	ble.n	8007d0a <__sflush_r+0xae>
 8007d36:	6a21      	ldr	r1, [r4, #32]
 8007d38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d3a:	4643      	mov	r3, r8
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b0      	blx	r6
 8007d42:	2800      	cmp	r0, #0
 8007d44:	dc08      	bgt.n	8007d58 <__sflush_r+0xfc>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	4407      	add	r7, r0
 8007d5a:	eba8 0800 	sub.w	r8, r8, r0
 8007d5e:	e7e7      	b.n	8007d30 <__sflush_r+0xd4>
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b913      	cbnz	r3, 8007d74 <_fflush_r+0x10>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	b118      	cbz	r0, 8007d7e <_fflush_r+0x1a>
 8007d76:	6a03      	ldr	r3, [r0, #32]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_fflush_r+0x1a>
 8007d7a:	f7fe fccf 	bl	800671c <__sinit>
 8007d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f3      	beq.n	8007d6e <_fflush_r+0xa>
 8007d86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d88:	07d0      	lsls	r0, r2, #31
 8007d8a:	d404      	bmi.n	8007d96 <_fflush_r+0x32>
 8007d8c:	0599      	lsls	r1, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_fflush_r+0x32>
 8007d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d92:	f7ff fb5a 	bl	800744a <__retarget_lock_acquire_recursive>
 8007d96:	4628      	mov	r0, r5
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7ff ff5f 	bl	8007c5c <__sflush_r>
 8007d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007da0:	07da      	lsls	r2, r3, #31
 8007da2:	4605      	mov	r5, r0
 8007da4:	d4e4      	bmi.n	8007d70 <_fflush_r+0xc>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	059b      	lsls	r3, r3, #22
 8007daa:	d4e1      	bmi.n	8007d70 <_fflush_r+0xc>
 8007dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dae:	f7ff fb4d 	bl	800744c <__retarget_lock_release_recursive>
 8007db2:	e7dd      	b.n	8007d70 <_fflush_r+0xc>

08007db4 <__malloc_lock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__malloc_lock+0x8>)
 8007db6:	f7ff bb48 	b.w	800744a <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20000634 	.word	0x20000634

08007dc0 <__malloc_unlock>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	@ (8007dc8 <__malloc_unlock+0x8>)
 8007dc2:	f7ff bb43 	b.w	800744c <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20000634 	.word	0x20000634

08007dcc <_Balloc>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	69c6      	ldr	r6, [r0, #28]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	b976      	cbnz	r6, 8007df4 <_Balloc+0x28>
 8007dd6:	2010      	movs	r0, #16
 8007dd8:	f000 fdc4 	bl	8008964 <malloc>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	61e0      	str	r0, [r4, #28]
 8007de0:	b920      	cbnz	r0, 8007dec <_Balloc+0x20>
 8007de2:	4b18      	ldr	r3, [pc, #96]	@ (8007e44 <_Balloc+0x78>)
 8007de4:	4818      	ldr	r0, [pc, #96]	@ (8007e48 <_Balloc+0x7c>)
 8007de6:	216b      	movs	r1, #107	@ 0x6b
 8007de8:	f000 fd40 	bl	800886c <__assert_func>
 8007dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007df0:	6006      	str	r6, [r0, #0]
 8007df2:	60c6      	str	r6, [r0, #12]
 8007df4:	69e6      	ldr	r6, [r4, #28]
 8007df6:	68f3      	ldr	r3, [r6, #12]
 8007df8:	b183      	cbz	r3, 8007e1c <_Balloc+0x50>
 8007dfa:	69e3      	ldr	r3, [r4, #28]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e02:	b9b8      	cbnz	r0, 8007e34 <_Balloc+0x68>
 8007e04:	2101      	movs	r1, #1
 8007e06:	fa01 f605 	lsl.w	r6, r1, r5
 8007e0a:	1d72      	adds	r2, r6, #5
 8007e0c:	0092      	lsls	r2, r2, #2
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fd4a 	bl	80088a8 <_calloc_r>
 8007e14:	b160      	cbz	r0, 8007e30 <_Balloc+0x64>
 8007e16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e1a:	e00e      	b.n	8007e3a <_Balloc+0x6e>
 8007e1c:	2221      	movs	r2, #33	@ 0x21
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fd41 	bl	80088a8 <_calloc_r>
 8007e26:	69e3      	ldr	r3, [r4, #28]
 8007e28:	60f0      	str	r0, [r6, #12]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e4      	bne.n	8007dfa <_Balloc+0x2e>
 8007e30:	2000      	movs	r0, #0
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	6802      	ldr	r2, [r0, #0]
 8007e36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e40:	e7f7      	b.n	8007e32 <_Balloc+0x66>
 8007e42:	bf00      	nop
 8007e44:	080092cb 	.word	0x080092cb
 8007e48:	080092e2 	.word	0x080092e2

08007e4c <_Bfree>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	69c6      	ldr	r6, [r0, #28]
 8007e50:	4605      	mov	r5, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	b976      	cbnz	r6, 8007e74 <_Bfree+0x28>
 8007e56:	2010      	movs	r0, #16
 8007e58:	f000 fd84 	bl	8008964 <malloc>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	61e8      	str	r0, [r5, #28]
 8007e60:	b920      	cbnz	r0, 8007e6c <_Bfree+0x20>
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <_Bfree+0x3c>)
 8007e64:	4809      	ldr	r0, [pc, #36]	@ (8007e8c <_Bfree+0x40>)
 8007e66:	218f      	movs	r1, #143	@ 0x8f
 8007e68:	f000 fd00 	bl	800886c <__assert_func>
 8007e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e70:	6006      	str	r6, [r0, #0]
 8007e72:	60c6      	str	r6, [r0, #12]
 8007e74:	b13c      	cbz	r4, 8007e86 <_Bfree+0x3a>
 8007e76:	69eb      	ldr	r3, [r5, #28]
 8007e78:	6862      	ldr	r2, [r4, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e80:	6021      	str	r1, [r4, #0]
 8007e82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	080092cb 	.word	0x080092cb
 8007e8c:	080092e2 	.word	0x080092e2

08007e90 <__multadd>:
 8007e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e94:	690d      	ldr	r5, [r1, #16]
 8007e96:	4607      	mov	r7, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	461e      	mov	r6, r3
 8007e9c:	f101 0c14 	add.w	ip, r1, #20
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ea6:	b299      	uxth	r1, r3
 8007ea8:	fb02 6101 	mla	r1, r2, r1, r6
 8007eac:	0c1e      	lsrs	r6, r3, #16
 8007eae:	0c0b      	lsrs	r3, r1, #16
 8007eb0:	fb02 3306 	mla	r3, r2, r6, r3
 8007eb4:	b289      	uxth	r1, r1
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ebc:	4285      	cmp	r5, r0
 8007ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8007ec2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ec6:	dcec      	bgt.n	8007ea2 <__multadd+0x12>
 8007ec8:	b30e      	cbz	r6, 8007f0e <__multadd+0x7e>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dc19      	bgt.n	8007f04 <__multadd+0x74>
 8007ed0:	6861      	ldr	r1, [r4, #4]
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	f7ff ff79 	bl	8007dcc <_Balloc>
 8007eda:	4680      	mov	r8, r0
 8007edc:	b928      	cbnz	r0, 8007eea <__multadd+0x5a>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f14 <__multadd+0x84>)
 8007ee2:	480d      	ldr	r0, [pc, #52]	@ (8007f18 <__multadd+0x88>)
 8007ee4:	21ba      	movs	r1, #186	@ 0xba
 8007ee6:	f000 fcc1 	bl	800886c <__assert_func>
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	3202      	adds	r2, #2
 8007eee:	f104 010c 	add.w	r1, r4, #12
 8007ef2:	0092      	lsls	r2, r2, #2
 8007ef4:	300c      	adds	r0, #12
 8007ef6:	f7ff faaa 	bl	800744e <memcpy>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ffa5 	bl	8007e4c <_Bfree>
 8007f02:	4644      	mov	r4, r8
 8007f04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f08:	3501      	adds	r5, #1
 8007f0a:	615e      	str	r6, [r3, #20]
 8007f0c:	6125      	str	r5, [r4, #16]
 8007f0e:	4620      	mov	r0, r4
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	0800925a 	.word	0x0800925a
 8007f18:	080092e2 	.word	0x080092e2

08007f1c <__s2b>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	460c      	mov	r4, r1
 8007f22:	4615      	mov	r5, r2
 8007f24:	461f      	mov	r7, r3
 8007f26:	2209      	movs	r2, #9
 8007f28:	3308      	adds	r3, #8
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f30:	2100      	movs	r1, #0
 8007f32:	2201      	movs	r2, #1
 8007f34:	429a      	cmp	r2, r3
 8007f36:	db09      	blt.n	8007f4c <__s2b+0x30>
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff ff47 	bl	8007dcc <_Balloc>
 8007f3e:	b940      	cbnz	r0, 8007f52 <__s2b+0x36>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b19      	ldr	r3, [pc, #100]	@ (8007fa8 <__s2b+0x8c>)
 8007f44:	4819      	ldr	r0, [pc, #100]	@ (8007fac <__s2b+0x90>)
 8007f46:	21d3      	movs	r1, #211	@ 0xd3
 8007f48:	f000 fc90 	bl	800886c <__assert_func>
 8007f4c:	0052      	lsls	r2, r2, #1
 8007f4e:	3101      	adds	r1, #1
 8007f50:	e7f0      	b.n	8007f34 <__s2b+0x18>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	6143      	str	r3, [r0, #20]
 8007f56:	2d09      	cmp	r5, #9
 8007f58:	f04f 0301 	mov.w	r3, #1
 8007f5c:	6103      	str	r3, [r0, #16]
 8007f5e:	dd16      	ble.n	8007f8e <__s2b+0x72>
 8007f60:	f104 0909 	add.w	r9, r4, #9
 8007f64:	46c8      	mov	r8, r9
 8007f66:	442c      	add	r4, r5
 8007f68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f6c:	4601      	mov	r1, r0
 8007f6e:	3b30      	subs	r3, #48	@ 0x30
 8007f70:	220a      	movs	r2, #10
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7ff ff8c 	bl	8007e90 <__multadd>
 8007f78:	45a0      	cmp	r8, r4
 8007f7a:	d1f5      	bne.n	8007f68 <__s2b+0x4c>
 8007f7c:	f1a5 0408 	sub.w	r4, r5, #8
 8007f80:	444c      	add	r4, r9
 8007f82:	1b2d      	subs	r5, r5, r4
 8007f84:	1963      	adds	r3, r4, r5
 8007f86:	42bb      	cmp	r3, r7
 8007f88:	db04      	blt.n	8007f94 <__s2b+0x78>
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	340a      	adds	r4, #10
 8007f90:	2509      	movs	r5, #9
 8007f92:	e7f6      	b.n	8007f82 <__s2b+0x66>
 8007f94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f98:	4601      	mov	r1, r0
 8007f9a:	3b30      	subs	r3, #48	@ 0x30
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ff76 	bl	8007e90 <__multadd>
 8007fa4:	e7ee      	b.n	8007f84 <__s2b+0x68>
 8007fa6:	bf00      	nop
 8007fa8:	0800925a 	.word	0x0800925a
 8007fac:	080092e2 	.word	0x080092e2

08007fb0 <__hi0bits>:
 8007fb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	bf36      	itet	cc
 8007fb8:	0403      	lslcc	r3, r0, #16
 8007fba:	2000      	movcs	r0, #0
 8007fbc:	2010      	movcc	r0, #16
 8007fbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fc2:	bf3c      	itt	cc
 8007fc4:	021b      	lslcc	r3, r3, #8
 8007fc6:	3008      	addcc	r0, #8
 8007fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fcc:	bf3c      	itt	cc
 8007fce:	011b      	lslcc	r3, r3, #4
 8007fd0:	3004      	addcc	r0, #4
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd6:	bf3c      	itt	cc
 8007fd8:	009b      	lslcc	r3, r3, #2
 8007fda:	3002      	addcc	r0, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	db05      	blt.n	8007fec <__hi0bits+0x3c>
 8007fe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fe4:	f100 0001 	add.w	r0, r0, #1
 8007fe8:	bf08      	it	eq
 8007fea:	2020      	moveq	r0, #32
 8007fec:	4770      	bx	lr

08007fee <__lo0bits>:
 8007fee:	6803      	ldr	r3, [r0, #0]
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	f013 0007 	ands.w	r0, r3, #7
 8007ff6:	d00b      	beq.n	8008010 <__lo0bits+0x22>
 8007ff8:	07d9      	lsls	r1, r3, #31
 8007ffa:	d421      	bmi.n	8008040 <__lo0bits+0x52>
 8007ffc:	0798      	lsls	r0, r3, #30
 8007ffe:	bf49      	itett	mi
 8008000:	085b      	lsrmi	r3, r3, #1
 8008002:	089b      	lsrpl	r3, r3, #2
 8008004:	2001      	movmi	r0, #1
 8008006:	6013      	strmi	r3, [r2, #0]
 8008008:	bf5c      	itt	pl
 800800a:	6013      	strpl	r3, [r2, #0]
 800800c:	2002      	movpl	r0, #2
 800800e:	4770      	bx	lr
 8008010:	b299      	uxth	r1, r3
 8008012:	b909      	cbnz	r1, 8008018 <__lo0bits+0x2a>
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	2010      	movs	r0, #16
 8008018:	b2d9      	uxtb	r1, r3
 800801a:	b909      	cbnz	r1, 8008020 <__lo0bits+0x32>
 800801c:	3008      	adds	r0, #8
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	0719      	lsls	r1, r3, #28
 8008022:	bf04      	itt	eq
 8008024:	091b      	lsreq	r3, r3, #4
 8008026:	3004      	addeq	r0, #4
 8008028:	0799      	lsls	r1, r3, #30
 800802a:	bf04      	itt	eq
 800802c:	089b      	lsreq	r3, r3, #2
 800802e:	3002      	addeq	r0, #2
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	d403      	bmi.n	800803c <__lo0bits+0x4e>
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f100 0001 	add.w	r0, r0, #1
 800803a:	d003      	beq.n	8008044 <__lo0bits+0x56>
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	4770      	bx	lr
 8008040:	2000      	movs	r0, #0
 8008042:	4770      	bx	lr
 8008044:	2020      	movs	r0, #32
 8008046:	4770      	bx	lr

08008048 <__i2b>:
 8008048:	b510      	push	{r4, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	2101      	movs	r1, #1
 800804e:	f7ff febd 	bl	8007dcc <_Balloc>
 8008052:	4602      	mov	r2, r0
 8008054:	b928      	cbnz	r0, 8008062 <__i2b+0x1a>
 8008056:	4b05      	ldr	r3, [pc, #20]	@ (800806c <__i2b+0x24>)
 8008058:	4805      	ldr	r0, [pc, #20]	@ (8008070 <__i2b+0x28>)
 800805a:	f240 1145 	movw	r1, #325	@ 0x145
 800805e:	f000 fc05 	bl	800886c <__assert_func>
 8008062:	2301      	movs	r3, #1
 8008064:	6144      	str	r4, [r0, #20]
 8008066:	6103      	str	r3, [r0, #16]
 8008068:	bd10      	pop	{r4, pc}
 800806a:	bf00      	nop
 800806c:	0800925a 	.word	0x0800925a
 8008070:	080092e2 	.word	0x080092e2

08008074 <__multiply>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	4617      	mov	r7, r2
 800807a:	690a      	ldr	r2, [r1, #16]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	429a      	cmp	r2, r3
 8008080:	bfa8      	it	ge
 8008082:	463b      	movge	r3, r7
 8008084:	4689      	mov	r9, r1
 8008086:	bfa4      	itt	ge
 8008088:	460f      	movge	r7, r1
 800808a:	4699      	movge	r9, r3
 800808c:	693d      	ldr	r5, [r7, #16]
 800808e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	eb05 060a 	add.w	r6, r5, sl
 800809a:	42b3      	cmp	r3, r6
 800809c:	b085      	sub	sp, #20
 800809e:	bfb8      	it	lt
 80080a0:	3101      	addlt	r1, #1
 80080a2:	f7ff fe93 	bl	8007dcc <_Balloc>
 80080a6:	b930      	cbnz	r0, 80080b6 <__multiply+0x42>
 80080a8:	4602      	mov	r2, r0
 80080aa:	4b41      	ldr	r3, [pc, #260]	@ (80081b0 <__multiply+0x13c>)
 80080ac:	4841      	ldr	r0, [pc, #260]	@ (80081b4 <__multiply+0x140>)
 80080ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080b2:	f000 fbdb 	bl	800886c <__assert_func>
 80080b6:	f100 0414 	add.w	r4, r0, #20
 80080ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80080be:	4623      	mov	r3, r4
 80080c0:	2200      	movs	r2, #0
 80080c2:	4573      	cmp	r3, lr
 80080c4:	d320      	bcc.n	8008108 <__multiply+0x94>
 80080c6:	f107 0814 	add.w	r8, r7, #20
 80080ca:	f109 0114 	add.w	r1, r9, #20
 80080ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80080d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80080d6:	9302      	str	r3, [sp, #8]
 80080d8:	1beb      	subs	r3, r5, r7
 80080da:	3b15      	subs	r3, #21
 80080dc:	f023 0303 	bic.w	r3, r3, #3
 80080e0:	3304      	adds	r3, #4
 80080e2:	3715      	adds	r7, #21
 80080e4:	42bd      	cmp	r5, r7
 80080e6:	bf38      	it	cc
 80080e8:	2304      	movcc	r3, #4
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	9b02      	ldr	r3, [sp, #8]
 80080ee:	9103      	str	r1, [sp, #12]
 80080f0:	428b      	cmp	r3, r1
 80080f2:	d80c      	bhi.n	800810e <__multiply+0x9a>
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	dd03      	ble.n	8008100 <__multiply+0x8c>
 80080f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d055      	beq.n	80081ac <__multiply+0x138>
 8008100:	6106      	str	r6, [r0, #16]
 8008102:	b005      	add	sp, #20
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	f843 2b04 	str.w	r2, [r3], #4
 800810c:	e7d9      	b.n	80080c2 <__multiply+0x4e>
 800810e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008112:	f1ba 0f00 	cmp.w	sl, #0
 8008116:	d01f      	beq.n	8008158 <__multiply+0xe4>
 8008118:	46c4      	mov	ip, r8
 800811a:	46a1      	mov	r9, r4
 800811c:	2700      	movs	r7, #0
 800811e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008122:	f8d9 3000 	ldr.w	r3, [r9]
 8008126:	fa1f fb82 	uxth.w	fp, r2
 800812a:	b29b      	uxth	r3, r3
 800812c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008130:	443b      	add	r3, r7
 8008132:	f8d9 7000 	ldr.w	r7, [r9]
 8008136:	0c12      	lsrs	r2, r2, #16
 8008138:	0c3f      	lsrs	r7, r7, #16
 800813a:	fb0a 7202 	mla	r2, sl, r2, r7
 800813e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008148:	4565      	cmp	r5, ip
 800814a:	f849 3b04 	str.w	r3, [r9], #4
 800814e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008152:	d8e4      	bhi.n	800811e <__multiply+0xaa>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	50e7      	str	r7, [r4, r3]
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800815e:	3104      	adds	r1, #4
 8008160:	f1b9 0f00 	cmp.w	r9, #0
 8008164:	d020      	beq.n	80081a8 <__multiply+0x134>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	4647      	mov	r7, r8
 800816a:	46a4      	mov	ip, r4
 800816c:	f04f 0a00 	mov.w	sl, #0
 8008170:	f8b7 b000 	ldrh.w	fp, [r7]
 8008174:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008178:	fb09 220b 	mla	r2, r9, fp, r2
 800817c:	4452      	add	r2, sl
 800817e:	b29b      	uxth	r3, r3
 8008180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008184:	f84c 3b04 	str.w	r3, [ip], #4
 8008188:	f857 3b04 	ldr.w	r3, [r7], #4
 800818c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008190:	f8bc 3000 	ldrh.w	r3, [ip]
 8008194:	fb09 330a 	mla	r3, r9, sl, r3
 8008198:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800819c:	42bd      	cmp	r5, r7
 800819e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081a2:	d8e5      	bhi.n	8008170 <__multiply+0xfc>
 80081a4:	9a01      	ldr	r2, [sp, #4]
 80081a6:	50a3      	str	r3, [r4, r2]
 80081a8:	3404      	adds	r4, #4
 80081aa:	e79f      	b.n	80080ec <__multiply+0x78>
 80081ac:	3e01      	subs	r6, #1
 80081ae:	e7a1      	b.n	80080f4 <__multiply+0x80>
 80081b0:	0800925a 	.word	0x0800925a
 80081b4:	080092e2 	.word	0x080092e2

080081b8 <__pow5mult>:
 80081b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081bc:	4615      	mov	r5, r2
 80081be:	f012 0203 	ands.w	r2, r2, #3
 80081c2:	4607      	mov	r7, r0
 80081c4:	460e      	mov	r6, r1
 80081c6:	d007      	beq.n	80081d8 <__pow5mult+0x20>
 80081c8:	4c25      	ldr	r4, [pc, #148]	@ (8008260 <__pow5mult+0xa8>)
 80081ca:	3a01      	subs	r2, #1
 80081cc:	2300      	movs	r3, #0
 80081ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081d2:	f7ff fe5d 	bl	8007e90 <__multadd>
 80081d6:	4606      	mov	r6, r0
 80081d8:	10ad      	asrs	r5, r5, #2
 80081da:	d03d      	beq.n	8008258 <__pow5mult+0xa0>
 80081dc:	69fc      	ldr	r4, [r7, #28]
 80081de:	b97c      	cbnz	r4, 8008200 <__pow5mult+0x48>
 80081e0:	2010      	movs	r0, #16
 80081e2:	f000 fbbf 	bl	8008964 <malloc>
 80081e6:	4602      	mov	r2, r0
 80081e8:	61f8      	str	r0, [r7, #28]
 80081ea:	b928      	cbnz	r0, 80081f8 <__pow5mult+0x40>
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <__pow5mult+0xac>)
 80081ee:	481e      	ldr	r0, [pc, #120]	@ (8008268 <__pow5mult+0xb0>)
 80081f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081f4:	f000 fb3a 	bl	800886c <__assert_func>
 80081f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081fc:	6004      	str	r4, [r0, #0]
 80081fe:	60c4      	str	r4, [r0, #12]
 8008200:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008208:	b94c      	cbnz	r4, 800821e <__pow5mult+0x66>
 800820a:	f240 2171 	movw	r1, #625	@ 0x271
 800820e:	4638      	mov	r0, r7
 8008210:	f7ff ff1a 	bl	8008048 <__i2b>
 8008214:	2300      	movs	r3, #0
 8008216:	f8c8 0008 	str.w	r0, [r8, #8]
 800821a:	4604      	mov	r4, r0
 800821c:	6003      	str	r3, [r0, #0]
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	07eb      	lsls	r3, r5, #31
 8008224:	d50a      	bpl.n	800823c <__pow5mult+0x84>
 8008226:	4631      	mov	r1, r6
 8008228:	4622      	mov	r2, r4
 800822a:	4638      	mov	r0, r7
 800822c:	f7ff ff22 	bl	8008074 <__multiply>
 8008230:	4631      	mov	r1, r6
 8008232:	4680      	mov	r8, r0
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff fe09 	bl	8007e4c <_Bfree>
 800823a:	4646      	mov	r6, r8
 800823c:	106d      	asrs	r5, r5, #1
 800823e:	d00b      	beq.n	8008258 <__pow5mult+0xa0>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	b938      	cbnz	r0, 8008254 <__pow5mult+0x9c>
 8008244:	4622      	mov	r2, r4
 8008246:	4621      	mov	r1, r4
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff ff13 	bl	8008074 <__multiply>
 800824e:	6020      	str	r0, [r4, #0]
 8008250:	f8c0 9000 	str.w	r9, [r0]
 8008254:	4604      	mov	r4, r0
 8008256:	e7e4      	b.n	8008222 <__pow5mult+0x6a>
 8008258:	4630      	mov	r0, r6
 800825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800825e:	bf00      	nop
 8008260:	08009504 	.word	0x08009504
 8008264:	080092cb 	.word	0x080092cb
 8008268:	080092e2 	.word	0x080092e2

0800826c <__lshift>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	460c      	mov	r4, r1
 8008272:	6849      	ldr	r1, [r1, #4]
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800827a:	68a3      	ldr	r3, [r4, #8]
 800827c:	4607      	mov	r7, r0
 800827e:	4691      	mov	r9, r2
 8008280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008284:	f108 0601 	add.w	r6, r8, #1
 8008288:	42b3      	cmp	r3, r6
 800828a:	db0b      	blt.n	80082a4 <__lshift+0x38>
 800828c:	4638      	mov	r0, r7
 800828e:	f7ff fd9d 	bl	8007dcc <_Balloc>
 8008292:	4605      	mov	r5, r0
 8008294:	b948      	cbnz	r0, 80082aa <__lshift+0x3e>
 8008296:	4602      	mov	r2, r0
 8008298:	4b28      	ldr	r3, [pc, #160]	@ (800833c <__lshift+0xd0>)
 800829a:	4829      	ldr	r0, [pc, #164]	@ (8008340 <__lshift+0xd4>)
 800829c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082a0:	f000 fae4 	bl	800886c <__assert_func>
 80082a4:	3101      	adds	r1, #1
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	e7ee      	b.n	8008288 <__lshift+0x1c>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f100 0114 	add.w	r1, r0, #20
 80082b0:	f100 0210 	add.w	r2, r0, #16
 80082b4:	4618      	mov	r0, r3
 80082b6:	4553      	cmp	r3, sl
 80082b8:	db33      	blt.n	8008322 <__lshift+0xb6>
 80082ba:	6920      	ldr	r0, [r4, #16]
 80082bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c0:	f104 0314 	add.w	r3, r4, #20
 80082c4:	f019 091f 	ands.w	r9, r9, #31
 80082c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d0:	d02b      	beq.n	800832a <__lshift+0xbe>
 80082d2:	f1c9 0e20 	rsb	lr, r9, #32
 80082d6:	468a      	mov	sl, r1
 80082d8:	2200      	movs	r2, #0
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	fa00 f009 	lsl.w	r0, r0, r9
 80082e0:	4310      	orrs	r0, r2
 80082e2:	f84a 0b04 	str.w	r0, [sl], #4
 80082e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ea:	459c      	cmp	ip, r3
 80082ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f0:	d8f3      	bhi.n	80082da <__lshift+0x6e>
 80082f2:	ebac 0304 	sub.w	r3, ip, r4
 80082f6:	3b15      	subs	r3, #21
 80082f8:	f023 0303 	bic.w	r3, r3, #3
 80082fc:	3304      	adds	r3, #4
 80082fe:	f104 0015 	add.w	r0, r4, #21
 8008302:	4560      	cmp	r0, ip
 8008304:	bf88      	it	hi
 8008306:	2304      	movhi	r3, #4
 8008308:	50ca      	str	r2, [r1, r3]
 800830a:	b10a      	cbz	r2, 8008310 <__lshift+0xa4>
 800830c:	f108 0602 	add.w	r6, r8, #2
 8008310:	3e01      	subs	r6, #1
 8008312:	4638      	mov	r0, r7
 8008314:	612e      	str	r6, [r5, #16]
 8008316:	4621      	mov	r1, r4
 8008318:	f7ff fd98 	bl	8007e4c <_Bfree>
 800831c:	4628      	mov	r0, r5
 800831e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008322:	f842 0f04 	str.w	r0, [r2, #4]!
 8008326:	3301      	adds	r3, #1
 8008328:	e7c5      	b.n	80082b6 <__lshift+0x4a>
 800832a:	3904      	subs	r1, #4
 800832c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008330:	f841 2f04 	str.w	r2, [r1, #4]!
 8008334:	459c      	cmp	ip, r3
 8008336:	d8f9      	bhi.n	800832c <__lshift+0xc0>
 8008338:	e7ea      	b.n	8008310 <__lshift+0xa4>
 800833a:	bf00      	nop
 800833c:	0800925a 	.word	0x0800925a
 8008340:	080092e2 	.word	0x080092e2

08008344 <__mcmp>:
 8008344:	690a      	ldr	r2, [r1, #16]
 8008346:	4603      	mov	r3, r0
 8008348:	6900      	ldr	r0, [r0, #16]
 800834a:	1a80      	subs	r0, r0, r2
 800834c:	b530      	push	{r4, r5, lr}
 800834e:	d10e      	bne.n	800836e <__mcmp+0x2a>
 8008350:	3314      	adds	r3, #20
 8008352:	3114      	adds	r1, #20
 8008354:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008358:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800835c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008360:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008364:	4295      	cmp	r5, r2
 8008366:	d003      	beq.n	8008370 <__mcmp+0x2c>
 8008368:	d205      	bcs.n	8008376 <__mcmp+0x32>
 800836a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800836e:	bd30      	pop	{r4, r5, pc}
 8008370:	42a3      	cmp	r3, r4
 8008372:	d3f3      	bcc.n	800835c <__mcmp+0x18>
 8008374:	e7fb      	b.n	800836e <__mcmp+0x2a>
 8008376:	2001      	movs	r0, #1
 8008378:	e7f9      	b.n	800836e <__mcmp+0x2a>
	...

0800837c <__mdiff>:
 800837c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	4689      	mov	r9, r1
 8008382:	4606      	mov	r6, r0
 8008384:	4611      	mov	r1, r2
 8008386:	4648      	mov	r0, r9
 8008388:	4614      	mov	r4, r2
 800838a:	f7ff ffdb 	bl	8008344 <__mcmp>
 800838e:	1e05      	subs	r5, r0, #0
 8008390:	d112      	bne.n	80083b8 <__mdiff+0x3c>
 8008392:	4629      	mov	r1, r5
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff fd19 	bl	8007dcc <_Balloc>
 800839a:	4602      	mov	r2, r0
 800839c:	b928      	cbnz	r0, 80083aa <__mdiff+0x2e>
 800839e:	4b3f      	ldr	r3, [pc, #252]	@ (800849c <__mdiff+0x120>)
 80083a0:	f240 2137 	movw	r1, #567	@ 0x237
 80083a4:	483e      	ldr	r0, [pc, #248]	@ (80084a0 <__mdiff+0x124>)
 80083a6:	f000 fa61 	bl	800886c <__assert_func>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083b0:	4610      	mov	r0, r2
 80083b2:	b003      	add	sp, #12
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	bfbc      	itt	lt
 80083ba:	464b      	movlt	r3, r9
 80083bc:	46a1      	movlt	r9, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083c4:	bfba      	itte	lt
 80083c6:	461c      	movlt	r4, r3
 80083c8:	2501      	movlt	r5, #1
 80083ca:	2500      	movge	r5, #0
 80083cc:	f7ff fcfe 	bl	8007dcc <_Balloc>
 80083d0:	4602      	mov	r2, r0
 80083d2:	b918      	cbnz	r0, 80083dc <__mdiff+0x60>
 80083d4:	4b31      	ldr	r3, [pc, #196]	@ (800849c <__mdiff+0x120>)
 80083d6:	f240 2145 	movw	r1, #581	@ 0x245
 80083da:	e7e3      	b.n	80083a4 <__mdiff+0x28>
 80083dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083e0:	6926      	ldr	r6, [r4, #16]
 80083e2:	60c5      	str	r5, [r0, #12]
 80083e4:	f109 0310 	add.w	r3, r9, #16
 80083e8:	f109 0514 	add.w	r5, r9, #20
 80083ec:	f104 0e14 	add.w	lr, r4, #20
 80083f0:	f100 0b14 	add.w	fp, r0, #20
 80083f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	46d9      	mov	r9, fp
 8008400:	f04f 0c00 	mov.w	ip, #0
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	f85e 0b04 	ldr.w	r0, [lr], #4
 800840a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	fa1f f38a 	uxth.w	r3, sl
 8008414:	4619      	mov	r1, r3
 8008416:	b283      	uxth	r3, r0
 8008418:	1acb      	subs	r3, r1, r3
 800841a:	0c00      	lsrs	r0, r0, #16
 800841c:	4463      	add	r3, ip
 800841e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008422:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008426:	b29b      	uxth	r3, r3
 8008428:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800842c:	4576      	cmp	r6, lr
 800842e:	f849 3b04 	str.w	r3, [r9], #4
 8008432:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008436:	d8e5      	bhi.n	8008404 <__mdiff+0x88>
 8008438:	1b33      	subs	r3, r6, r4
 800843a:	3b15      	subs	r3, #21
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	3415      	adds	r4, #21
 8008442:	3304      	adds	r3, #4
 8008444:	42a6      	cmp	r6, r4
 8008446:	bf38      	it	cc
 8008448:	2304      	movcc	r3, #4
 800844a:	441d      	add	r5, r3
 800844c:	445b      	add	r3, fp
 800844e:	461e      	mov	r6, r3
 8008450:	462c      	mov	r4, r5
 8008452:	4544      	cmp	r4, r8
 8008454:	d30e      	bcc.n	8008474 <__mdiff+0xf8>
 8008456:	f108 0103 	add.w	r1, r8, #3
 800845a:	1b49      	subs	r1, r1, r5
 800845c:	f021 0103 	bic.w	r1, r1, #3
 8008460:	3d03      	subs	r5, #3
 8008462:	45a8      	cmp	r8, r5
 8008464:	bf38      	it	cc
 8008466:	2100      	movcc	r1, #0
 8008468:	440b      	add	r3, r1
 800846a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800846e:	b191      	cbz	r1, 8008496 <__mdiff+0x11a>
 8008470:	6117      	str	r7, [r2, #16]
 8008472:	e79d      	b.n	80083b0 <__mdiff+0x34>
 8008474:	f854 1b04 	ldr.w	r1, [r4], #4
 8008478:	46e6      	mov	lr, ip
 800847a:	0c08      	lsrs	r0, r1, #16
 800847c:	fa1c fc81 	uxtah	ip, ip, r1
 8008480:	4471      	add	r1, lr
 8008482:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008486:	b289      	uxth	r1, r1
 8008488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800848c:	f846 1b04 	str.w	r1, [r6], #4
 8008490:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008494:	e7dd      	b.n	8008452 <__mdiff+0xd6>
 8008496:	3f01      	subs	r7, #1
 8008498:	e7e7      	b.n	800846a <__mdiff+0xee>
 800849a:	bf00      	nop
 800849c:	0800925a 	.word	0x0800925a
 80084a0:	080092e2 	.word	0x080092e2

080084a4 <__ulp>:
 80084a4:	b082      	sub	sp, #8
 80084a6:	ed8d 0b00 	vstr	d0, [sp]
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	4b0f      	ldr	r3, [pc, #60]	@ (80084ec <__ulp+0x48>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc08      	bgt.n	80084ca <__ulp+0x26>
 80084b8:	425b      	negs	r3, r3
 80084ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80084be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80084c2:	da04      	bge.n	80084ce <__ulp+0x2a>
 80084c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80084c8:	4113      	asrs	r3, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	e008      	b.n	80084e0 <__ulp+0x3c>
 80084ce:	f1a2 0314 	sub.w	r3, r2, #20
 80084d2:	2b1e      	cmp	r3, #30
 80084d4:	bfda      	itte	le
 80084d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80084da:	40da      	lsrle	r2, r3
 80084dc:	2201      	movgt	r2, #1
 80084de:	2300      	movs	r3, #0
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	ec41 0b10 	vmov	d0, r0, r1
 80084e8:	b002      	add	sp, #8
 80084ea:	4770      	bx	lr
 80084ec:	7ff00000 	.word	0x7ff00000

080084f0 <__b2d>:
 80084f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f4:	6906      	ldr	r6, [r0, #16]
 80084f6:	f100 0814 	add.w	r8, r0, #20
 80084fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80084fe:	1f37      	subs	r7, r6, #4
 8008500:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008504:	4610      	mov	r0, r2
 8008506:	f7ff fd53 	bl	8007fb0 <__hi0bits>
 800850a:	f1c0 0320 	rsb	r3, r0, #32
 800850e:	280a      	cmp	r0, #10
 8008510:	600b      	str	r3, [r1, #0]
 8008512:	491b      	ldr	r1, [pc, #108]	@ (8008580 <__b2d+0x90>)
 8008514:	dc15      	bgt.n	8008542 <__b2d+0x52>
 8008516:	f1c0 0c0b 	rsb	ip, r0, #11
 800851a:	fa22 f30c 	lsr.w	r3, r2, ip
 800851e:	45b8      	cmp	r8, r7
 8008520:	ea43 0501 	orr.w	r5, r3, r1
 8008524:	bf34      	ite	cc
 8008526:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800852a:	2300      	movcs	r3, #0
 800852c:	3015      	adds	r0, #21
 800852e:	fa02 f000 	lsl.w	r0, r2, r0
 8008532:	fa23 f30c 	lsr.w	r3, r3, ip
 8008536:	4303      	orrs	r3, r0
 8008538:	461c      	mov	r4, r3
 800853a:	ec45 4b10 	vmov	d0, r4, r5
 800853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008542:	45b8      	cmp	r8, r7
 8008544:	bf3a      	itte	cc
 8008546:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800854a:	f1a6 0708 	subcc.w	r7, r6, #8
 800854e:	2300      	movcs	r3, #0
 8008550:	380b      	subs	r0, #11
 8008552:	d012      	beq.n	800857a <__b2d+0x8a>
 8008554:	f1c0 0120 	rsb	r1, r0, #32
 8008558:	fa23 f401 	lsr.w	r4, r3, r1
 800855c:	4082      	lsls	r2, r0
 800855e:	4322      	orrs	r2, r4
 8008560:	4547      	cmp	r7, r8
 8008562:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008566:	bf8c      	ite	hi
 8008568:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800856c:	2200      	movls	r2, #0
 800856e:	4083      	lsls	r3, r0
 8008570:	40ca      	lsrs	r2, r1
 8008572:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008576:	4313      	orrs	r3, r2
 8008578:	e7de      	b.n	8008538 <__b2d+0x48>
 800857a:	ea42 0501 	orr.w	r5, r2, r1
 800857e:	e7db      	b.n	8008538 <__b2d+0x48>
 8008580:	3ff00000 	.word	0x3ff00000

08008584 <__d2b>:
 8008584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008588:	460f      	mov	r7, r1
 800858a:	2101      	movs	r1, #1
 800858c:	ec59 8b10 	vmov	r8, r9, d0
 8008590:	4616      	mov	r6, r2
 8008592:	f7ff fc1b 	bl	8007dcc <_Balloc>
 8008596:	4604      	mov	r4, r0
 8008598:	b930      	cbnz	r0, 80085a8 <__d2b+0x24>
 800859a:	4602      	mov	r2, r0
 800859c:	4b23      	ldr	r3, [pc, #140]	@ (800862c <__d2b+0xa8>)
 800859e:	4824      	ldr	r0, [pc, #144]	@ (8008630 <__d2b+0xac>)
 80085a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085a4:	f000 f962 	bl	800886c <__assert_func>
 80085a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085b0:	b10d      	cbz	r5, 80085b6 <__d2b+0x32>
 80085b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	f1b8 0300 	subs.w	r3, r8, #0
 80085bc:	d023      	beq.n	8008606 <__d2b+0x82>
 80085be:	4668      	mov	r0, sp
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	f7ff fd14 	bl	8007fee <__lo0bits>
 80085c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085ca:	b1d0      	cbz	r0, 8008602 <__d2b+0x7e>
 80085cc:	f1c0 0320 	rsb	r3, r0, #32
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	430b      	orrs	r3, r1
 80085d6:	40c2      	lsrs	r2, r0
 80085d8:	6163      	str	r3, [r4, #20]
 80085da:	9201      	str	r2, [sp, #4]
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	61a3      	str	r3, [r4, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bf0c      	ite	eq
 80085e4:	2201      	moveq	r2, #1
 80085e6:	2202      	movne	r2, #2
 80085e8:	6122      	str	r2, [r4, #16]
 80085ea:	b1a5      	cbz	r5, 8008616 <__d2b+0x92>
 80085ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085f0:	4405      	add	r5, r0
 80085f2:	603d      	str	r5, [r7, #0]
 80085f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085f8:	6030      	str	r0, [r6, #0]
 80085fa:	4620      	mov	r0, r4
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008602:	6161      	str	r1, [r4, #20]
 8008604:	e7ea      	b.n	80085dc <__d2b+0x58>
 8008606:	a801      	add	r0, sp, #4
 8008608:	f7ff fcf1 	bl	8007fee <__lo0bits>
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	6163      	str	r3, [r4, #20]
 8008610:	3020      	adds	r0, #32
 8008612:	2201      	movs	r2, #1
 8008614:	e7e8      	b.n	80085e8 <__d2b+0x64>
 8008616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800861a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800861e:	6038      	str	r0, [r7, #0]
 8008620:	6918      	ldr	r0, [r3, #16]
 8008622:	f7ff fcc5 	bl	8007fb0 <__hi0bits>
 8008626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800862a:	e7e5      	b.n	80085f8 <__d2b+0x74>
 800862c:	0800925a 	.word	0x0800925a
 8008630:	080092e2 	.word	0x080092e2

08008634 <__ratio>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	b085      	sub	sp, #20
 800863a:	e9cd 1000 	strd	r1, r0, [sp]
 800863e:	a902      	add	r1, sp, #8
 8008640:	f7ff ff56 	bl	80084f0 <__b2d>
 8008644:	9800      	ldr	r0, [sp, #0]
 8008646:	a903      	add	r1, sp, #12
 8008648:	ec55 4b10 	vmov	r4, r5, d0
 800864c:	f7ff ff50 	bl	80084f0 <__b2d>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	6919      	ldr	r1, [r3, #16]
 8008654:	9b00      	ldr	r3, [sp, #0]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	1ac9      	subs	r1, r1, r3
 800865a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	ec5b ab10 	vmov	sl, fp, d0
 8008664:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008668:	2b00      	cmp	r3, #0
 800866a:	bfce      	itee	gt
 800866c:	462a      	movgt	r2, r5
 800866e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008672:	465a      	movle	r2, fp
 8008674:	462f      	mov	r7, r5
 8008676:	46d9      	mov	r9, fp
 8008678:	bfcc      	ite	gt
 800867a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800867e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008682:	464b      	mov	r3, r9
 8008684:	4652      	mov	r2, sl
 8008686:	4620      	mov	r0, r4
 8008688:	4639      	mov	r1, r7
 800868a:	f7f8 f8ef 	bl	800086c <__aeabi_ddiv>
 800868e:	ec41 0b10 	vmov	d0, r0, r1
 8008692:	b005      	add	sp, #20
 8008694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008698 <__copybits>:
 8008698:	3901      	subs	r1, #1
 800869a:	b570      	push	{r4, r5, r6, lr}
 800869c:	1149      	asrs	r1, r1, #5
 800869e:	6914      	ldr	r4, [r2, #16]
 80086a0:	3101      	adds	r1, #1
 80086a2:	f102 0314 	add.w	r3, r2, #20
 80086a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80086aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80086ae:	1f05      	subs	r5, r0, #4
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d30c      	bcc.n	80086ce <__copybits+0x36>
 80086b4:	1aa3      	subs	r3, r4, r2
 80086b6:	3b11      	subs	r3, #17
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	3211      	adds	r2, #17
 80086be:	42a2      	cmp	r2, r4
 80086c0:	bf88      	it	hi
 80086c2:	2300      	movhi	r3, #0
 80086c4:	4418      	add	r0, r3
 80086c6:	2300      	movs	r3, #0
 80086c8:	4288      	cmp	r0, r1
 80086ca:	d305      	bcc.n	80086d8 <__copybits+0x40>
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80086d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80086d6:	e7eb      	b.n	80086b0 <__copybits+0x18>
 80086d8:	f840 3b04 	str.w	r3, [r0], #4
 80086dc:	e7f4      	b.n	80086c8 <__copybits+0x30>

080086de <__any_on>:
 80086de:	f100 0214 	add.w	r2, r0, #20
 80086e2:	6900      	ldr	r0, [r0, #16]
 80086e4:	114b      	asrs	r3, r1, #5
 80086e6:	4298      	cmp	r0, r3
 80086e8:	b510      	push	{r4, lr}
 80086ea:	db11      	blt.n	8008710 <__any_on+0x32>
 80086ec:	dd0a      	ble.n	8008704 <__any_on+0x26>
 80086ee:	f011 011f 	ands.w	r1, r1, #31
 80086f2:	d007      	beq.n	8008704 <__any_on+0x26>
 80086f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086f8:	fa24 f001 	lsr.w	r0, r4, r1
 80086fc:	fa00 f101 	lsl.w	r1, r0, r1
 8008700:	428c      	cmp	r4, r1
 8008702:	d10b      	bne.n	800871c <__any_on+0x3e>
 8008704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008708:	4293      	cmp	r3, r2
 800870a:	d803      	bhi.n	8008714 <__any_on+0x36>
 800870c:	2000      	movs	r0, #0
 800870e:	bd10      	pop	{r4, pc}
 8008710:	4603      	mov	r3, r0
 8008712:	e7f7      	b.n	8008704 <__any_on+0x26>
 8008714:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008718:	2900      	cmp	r1, #0
 800871a:	d0f5      	beq.n	8008708 <__any_on+0x2a>
 800871c:	2001      	movs	r0, #1
 800871e:	e7f6      	b.n	800870e <__any_on+0x30>

08008720 <__sread>:
 8008720:	b510      	push	{r4, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	f000 f85c 	bl	80087e4 <_read_r>
 800872c:	2800      	cmp	r0, #0
 800872e:	bfab      	itete	ge
 8008730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008732:	89a3      	ldrhlt	r3, [r4, #12]
 8008734:	181b      	addge	r3, r3, r0
 8008736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800873a:	bfac      	ite	ge
 800873c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800873e:	81a3      	strhlt	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__swrite>:
 8008742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	461f      	mov	r7, r3
 8008748:	898b      	ldrh	r3, [r1, #12]
 800874a:	05db      	lsls	r3, r3, #23
 800874c:	4605      	mov	r5, r0
 800874e:	460c      	mov	r4, r1
 8008750:	4616      	mov	r6, r2
 8008752:	d505      	bpl.n	8008760 <__swrite+0x1e>
 8008754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008758:	2302      	movs	r3, #2
 800875a:	2200      	movs	r2, #0
 800875c:	f000 f830 	bl	80087c0 <_lseek_r>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	4628      	mov	r0, r5
 8008772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008776:	f000 b857 	b.w	8008828 <_write_r>

0800877a <__sseek>:
 800877a:	b510      	push	{r4, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 f81d 	bl	80087c0 <_lseek_r>
 8008786:	1c43      	adds	r3, r0, #1
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	bf15      	itete	ne
 800878c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800878e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008796:	81a3      	strheq	r3, [r4, #12]
 8008798:	bf18      	it	ne
 800879a:	81a3      	strhne	r3, [r4, #12]
 800879c:	bd10      	pop	{r4, pc}

0800879e <__sclose>:
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 b853 	b.w	800884c <_close_r>

080087a6 <__ascii_wctomb>:
 80087a6:	4603      	mov	r3, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	b141      	cbz	r1, 80087be <__ascii_wctomb+0x18>
 80087ac:	2aff      	cmp	r2, #255	@ 0xff
 80087ae:	d904      	bls.n	80087ba <__ascii_wctomb+0x14>
 80087b0:	228a      	movs	r2, #138	@ 0x8a
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087b8:	4770      	bx	lr
 80087ba:	700a      	strb	r2, [r1, #0]
 80087bc:	2001      	movs	r0, #1
 80087be:	4770      	bx	lr

080087c0 <_lseek_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	@ (80087e0 <_lseek_r+0x20>)
 80087c4:	4604      	mov	r4, r0
 80087c6:	4608      	mov	r0, r1
 80087c8:	4611      	mov	r1, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f7f9 fe13 	bl	80023fa <_lseek>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_lseek_r+0x1e>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_lseek_r+0x1e>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	20000640 	.word	0x20000640

080087e4 <_read_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	@ (8008804 <_read_r+0x20>)
 80087e8:	4604      	mov	r4, r0
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	602a      	str	r2, [r5, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f7f9 fda1 	bl	800233a <_read>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_read_r+0x1e>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_read_r+0x1e>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	20000640 	.word	0x20000640

08008808 <_sbrk_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d06      	ldr	r5, [pc, #24]	@ (8008824 <_sbrk_r+0x1c>)
 800880c:	2300      	movs	r3, #0
 800880e:	4604      	mov	r4, r0
 8008810:	4608      	mov	r0, r1
 8008812:	602b      	str	r3, [r5, #0]
 8008814:	f7f9 fdfe 	bl	8002414 <_sbrk>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_sbrk_r+0x1a>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_sbrk_r+0x1a>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000640 	.word	0x20000640

08008828 <_write_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4d07      	ldr	r5, [pc, #28]	@ (8008848 <_write_r+0x20>)
 800882c:	4604      	mov	r4, r0
 800882e:	4608      	mov	r0, r1
 8008830:	4611      	mov	r1, r2
 8008832:	2200      	movs	r2, #0
 8008834:	602a      	str	r2, [r5, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f7f9 fd9c 	bl	8002374 <_write>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_write_r+0x1e>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_write_r+0x1e>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	20000640 	.word	0x20000640

0800884c <_close_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4d06      	ldr	r5, [pc, #24]	@ (8008868 <_close_r+0x1c>)
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	f7f9 fda8 	bl	80023ac <_close>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d102      	bne.n	8008866 <_close_r+0x1a>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	b103      	cbz	r3, 8008866 <_close_r+0x1a>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	20000640 	.word	0x20000640

0800886c <__assert_func>:
 800886c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800886e:	4614      	mov	r4, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <__assert_func+0x2c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4605      	mov	r5, r0
 8008878:	68d8      	ldr	r0, [r3, #12]
 800887a:	b14c      	cbz	r4, 8008890 <__assert_func+0x24>
 800887c:	4b07      	ldr	r3, [pc, #28]	@ (800889c <__assert_func+0x30>)
 800887e:	9100      	str	r1, [sp, #0]
 8008880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008884:	4906      	ldr	r1, [pc, #24]	@ (80088a0 <__assert_func+0x34>)
 8008886:	462b      	mov	r3, r5
 8008888:	f000 f874 	bl	8008974 <fiprintf>
 800888c:	f000 f884 	bl	8008998 <abort>
 8008890:	4b04      	ldr	r3, [pc, #16]	@ (80088a4 <__assert_func+0x38>)
 8008892:	461c      	mov	r4, r3
 8008894:	e7f3      	b.n	800887e <__assert_func+0x12>
 8008896:	bf00      	nop
 8008898:	200001b4 	.word	0x200001b4
 800889c:	0800933b 	.word	0x0800933b
 80088a0:	08009348 	.word	0x08009348
 80088a4:	08009376 	.word	0x08009376

080088a8 <_calloc_r>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	fba1 5402 	umull	r5, r4, r1, r2
 80088ae:	b934      	cbnz	r4, 80088be <_calloc_r+0x16>
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7ff f941 	bl	8007b38 <_malloc_r>
 80088b6:	4606      	mov	r6, r0
 80088b8:	b928      	cbnz	r0, 80088c6 <_calloc_r+0x1e>
 80088ba:	4630      	mov	r0, r6
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
 80088be:	220c      	movs	r2, #12
 80088c0:	6002      	str	r2, [r0, #0]
 80088c2:	2600      	movs	r6, #0
 80088c4:	e7f9      	b.n	80088ba <_calloc_r+0x12>
 80088c6:	462a      	mov	r2, r5
 80088c8:	4621      	mov	r1, r4
 80088ca:	f7fe fd6b 	bl	80073a4 <memset>
 80088ce:	e7f4      	b.n	80088ba <_calloc_r+0x12>

080088d0 <_free_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4605      	mov	r5, r0
 80088d4:	2900      	cmp	r1, #0
 80088d6:	d041      	beq.n	800895c <_free_r+0x8c>
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f0c      	subs	r4, r1, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfb8      	it	lt
 80088e2:	18e4      	addlt	r4, r4, r3
 80088e4:	f7ff fa66 	bl	8007db4 <__malloc_lock>
 80088e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008960 <_free_r+0x90>)
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	b933      	cbnz	r3, 80088fc <_free_r+0x2c>
 80088ee:	6063      	str	r3, [r4, #4]
 80088f0:	6014      	str	r4, [r2, #0]
 80088f2:	4628      	mov	r0, r5
 80088f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f8:	f7ff ba62 	b.w	8007dc0 <__malloc_unlock>
 80088fc:	42a3      	cmp	r3, r4
 80088fe:	d908      	bls.n	8008912 <_free_r+0x42>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	1821      	adds	r1, r4, r0
 8008904:	428b      	cmp	r3, r1
 8008906:	bf01      	itttt	eq
 8008908:	6819      	ldreq	r1, [r3, #0]
 800890a:	685b      	ldreq	r3, [r3, #4]
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	e7ed      	b.n	80088ee <_free_r+0x1e>
 8008912:	461a      	mov	r2, r3
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	b10b      	cbz	r3, 800891c <_free_r+0x4c>
 8008918:	42a3      	cmp	r3, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x42>
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	1850      	adds	r0, r2, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x6c>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1850      	adds	r0, r2, r1
 800892a:	4283      	cmp	r3, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	d1e0      	bne.n	80088f2 <_free_r+0x22>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	4408      	add	r0, r1
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	e7da      	b.n	80088f2 <_free_r+0x22>
 800893c:	d902      	bls.n	8008944 <_free_r+0x74>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d6      	b.n	80088f2 <_free_r+0x22>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428b      	cmp	r3, r1
 800894a:	bf04      	itt	eq
 800894c:	6819      	ldreq	r1, [r3, #0]
 800894e:	685b      	ldreq	r3, [r3, #4]
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	6054      	str	r4, [r2, #4]
 800895a:	e7ca      	b.n	80088f2 <_free_r+0x22>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	2000063c 	.word	0x2000063c

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f7ff b8e5 	b.w	8007b38 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	200001b4 	.word	0x200001b4

08008974 <fiprintf>:
 8008974:	b40e      	push	{r1, r2, r3}
 8008976:	b503      	push	{r0, r1, lr}
 8008978:	4601      	mov	r1, r0
 800897a:	ab03      	add	r3, sp, #12
 800897c:	4805      	ldr	r0, [pc, #20]	@ (8008994 <fiprintf+0x20>)
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	f000 f837 	bl	80089f8 <_vfiprintf_r>
 800898a:	b002      	add	sp, #8
 800898c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008990:	b003      	add	sp, #12
 8008992:	4770      	bx	lr
 8008994:	200001b4 	.word	0x200001b4

08008998 <abort>:
 8008998:	b508      	push	{r3, lr}
 800899a:	2006      	movs	r0, #6
 800899c:	f000 fbee 	bl	800917c <raise>
 80089a0:	2001      	movs	r0, #1
 80089a2:	f7f9 fcbf 	bl	8002324 <_exit>

080089a6 <__sfputc_r>:
 80089a6:	6893      	ldr	r3, [r2, #8]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	b410      	push	{r4}
 80089ae:	6093      	str	r3, [r2, #8]
 80089b0:	da08      	bge.n	80089c4 <__sfputc_r+0x1e>
 80089b2:	6994      	ldr	r4, [r2, #24]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	db01      	blt.n	80089bc <__sfputc_r+0x16>
 80089b8:	290a      	cmp	r1, #10
 80089ba:	d103      	bne.n	80089c4 <__sfputc_r+0x1e>
 80089bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c0:	f000 babe 	b.w	8008f40 <__swbuf_r>
 80089c4:	6813      	ldr	r3, [r2, #0]
 80089c6:	1c58      	adds	r0, r3, #1
 80089c8:	6010      	str	r0, [r2, #0]
 80089ca:	7019      	strb	r1, [r3, #0]
 80089cc:	4608      	mov	r0, r1
 80089ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <__sfputs_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	4614      	mov	r4, r2
 80089dc:	18d5      	adds	r5, r2, r3
 80089de:	42ac      	cmp	r4, r5
 80089e0:	d101      	bne.n	80089e6 <__sfputs_r+0x12>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e007      	b.n	80089f6 <__sfputs_r+0x22>
 80089e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ea:	463a      	mov	r2, r7
 80089ec:	4630      	mov	r0, r6
 80089ee:	f7ff ffda 	bl	80089a6 <__sfputc_r>
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	d1f3      	bne.n	80089de <__sfputs_r+0xa>
 80089f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089f8 <_vfiprintf_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	460d      	mov	r5, r1
 80089fe:	b09d      	sub	sp, #116	@ 0x74
 8008a00:	4614      	mov	r4, r2
 8008a02:	4698      	mov	r8, r3
 8008a04:	4606      	mov	r6, r0
 8008a06:	b118      	cbz	r0, 8008a10 <_vfiprintf_r+0x18>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <_vfiprintf_r+0x18>
 8008a0c:	f7fd fe86 	bl	800671c <__sinit>
 8008a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a12:	07d9      	lsls	r1, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a1e:	f7fe fd14 	bl	800744a <__retarget_lock_acquire_recursive>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	d501      	bpl.n	8008a2c <_vfiprintf_r+0x34>
 8008a28:	692b      	ldr	r3, [r5, #16]
 8008a2a:	b99b      	cbnz	r3, 8008a54 <_vfiprintf_r+0x5c>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 fac4 	bl	8008fbc <__swsetup_r>
 8008a34:	b170      	cbz	r0, 8008a54 <_vfiprintf_r+0x5c>
 8008a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a38:	07dc      	lsls	r4, r3, #31
 8008a3a:	d504      	bpl.n	8008a46 <_vfiprintf_r+0x4e>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a40:	b01d      	add	sp, #116	@ 0x74
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d4f7      	bmi.n	8008a3c <_vfiprintf_r+0x44>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a4e:	f7fe fcfd 	bl	800744c <__retarget_lock_release_recursive>
 8008a52:	e7f3      	b.n	8008a3c <_vfiprintf_r+0x44>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a62:	2330      	movs	r3, #48	@ 0x30
 8008a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c14 <_vfiprintf_r+0x21c>
 8008a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a6c:	f04f 0901 	mov.w	r9, #1
 8008a70:	4623      	mov	r3, r4
 8008a72:	469a      	mov	sl, r3
 8008a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a78:	b10a      	cbz	r2, 8008a7e <_vfiprintf_r+0x86>
 8008a7a:	2a25      	cmp	r2, #37	@ 0x25
 8008a7c:	d1f9      	bne.n	8008a72 <_vfiprintf_r+0x7a>
 8008a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a82:	d00b      	beq.n	8008a9c <_vfiprintf_r+0xa4>
 8008a84:	465b      	mov	r3, fp
 8008a86:	4622      	mov	r2, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffa2 	bl	80089d4 <__sfputs_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	f000 80a7 	beq.w	8008be4 <_vfiprintf_r+0x1ec>
 8008a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a98:	445a      	add	r2, fp
 8008a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 809f 	beq.w	8008be4 <_vfiprintf_r+0x1ec>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	f10a 0a01 	add.w	sl, sl, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4853      	ldr	r0, [pc, #332]	@ (8008c14 <_vfiprintf_r+0x21c>)
 8008ac8:	f7f7 fb9a 	bl	8000200 <memchr>
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	b9d8      	cbnz	r0, 8008b08 <_vfiprintf_r+0x110>
 8008ad0:	06d1      	lsls	r1, r2, #27
 8008ad2:	bf44      	itt	mi
 8008ad4:	2320      	movmi	r3, #32
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ada:	0713      	lsls	r3, r2, #28
 8008adc:	bf44      	itt	mi
 8008ade:	232b      	movmi	r3, #43	@ 0x2b
 8008ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aea:	d015      	beq.n	8008b18 <_vfiprintf_r+0x120>
 8008aec:	9a07      	ldr	r2, [sp, #28]
 8008aee:	4654      	mov	r4, sl
 8008af0:	2000      	movs	r0, #0
 8008af2:	f04f 0c0a 	mov.w	ip, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afc:	3b30      	subs	r3, #48	@ 0x30
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d94b      	bls.n	8008b9a <_vfiprintf_r+0x1a2>
 8008b02:	b1b0      	cbz	r0, 8008b32 <_vfiprintf_r+0x13a>
 8008b04:	9207      	str	r2, [sp, #28]
 8008b06:	e014      	b.n	8008b32 <_vfiprintf_r+0x13a>
 8008b08:	eba0 0308 	sub.w	r3, r0, r8
 8008b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	46a2      	mov	sl, r4
 8008b16:	e7d2      	b.n	8008abe <_vfiprintf_r+0xc6>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d19      	adds	r1, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfbb      	ittet	lt
 8008b24:	425b      	neglt	r3, r3
 8008b26:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2a:	9307      	strge	r3, [sp, #28]
 8008b2c:	9307      	strlt	r3, [sp, #28]
 8008b2e:	bfb8      	it	lt
 8008b30:	9204      	strlt	r2, [sp, #16]
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b36:	d10a      	bne.n	8008b4e <_vfiprintf_r+0x156>
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3c:	d132      	bne.n	8008ba4 <_vfiprintf_r+0x1ac>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9203      	str	r2, [sp, #12]
 8008b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b4a:	3402      	adds	r4, #2
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c24 <_vfiprintf_r+0x22c>
 8008b52:	7821      	ldrb	r1, [r4, #0]
 8008b54:	2203      	movs	r2, #3
 8008b56:	4650      	mov	r0, sl
 8008b58:	f7f7 fb52 	bl	8000200 <memchr>
 8008b5c:	b138      	cbz	r0, 8008b6e <_vfiprintf_r+0x176>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	eba0 000a 	sub.w	r0, r0, sl
 8008b64:	2240      	movs	r2, #64	@ 0x40
 8008b66:	4082      	lsls	r2, r0
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	3401      	adds	r4, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4829      	ldr	r0, [pc, #164]	@ (8008c18 <_vfiprintf_r+0x220>)
 8008b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b78:	2206      	movs	r2, #6
 8008b7a:	f7f7 fb41 	bl	8000200 <memchr>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d03f      	beq.n	8008c02 <_vfiprintf_r+0x20a>
 8008b82:	4b26      	ldr	r3, [pc, #152]	@ (8008c1c <_vfiprintf_r+0x224>)
 8008b84:	bb1b      	cbnz	r3, 8008bce <_vfiprintf_r+0x1d6>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	3307      	adds	r3, #7
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	3308      	adds	r3, #8
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b94:	443b      	add	r3, r7
 8008b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b98:	e76a      	b.n	8008a70 <_vfiprintf_r+0x78>
 8008b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	e7a8      	b.n	8008af6 <_vfiprintf_r+0xfe>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	3401      	adds	r4, #1
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	4619      	mov	r1, r3
 8008bac:	f04f 0c0a 	mov.w	ip, #10
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb6:	3a30      	subs	r2, #48	@ 0x30
 8008bb8:	2a09      	cmp	r2, #9
 8008bba:	d903      	bls.n	8008bc4 <_vfiprintf_r+0x1cc>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0c6      	beq.n	8008b4e <_vfiprintf_r+0x156>
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	e7c4      	b.n	8008b4e <_vfiprintf_r+0x156>
 8008bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc8:	4604      	mov	r4, r0
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e7f0      	b.n	8008bb0 <_vfiprintf_r+0x1b8>
 8008bce:	ab03      	add	r3, sp, #12
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <_vfiprintf_r+0x228>)
 8008bd6:	a904      	add	r1, sp, #16
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f3af 8000 	nop.w
 8008bde:	4607      	mov	r7, r0
 8008be0:	1c78      	adds	r0, r7, #1
 8008be2:	d1d6      	bne.n	8008b92 <_vfiprintf_r+0x19a>
 8008be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008be6:	07d9      	lsls	r1, r3, #31
 8008be8:	d405      	bmi.n	8008bf6 <_vfiprintf_r+0x1fe>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	059a      	lsls	r2, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_vfiprintf_r+0x1fe>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bf2:	f7fe fc2b 	bl	800744c <__retarget_lock_release_recursive>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	065b      	lsls	r3, r3, #25
 8008bfa:	f53f af1f 	bmi.w	8008a3c <_vfiprintf_r+0x44>
 8008bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c00:	e71e      	b.n	8008a40 <_vfiprintf_r+0x48>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4b05      	ldr	r3, [pc, #20]	@ (8008c20 <_vfiprintf_r+0x228>)
 8008c0a:	a904      	add	r1, sp, #16
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f879 	bl	8008d04 <_printf_i>
 8008c12:	e7e4      	b.n	8008bde <_vfiprintf_r+0x1e6>
 8008c14:	08009377 	.word	0x08009377
 8008c18:	08009381 	.word	0x08009381
 8008c1c:	00000000 	.word	0x00000000
 8008c20:	080089d5 	.word	0x080089d5
 8008c24:	0800937d 	.word	0x0800937d

08008c28 <_printf_common>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	4698      	mov	r8, r3
 8008c30:	688a      	ldr	r2, [r1, #8]
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bfb8      	it	lt
 8008c3c:	4613      	movlt	r3, r2
 8008c3e:	6033      	str	r3, [r6, #0]
 8008c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c44:	4607      	mov	r7, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b10a      	cbz	r2, 8008c4e <_printf_common+0x26>
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	6033      	str	r3, [r6, #0]
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	0699      	lsls	r1, r3, #26
 8008c52:	bf42      	ittt	mi
 8008c54:	6833      	ldrmi	r3, [r6, #0]
 8008c56:	3302      	addmi	r3, #2
 8008c58:	6033      	strmi	r3, [r6, #0]
 8008c5a:	6825      	ldr	r5, [r4, #0]
 8008c5c:	f015 0506 	ands.w	r5, r5, #6
 8008c60:	d106      	bne.n	8008c70 <_printf_common+0x48>
 8008c62:	f104 0a19 	add.w	sl, r4, #25
 8008c66:	68e3      	ldr	r3, [r4, #12]
 8008c68:	6832      	ldr	r2, [r6, #0]
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	42ab      	cmp	r3, r5
 8008c6e:	dc26      	bgt.n	8008cbe <_printf_common+0x96>
 8008c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	3b00      	subs	r3, #0
 8008c78:	bf18      	it	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	0692      	lsls	r2, r2, #26
 8008c7e:	d42b      	bmi.n	8008cd8 <_printf_common+0xb0>
 8008c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c84:	4641      	mov	r1, r8
 8008c86:	4638      	mov	r0, r7
 8008c88:	47c8      	blx	r9
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d01e      	beq.n	8008ccc <_printf_common+0xa4>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	f003 0306 	and.w	r3, r3, #6
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	bf02      	ittt	eq
 8008c9a:	68e5      	ldreq	r5, [r4, #12]
 8008c9c:	6833      	ldreq	r3, [r6, #0]
 8008c9e:	1aed      	subeq	r5, r5, r3
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	bf0c      	ite	eq
 8008ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca8:	2500      	movne	r5, #0
 8008caa:	4293      	cmp	r3, r2
 8008cac:	bfc4      	itt	gt
 8008cae:	1a9b      	subgt	r3, r3, r2
 8008cb0:	18ed      	addgt	r5, r5, r3
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	341a      	adds	r4, #26
 8008cb6:	42b5      	cmp	r5, r6
 8008cb8:	d11a      	bne.n	8008cf0 <_printf_common+0xc8>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e008      	b.n	8008cd0 <_printf_common+0xa8>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	47c8      	blx	r9
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d103      	bne.n	8008cd4 <_printf_common+0xac>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	e7c6      	b.n	8008c66 <_printf_common+0x3e>
 8008cd8:	18e1      	adds	r1, r4, r3
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	2030      	movs	r0, #48	@ 0x30
 8008cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ce2:	4422      	add	r2, r4
 8008ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cec:	3302      	adds	r3, #2
 8008cee:	e7c7      	b.n	8008c80 <_printf_common+0x58>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c8      	blx	r9
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d0e6      	beq.n	8008ccc <_printf_common+0xa4>
 8008cfe:	3601      	adds	r6, #1
 8008d00:	e7d9      	b.n	8008cb6 <_printf_common+0x8e>
	...

08008d04 <_printf_i>:
 8008d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	7e0f      	ldrb	r7, [r1, #24]
 8008d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d0c:	2f78      	cmp	r7, #120	@ 0x78
 8008d0e:	4691      	mov	r9, r2
 8008d10:	4680      	mov	r8, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	469a      	mov	sl, r3
 8008d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d1a:	d807      	bhi.n	8008d2c <_printf_i+0x28>
 8008d1c:	2f62      	cmp	r7, #98	@ 0x62
 8008d1e:	d80a      	bhi.n	8008d36 <_printf_i+0x32>
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	f000 80d1 	beq.w	8008ec8 <_printf_i+0x1c4>
 8008d26:	2f58      	cmp	r7, #88	@ 0x58
 8008d28:	f000 80b8 	beq.w	8008e9c <_printf_i+0x198>
 8008d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d34:	e03a      	b.n	8008dac <_printf_i+0xa8>
 8008d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d3a:	2b15      	cmp	r3, #21
 8008d3c:	d8f6      	bhi.n	8008d2c <_printf_i+0x28>
 8008d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d44 <_printf_i+0x40>)
 8008d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008db1 	.word	0x08008db1
 8008d4c:	08008d2d 	.word	0x08008d2d
 8008d50:	08008d2d 	.word	0x08008d2d
 8008d54:	08008d2d 	.word	0x08008d2d
 8008d58:	08008d2d 	.word	0x08008d2d
 8008d5c:	08008db1 	.word	0x08008db1
 8008d60:	08008d2d 	.word	0x08008d2d
 8008d64:	08008d2d 	.word	0x08008d2d
 8008d68:	08008d2d 	.word	0x08008d2d
 8008d6c:	08008d2d 	.word	0x08008d2d
 8008d70:	08008eaf 	.word	0x08008eaf
 8008d74:	08008ddb 	.word	0x08008ddb
 8008d78:	08008e69 	.word	0x08008e69
 8008d7c:	08008d2d 	.word	0x08008d2d
 8008d80:	08008d2d 	.word	0x08008d2d
 8008d84:	08008ed1 	.word	0x08008ed1
 8008d88:	08008d2d 	.word	0x08008d2d
 8008d8c:	08008ddb 	.word	0x08008ddb
 8008d90:	08008d2d 	.word	0x08008d2d
 8008d94:	08008d2d 	.word	0x08008d2d
 8008d98:	08008e71 	.word	0x08008e71
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6032      	str	r2, [r6, #0]
 8008da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dac:	2301      	movs	r3, #1
 8008dae:	e09c      	b.n	8008eea <_printf_i+0x1e6>
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	6031      	str	r1, [r6, #0]
 8008db8:	0606      	lsls	r6, r0, #24
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0xbc>
 8008dbc:	681d      	ldr	r5, [r3, #0]
 8008dbe:	e003      	b.n	8008dc8 <_printf_i+0xc4>
 8008dc0:	0645      	lsls	r5, r0, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0xb8>
 8008dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	da03      	bge.n	8008dd4 <_printf_i+0xd0>
 8008dcc:	232d      	movs	r3, #45	@ 0x2d
 8008dce:	426d      	negs	r5, r5
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dd4:	4858      	ldr	r0, [pc, #352]	@ (8008f38 <_printf_i+0x234>)
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e011      	b.n	8008dfe <_printf_i+0xfa>
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	0608      	lsls	r0, r1, #24
 8008de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008de4:	d402      	bmi.n	8008dec <_printf_i+0xe8>
 8008de6:	0649      	lsls	r1, r1, #25
 8008de8:	bf48      	it	mi
 8008dea:	b2ad      	uxthmi	r5, r5
 8008dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dee:	4852      	ldr	r0, [pc, #328]	@ (8008f38 <_printf_i+0x234>)
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	bf14      	ite	ne
 8008df4:	230a      	movne	r3, #10
 8008df6:	2308      	moveq	r3, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dfe:	6866      	ldr	r6, [r4, #4]
 8008e00:	60a6      	str	r6, [r4, #8]
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	db05      	blt.n	8008e12 <_printf_i+0x10e>
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	432e      	orrs	r6, r5
 8008e0a:	f021 0104 	bic.w	r1, r1, #4
 8008e0e:	6021      	str	r1, [r4, #0]
 8008e10:	d04b      	beq.n	8008eaa <_printf_i+0x1a6>
 8008e12:	4616      	mov	r6, r2
 8008e14:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e18:	fb03 5711 	mls	r7, r3, r1, r5
 8008e1c:	5dc7      	ldrb	r7, [r0, r7]
 8008e1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e22:	462f      	mov	r7, r5
 8008e24:	42bb      	cmp	r3, r7
 8008e26:	460d      	mov	r5, r1
 8008e28:	d9f4      	bls.n	8008e14 <_printf_i+0x110>
 8008e2a:	2b08      	cmp	r3, #8
 8008e2c:	d10b      	bne.n	8008e46 <_printf_i+0x142>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07df      	lsls	r7, r3, #31
 8008e32:	d508      	bpl.n	8008e46 <_printf_i+0x142>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	6861      	ldr	r1, [r4, #4]
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	bfde      	ittt	le
 8008e3c:	2330      	movle	r3, #48	@ 0x30
 8008e3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e42:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e46:	1b92      	subs	r2, r2, r6
 8008e48:	6122      	str	r2, [r4, #16]
 8008e4a:	f8cd a000 	str.w	sl, [sp]
 8008e4e:	464b      	mov	r3, r9
 8008e50:	aa03      	add	r2, sp, #12
 8008e52:	4621      	mov	r1, r4
 8008e54:	4640      	mov	r0, r8
 8008e56:	f7ff fee7 	bl	8008c28 <_printf_common>
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d14a      	bne.n	8008ef4 <_printf_i+0x1f0>
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e62:	b004      	add	sp, #16
 8008e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	f043 0320 	orr.w	r3, r3, #32
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	4832      	ldr	r0, [pc, #200]	@ (8008f3c <_printf_i+0x238>)
 8008e72:	2778      	movs	r7, #120	@ 0x78
 8008e74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	6831      	ldr	r1, [r6, #0]
 8008e7c:	061f      	lsls	r7, r3, #24
 8008e7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e82:	d402      	bmi.n	8008e8a <_printf_i+0x186>
 8008e84:	065f      	lsls	r7, r3, #25
 8008e86:	bf48      	it	mi
 8008e88:	b2ad      	uxthmi	r5, r5
 8008e8a:	6031      	str	r1, [r6, #0]
 8008e8c:	07d9      	lsls	r1, r3, #31
 8008e8e:	bf44      	itt	mi
 8008e90:	f043 0320 	orrmi.w	r3, r3, #32
 8008e94:	6023      	strmi	r3, [r4, #0]
 8008e96:	b11d      	cbz	r5, 8008ea0 <_printf_i+0x19c>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	e7ad      	b.n	8008df8 <_printf_i+0xf4>
 8008e9c:	4826      	ldr	r0, [pc, #152]	@ (8008f38 <_printf_i+0x234>)
 8008e9e:	e7e9      	b.n	8008e74 <_printf_i+0x170>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	f023 0320 	bic.w	r3, r3, #32
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	e7f6      	b.n	8008e98 <_printf_i+0x194>
 8008eaa:	4616      	mov	r6, r2
 8008eac:	e7bd      	b.n	8008e2a <_printf_i+0x126>
 8008eae:	6833      	ldr	r3, [r6, #0]
 8008eb0:	6825      	ldr	r5, [r4, #0]
 8008eb2:	6961      	ldr	r1, [r4, #20]
 8008eb4:	1d18      	adds	r0, r3, #4
 8008eb6:	6030      	str	r0, [r6, #0]
 8008eb8:	062e      	lsls	r6, r5, #24
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	d501      	bpl.n	8008ec2 <_printf_i+0x1be>
 8008ebe:	6019      	str	r1, [r3, #0]
 8008ec0:	e002      	b.n	8008ec8 <_printf_i+0x1c4>
 8008ec2:	0668      	lsls	r0, r5, #25
 8008ec4:	d5fb      	bpl.n	8008ebe <_printf_i+0x1ba>
 8008ec6:	8019      	strh	r1, [r3, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	4616      	mov	r6, r2
 8008ece:	e7bc      	b.n	8008e4a <_printf_i+0x146>
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	6032      	str	r2, [r6, #0]
 8008ed6:	681e      	ldr	r6, [r3, #0]
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	2100      	movs	r1, #0
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7f7 f98f 	bl	8000200 <memchr>
 8008ee2:	b108      	cbz	r0, 8008ee8 <_printf_i+0x1e4>
 8008ee4:	1b80      	subs	r0, r0, r6
 8008ee6:	6060      	str	r0, [r4, #4]
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	2300      	movs	r3, #0
 8008eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef2:	e7aa      	b.n	8008e4a <_printf_i+0x146>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4640      	mov	r0, r8
 8008efc:	47d0      	blx	sl
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0ad      	beq.n	8008e5e <_printf_i+0x15a>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	079b      	lsls	r3, r3, #30
 8008f06:	d413      	bmi.n	8008f30 <_printf_i+0x22c>
 8008f08:	68e0      	ldr	r0, [r4, #12]
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	bfb8      	it	lt
 8008f10:	4618      	movlt	r0, r3
 8008f12:	e7a6      	b.n	8008e62 <_printf_i+0x15e>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4632      	mov	r2, r6
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	47d0      	blx	sl
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d09d      	beq.n	8008e5e <_printf_i+0x15a>
 8008f22:	3501      	adds	r5, #1
 8008f24:	68e3      	ldr	r3, [r4, #12]
 8008f26:	9903      	ldr	r1, [sp, #12]
 8008f28:	1a5b      	subs	r3, r3, r1
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	dcf2      	bgt.n	8008f14 <_printf_i+0x210>
 8008f2e:	e7eb      	b.n	8008f08 <_printf_i+0x204>
 8008f30:	2500      	movs	r5, #0
 8008f32:	f104 0619 	add.w	r6, r4, #25
 8008f36:	e7f5      	b.n	8008f24 <_printf_i+0x220>
 8008f38:	08009388 	.word	0x08009388
 8008f3c:	08009399 	.word	0x08009399

08008f40 <__swbuf_r>:
 8008f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f42:	460e      	mov	r6, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	4605      	mov	r5, r0
 8008f48:	b118      	cbz	r0, 8008f52 <__swbuf_r+0x12>
 8008f4a:	6a03      	ldr	r3, [r0, #32]
 8008f4c:	b90b      	cbnz	r3, 8008f52 <__swbuf_r+0x12>
 8008f4e:	f7fd fbe5 	bl	800671c <__sinit>
 8008f52:	69a3      	ldr	r3, [r4, #24]
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	071a      	lsls	r2, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <__swbuf_r+0x20>
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	b943      	cbnz	r3, 8008f72 <__swbuf_r+0x32>
 8008f60:	4621      	mov	r1, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f82a 	bl	8008fbc <__swsetup_r>
 8008f68:	b118      	cbz	r0, 8008f72 <__swbuf_r+0x32>
 8008f6a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008f6e:	4638      	mov	r0, r7
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	1a98      	subs	r0, r3, r2
 8008f78:	6963      	ldr	r3, [r4, #20]
 8008f7a:	b2f6      	uxtb	r6, r6
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	4637      	mov	r7, r6
 8008f80:	dc05      	bgt.n	8008f8e <__swbuf_r+0x4e>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7fe feed 	bl	8007d64 <_fflush_r>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1ed      	bne.n	8008f6a <__swbuf_r+0x2a>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	701e      	strb	r6, [r3, #0]
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d004      	beq.n	8008fae <__swbuf_r+0x6e>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d5e1      	bpl.n	8008f6e <__swbuf_r+0x2e>
 8008faa:	2e0a      	cmp	r6, #10
 8008fac:	d1df      	bne.n	8008f6e <__swbuf_r+0x2e>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f7fe fed7 	bl	8007d64 <_fflush_r>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0d9      	beq.n	8008f6e <__swbuf_r+0x2e>
 8008fba:	e7d6      	b.n	8008f6a <__swbuf_r+0x2a>

08008fbc <__swsetup_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4b29      	ldr	r3, [pc, #164]	@ (8009064 <__swsetup_r+0xa8>)
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	b118      	cbz	r0, 8008fd0 <__swsetup_r+0x14>
 8008fc8:	6a03      	ldr	r3, [r0, #32]
 8008fca:	b90b      	cbnz	r3, 8008fd0 <__swsetup_r+0x14>
 8008fcc:	f7fd fba6 	bl	800671c <__sinit>
 8008fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd4:	0719      	lsls	r1, r3, #28
 8008fd6:	d422      	bmi.n	800901e <__swsetup_r+0x62>
 8008fd8:	06da      	lsls	r2, r3, #27
 8008fda:	d407      	bmi.n	8008fec <__swsetup_r+0x30>
 8008fdc:	2209      	movs	r2, #9
 8008fde:	602a      	str	r2, [r5, #0]
 8008fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fea:	e033      	b.n	8009054 <__swsetup_r+0x98>
 8008fec:	0758      	lsls	r0, r3, #29
 8008fee:	d512      	bpl.n	8009016 <__swsetup_r+0x5a>
 8008ff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ff2:	b141      	cbz	r1, 8009006 <__swsetup_r+0x4a>
 8008ff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ff8:	4299      	cmp	r1, r3
 8008ffa:	d002      	beq.n	8009002 <__swsetup_r+0x46>
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f7ff fc67 	bl	80088d0 <_free_r>
 8009002:	2300      	movs	r3, #0
 8009004:	6363      	str	r3, [r4, #52]	@ 0x34
 8009006:	89a3      	ldrh	r3, [r4, #12]
 8009008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	2300      	movs	r3, #0
 8009010:	6063      	str	r3, [r4, #4]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f043 0308 	orr.w	r3, r3, #8
 800901c:	81a3      	strh	r3, [r4, #12]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	b94b      	cbnz	r3, 8009036 <__swsetup_r+0x7a>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902c:	d003      	beq.n	8009036 <__swsetup_r+0x7a>
 800902e:	4621      	mov	r1, r4
 8009030:	4628      	mov	r0, r5
 8009032:	f000 f83f 	bl	80090b4 <__smakebuf_r>
 8009036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903a:	f013 0201 	ands.w	r2, r3, #1
 800903e:	d00a      	beq.n	8009056 <__swsetup_r+0x9a>
 8009040:	2200      	movs	r2, #0
 8009042:	60a2      	str	r2, [r4, #8]
 8009044:	6962      	ldr	r2, [r4, #20]
 8009046:	4252      	negs	r2, r2
 8009048:	61a2      	str	r2, [r4, #24]
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	b942      	cbnz	r2, 8009060 <__swsetup_r+0xa4>
 800904e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009052:	d1c5      	bne.n	8008fe0 <__swsetup_r+0x24>
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	0799      	lsls	r1, r3, #30
 8009058:	bf58      	it	pl
 800905a:	6962      	ldrpl	r2, [r4, #20]
 800905c:	60a2      	str	r2, [r4, #8]
 800905e:	e7f4      	b.n	800904a <__swsetup_r+0x8e>
 8009060:	2000      	movs	r0, #0
 8009062:	e7f7      	b.n	8009054 <__swsetup_r+0x98>
 8009064:	200001b4 	.word	0x200001b4

08009068 <__swhatbuf_r>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	460c      	mov	r4, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	2900      	cmp	r1, #0
 8009072:	b096      	sub	sp, #88	@ 0x58
 8009074:	4615      	mov	r5, r2
 8009076:	461e      	mov	r6, r3
 8009078:	da0d      	bge.n	8009096 <__swhatbuf_r+0x2e>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009080:	f04f 0100 	mov.w	r1, #0
 8009084:	bf14      	ite	ne
 8009086:	2340      	movne	r3, #64	@ 0x40
 8009088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800908c:	2000      	movs	r0, #0
 800908e:	6031      	str	r1, [r6, #0]
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	b016      	add	sp, #88	@ 0x58
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	466a      	mov	r2, sp
 8009098:	f000 f89c 	bl	80091d4 <_fstat_r>
 800909c:	2800      	cmp	r0, #0
 800909e:	dbec      	blt.n	800907a <__swhatbuf_r+0x12>
 80090a0:	9901      	ldr	r1, [sp, #4]
 80090a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090aa:	4259      	negs	r1, r3
 80090ac:	4159      	adcs	r1, r3
 80090ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090b2:	e7eb      	b.n	800908c <__swhatbuf_r+0x24>

080090b4 <__smakebuf_r>:
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090b8:	079d      	lsls	r5, r3, #30
 80090ba:	4606      	mov	r6, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d507      	bpl.n	80090d0 <__smakebuf_r+0x1c>
 80090c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	2301      	movs	r3, #1
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	b003      	add	sp, #12
 80090ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d0:	ab01      	add	r3, sp, #4
 80090d2:	466a      	mov	r2, sp
 80090d4:	f7ff ffc8 	bl	8009068 <__swhatbuf_r>
 80090d8:	9f00      	ldr	r7, [sp, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	4639      	mov	r1, r7
 80090de:	4630      	mov	r0, r6
 80090e0:	f7fe fd2a 	bl	8007b38 <_malloc_r>
 80090e4:	b948      	cbnz	r0, 80090fa <__smakebuf_r+0x46>
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	059a      	lsls	r2, r3, #22
 80090ec:	d4ee      	bmi.n	80090cc <__smakebuf_r+0x18>
 80090ee:	f023 0303 	bic.w	r3, r3, #3
 80090f2:	f043 0302 	orr.w	r3, r3, #2
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	e7e2      	b.n	80090c0 <__smakebuf_r+0xc>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	6020      	str	r0, [r4, #0]
 80090fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800910a:	b15b      	cbz	r3, 8009124 <__smakebuf_r+0x70>
 800910c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009110:	4630      	mov	r0, r6
 8009112:	f000 f83b 	bl	800918c <_isatty_r>
 8009116:	b128      	cbz	r0, 8009124 <__smakebuf_r+0x70>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f023 0303 	bic.w	r3, r3, #3
 800911e:	f043 0301 	orr.w	r3, r3, #1
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	431d      	orrs	r5, r3
 8009128:	81a5      	strh	r5, [r4, #12]
 800912a:	e7cf      	b.n	80090cc <__smakebuf_r+0x18>

0800912c <_raise_r>:
 800912c:	291f      	cmp	r1, #31
 800912e:	b538      	push	{r3, r4, r5, lr}
 8009130:	4605      	mov	r5, r0
 8009132:	460c      	mov	r4, r1
 8009134:	d904      	bls.n	8009140 <_raise_r+0x14>
 8009136:	2316      	movs	r3, #22
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009142:	b112      	cbz	r2, 800914a <_raise_r+0x1e>
 8009144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009148:	b94b      	cbnz	r3, 800915e <_raise_r+0x32>
 800914a:	4628      	mov	r0, r5
 800914c:	f000 f840 	bl	80091d0 <_getpid_r>
 8009150:	4622      	mov	r2, r4
 8009152:	4601      	mov	r1, r0
 8009154:	4628      	mov	r0, r5
 8009156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800915a:	f000 b827 	b.w	80091ac <_kill_r>
 800915e:	2b01      	cmp	r3, #1
 8009160:	d00a      	beq.n	8009178 <_raise_r+0x4c>
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	d103      	bne.n	800916e <_raise_r+0x42>
 8009166:	2316      	movs	r3, #22
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	2001      	movs	r0, #1
 800916c:	e7e7      	b.n	800913e <_raise_r+0x12>
 800916e:	2100      	movs	r1, #0
 8009170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009174:	4620      	mov	r0, r4
 8009176:	4798      	blx	r3
 8009178:	2000      	movs	r0, #0
 800917a:	e7e0      	b.n	800913e <_raise_r+0x12>

0800917c <raise>:
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <raise+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f7ff bfd3 	b.w	800912c <_raise_r>
 8009186:	bf00      	nop
 8009188:	200001b4 	.word	0x200001b4

0800918c <_isatty_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	@ (80091a8 <_isatty_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f9 f924 	bl	80023e4 <_isatty>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_isatty_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_isatty_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000640 	.word	0x20000640

080091ac <_kill_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	@ (80091cc <_kill_r+0x20>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	602b      	str	r3, [r5, #0]
 80091ba:	f7f9 f8a3 	bl	8002304 <_kill>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d102      	bne.n	80091c8 <_kill_r+0x1c>
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	b103      	cbz	r3, 80091c8 <_kill_r+0x1c>
 80091c6:	6023      	str	r3, [r4, #0]
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	bf00      	nop
 80091cc:	20000640 	.word	0x20000640

080091d0 <_getpid_r>:
 80091d0:	f7f9 b890 	b.w	80022f4 <_getpid>

080091d4 <_fstat_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d07      	ldr	r5, [pc, #28]	@ (80091f4 <_fstat_r+0x20>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	4611      	mov	r1, r2
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	f7f9 f8ef 	bl	80023c4 <_fstat>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d102      	bne.n	80091f0 <_fstat_r+0x1c>
 80091ea:	682b      	ldr	r3, [r5, #0]
 80091ec:	b103      	cbz	r3, 80091f0 <_fstat_r+0x1c>
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	bd38      	pop	{r3, r4, r5, pc}
 80091f2:	bf00      	nop
 80091f4:	20000640 	.word	0x20000640

080091f8 <_init>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr

08009204 <_fini>:
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	bf00      	nop
 8009208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920a:	bc08      	pop	{r3}
 800920c:	469e      	mov	lr, r3
 800920e:	4770      	bx	lr
