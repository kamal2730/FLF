
FLF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009588  08009588  0000a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a8  080099a8  0000b224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099a8  080099a8  0000a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b0  080099b0  0000b224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  0000a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  080099b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000224  08009bdc  0000b224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08009bdc  0000b62c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc4c  00000000  00000000  0000b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002510  00000000  00000000  0001aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b99  00000000  00000000  0001e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019216  00000000  00000000  0001ee21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111a4  00000000  00000000  00038037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dd1e  00000000  00000000  000491db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d8  00000000  00000000  000e6f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ec114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800956c 	.word	0x0800956c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800956c 	.word	0x0800956c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c50:	f000 b9be 	b.w	8000fd0 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f83c 	bl	8000cd8 <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_d2lz>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	f7ff ff49 	bl	8000b0c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x1c>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fcbf 	bl	8000628 <__aeabi_dmul>
 8000caa:	f7ff ff57 	bl	8000b5c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc40 	bl	8000534 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fcb6 	bl	8000628 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff faf8 	bl	80002b8 <__aeabi_dsub>
 8000cc8:	f7ff ff48 	bl	8000b5c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <setMotorSpeed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setMotorSpeed(uint8_t motor, int32_t speed) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
    uint16_t pwm = abs(speed);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bfb8      	it	lt
 8000fe6:	425b      	neglt	r3, r3
 8000fe8:	81fb      	strh	r3, [r7, #14]
    if (pwm > 200) pwm = 200;  // Limit max speed
 8000fea:	89fb      	ldrh	r3, [r7, #14]
 8000fec:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fee:	d901      	bls.n	8000ff4 <setMotorSpeed+0x20>
 8000ff0:	23c8      	movs	r3, #200	@ 0xc8
 8000ff2:	81fb      	strh	r3, [r7, #14]

    if (motor == 0) {  // Left motor
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d110      	bne.n	800101c <setMotorSpeed+0x48>
        if (speed > 0) {
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd06      	ble.n	800100e <setMotorSpeed+0x3a>
            TIM1->CCR1 = pwm;
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <setMotorSpeed+0x80>)
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM1->CCR2 = 0;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <setMotorSpeed+0x80>)
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	@ 0x38
        } else {
            TIM2->CCR1 = 0;
            TIM3->CCR1 = pwm;
        }
    }
}
 800100c:	e01b      	b.n	8001046 <setMotorSpeed+0x72>
            TIM1->CCR1 = 0;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <setMotorSpeed+0x80>)
 8001010:	2200      	movs	r2, #0
 8001012:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM1->CCR2 = pwm;
 8001014:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <setMotorSpeed+0x80>)
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800101a:	e014      	b.n	8001046 <setMotorSpeed+0x72>
    else if (motor == 1) {  // Right motor
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d111      	bne.n	8001046 <setMotorSpeed+0x72>
        if (speed > 0) {
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dd07      	ble.n	8001038 <setMotorSpeed+0x64>
            TIM2->CCR1 = pwm;
 8001028:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM3->CCR1 = 0;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <setMotorSpeed+0x84>)
 8001032:	2200      	movs	r2, #0
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001036:	e006      	b.n	8001046 <setMotorSpeed+0x72>
            TIM2->CCR1 = 0;
 8001038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM3->CCR1 = pwm;
 8001040:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <setMotorSpeed+0x84>)
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000
 8001058:	40000400 	.word	0x40000400

0800105c <line_data>:
float line_data(void) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	uint32_t weighted_sum = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
	uint32_t onLine = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < 8; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	e018      	b.n	80010a6 <line_data+0x4a>
        if (adc_buffer[i] > thresh[i]) {
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <line_data+0x88>)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107c:	491a      	ldr	r1, [pc, #104]	@ (80010e8 <line_data+0x8c>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	d90b      	bls.n	80010a0 <line_data+0x44>
            weighted_sum += sensorWeight[i];
 8001088:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <line_data+0x90>)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
            sum += 1;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
            onLine = 1;
 800109c:	2301      	movs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 8; i++) {
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b07      	cmp	r3, #7
 80010aa:	dde3      	ble.n	8001074 <line_data+0x18>
        }
    }

    if (!onLine) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <line_data+0x5c>
        return 255;  // Line lost condition
 80010b2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010f0 <line_data+0x94>
 80010b6:	e00b      	b.n	80010d0 <line_data+0x74>
    }

    return (float)weighted_sum / (float)sum;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80010d0:	eef0 7a66 	vmov.f32	s15, s13
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000468 	.word	0x20000468
 80010e8:	20000020 	.word	0x20000020
 80010ec:	20000000 	.word	0x20000000
 80010f0:	437f0000 	.word	0x437f0000

080010f4 <setPIDParameter>:

void setPIDParameter(char *input) {
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b08f      	sub	sp, #60	@ 0x3c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    char *ptr = input;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34

    while (*ptr != '\0') {
 8001100:	e0e2      	b.n	80012c8 <setPIDParameter+0x1d4>
        char type = *ptr;
 8001102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        ptr++;
 800110a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110c:	3301      	adds	r3, #1
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34

        char valueStr[10] = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	811a      	strh	r2, [r3, #8]
        int i = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30

        while (*ptr != 'P' && *ptr != 'p' && *ptr != 'I' && *ptr != 'i' && *ptr != 'D' && *ptr != 'd' && *ptr != 'T' && *ptr != 't' && *ptr != '\0') {
 8001120:	e00a      	b.n	8001138 <setPIDParameter+0x44>
            valueStr[i++] = *ptr++;
 8001122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001124:	1c53      	adds	r3, r2, #1
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
 8001128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112a:	1c59      	adds	r1, r3, #1
 800112c:	6339      	str	r1, [r7, #48]	@ 0x30
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	3338      	adds	r3, #56	@ 0x38
 8001132:	443b      	add	r3, r7
 8001134:	f803 2c30 	strb.w	r2, [r3, #-48]
        while (*ptr != 'P' && *ptr != 'p' && *ptr != 'I' && *ptr != 'i' && *ptr != 'D' && *ptr != 'd' && *ptr != 'T' && *ptr != 't' && *ptr != '\0') {
 8001138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b50      	cmp	r3, #80	@ 0x50
 800113e:	d01f      	beq.n	8001180 <setPIDParameter+0x8c>
 8001140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b70      	cmp	r3, #112	@ 0x70
 8001146:	d01b      	beq.n	8001180 <setPIDParameter+0x8c>
 8001148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b49      	cmp	r3, #73	@ 0x49
 800114e:	d017      	beq.n	8001180 <setPIDParameter+0x8c>
 8001150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b69      	cmp	r3, #105	@ 0x69
 8001156:	d013      	beq.n	8001180 <setPIDParameter+0x8c>
 8001158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b44      	cmp	r3, #68	@ 0x44
 800115e:	d00f      	beq.n	8001180 <setPIDParameter+0x8c>
 8001160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b64      	cmp	r3, #100	@ 0x64
 8001166:	d00b      	beq.n	8001180 <setPIDParameter+0x8c>
 8001168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b54      	cmp	r3, #84	@ 0x54
 800116e:	d007      	beq.n	8001180 <setPIDParameter+0x8c>
 8001170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b74      	cmp	r3, #116	@ 0x74
 8001176:	d003      	beq.n	8001180 <setPIDParameter+0x8c>
 8001178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1d0      	bne.n	8001122 <setPIDParameter+0x2e>
        }

        float value = atof(valueStr);
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fa05 	bl	8006594 <atof>
 800118a:	ec53 2b10 	vmov	r2, r3, d0
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd03 	bl	8000b9c <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24

        switch (type) {
 800119a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800119e:	3b44      	subs	r3, #68	@ 0x44
 80011a0:	2b30      	cmp	r3, #48	@ 0x30
 80011a2:	f200 8091 	bhi.w	80012c8 <setPIDParameter+0x1d4>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <setPIDParameter+0xb8>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001291 	.word	0x08001291
 80011b0:	080012c9 	.word	0x080012c9
 80011b4:	080012c9 	.word	0x080012c9
 80011b8:	080012c9 	.word	0x080012c9
 80011bc:	080012c9 	.word	0x080012c9
 80011c0:	08001281 	.word	0x08001281
 80011c4:	080012c9 	.word	0x080012c9
 80011c8:	080012c9 	.word	0x080012c9
 80011cc:	080012c9 	.word	0x080012c9
 80011d0:	080012c9 	.word	0x080012c9
 80011d4:	080012c9 	.word	0x080012c9
 80011d8:	080012c9 	.word	0x080012c9
 80011dc:	08001271 	.word	0x08001271
 80011e0:	080012c9 	.word	0x080012c9
 80011e4:	080012c9 	.word	0x080012c9
 80011e8:	080012c9 	.word	0x080012c9
 80011ec:	080012a1 	.word	0x080012a1
 80011f0:	080012c9 	.word	0x080012c9
 80011f4:	080012c9 	.word	0x080012c9
 80011f8:	080012c9 	.word	0x080012c9
 80011fc:	080012c9 	.word	0x080012c9
 8001200:	080012c9 	.word	0x080012c9
 8001204:	080012c9 	.word	0x080012c9
 8001208:	080012c9 	.word	0x080012c9
 800120c:	080012c9 	.word	0x080012c9
 8001210:	080012c9 	.word	0x080012c9
 8001214:	080012c9 	.word	0x080012c9
 8001218:	080012c9 	.word	0x080012c9
 800121c:	080012c9 	.word	0x080012c9
 8001220:	080012c9 	.word	0x080012c9
 8001224:	080012c9 	.word	0x080012c9
 8001228:	080012c9 	.word	0x080012c9
 800122c:	08001291 	.word	0x08001291
 8001230:	080012c9 	.word	0x080012c9
 8001234:	080012c9 	.word	0x080012c9
 8001238:	080012c9 	.word	0x080012c9
 800123c:	080012c9 	.word	0x080012c9
 8001240:	08001281 	.word	0x08001281
 8001244:	080012c9 	.word	0x080012c9
 8001248:	080012c9 	.word	0x080012c9
 800124c:	080012c9 	.word	0x080012c9
 8001250:	080012c9 	.word	0x080012c9
 8001254:	080012c9 	.word	0x080012c9
 8001258:	080012c9 	.word	0x080012c9
 800125c:	08001271 	.word	0x08001271
 8001260:	080012c9 	.word	0x080012c9
 8001264:	080012c9 	.word	0x080012c9
 8001268:	080012c9 	.word	0x080012c9
 800126c:	080012a1 	.word	0x080012a1
            case 'P': case 'p':
                Kp = value;
 8001270:	4a24      	ldr	r2, [pc, #144]	@ (8001304 <setPIDParameter+0x210>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	6013      	str	r3, [r2, #0]
                pid.Kp = Kp;
 8001276:	4b23      	ldr	r3, [pc, #140]	@ (8001304 <setPIDParameter+0x210>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a23      	ldr	r2, [pc, #140]	@ (8001308 <setPIDParameter+0x214>)
 800127c:	6193      	str	r3, [r2, #24]
                break;
 800127e:	e023      	b.n	80012c8 <setPIDParameter+0x1d4>
            case 'I': case 'i':
                Ki = value;
 8001280:	4a22      	ldr	r2, [pc, #136]	@ (800130c <setPIDParameter+0x218>)
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	6013      	str	r3, [r2, #0]
                pid.Ki = Ki;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <setPIDParameter+0x218>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1f      	ldr	r2, [pc, #124]	@ (8001308 <setPIDParameter+0x214>)
 800128c:	61d3      	str	r3, [r2, #28]
                break;
 800128e:	e01b      	b.n	80012c8 <setPIDParameter+0x1d4>
            case 'D': case 'd':
                Kd = value;
 8001290:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <setPIDParameter+0x21c>)
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	6013      	str	r3, [r2, #0]
                pid.Kd = Kd;
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <setPIDParameter+0x21c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <setPIDParameter+0x214>)
 800129c:	6213      	str	r3, [r2, #32]
                break;
 800129e:	e013      	b.n	80012c8 <setPIDParameter+0x1d4>
            case 'T': case 't':
            	for (int i = 0; i < 8; i++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012a4:	e00c      	b.n	80012c0 <setPIDParameter+0x1cc>
            	        thresh[i] = (uint32_t)value;
 80012a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 1a90 	vmov	r1, s15
 80012b2:	4a18      	ldr	r2, [pc, #96]	@ (8001314 <setPIDParameter+0x220>)
 80012b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            	for (int i = 0; i < 8; i++) {
 80012ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012bc:	3301      	adds	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	ddef      	ble.n	80012a6 <setPIDParameter+0x1b2>
            	 }
                break;
 80012c6:	bf00      	nop
    while (*ptr != '\0') {
 80012c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f af18 	bne.w	8001102 <setPIDParameter+0xe>
        }

    }
    char msg[]="PID UPDATED !";
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <setPIDParameter+0x224>)
 80012d4:	f107 0414 	add.w	r4, r7, #20
 80012d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012da:	c407      	stmia	r4!, {r0, r1, r2}
 80012dc:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart6,msg, strlen(msg), HAL_MAX_DELAY);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7fe ff86 	bl	80001f4 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f107 0114 	add.w	r1, r7, #20
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <setPIDParameter+0x228>)
 80012f6:	f003 ff7f 	bl	80051f8 <HAL_UART_Transmit>
}
 80012fa:	bf00      	nop
 80012fc:	373c      	adds	r7, #60	@ 0x3c
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	20000040 	.word	0x20000040
 8001308:	2000048c 	.word	0x2000048c
 800130c:	20000044 	.word	0x20000044
 8001310:	20000048 	.word	0x20000048
 8001314:	20000020 	.word	0x20000020
 8001318:	08009588 	.word	0x08009588
 800131c:	200003c0 	.word	0x200003c0

08001320 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b0ad      	sub	sp, #180	@ 0xb4
 8001324:	af06      	add	r7, sp, #24
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART6) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a79      	ldr	r2, [pc, #484]	@ (8001518 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	f040 80ec 	bne.w	8001510 <HAL_UARTEx_RxEventCallback+0x1f0>
        memset(main_buffer, '\0', 16);
 8001338:	2210      	movs	r2, #16
 800133a:	2100      	movs	r1, #0
 800133c:	4877      	ldr	r0, [pc, #476]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 800133e:	f006 f855 	bl	80073ec <memset>
        memcpy(main_buffer, rx_buffer, Size);
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	461a      	mov	r2, r3
 8001346:	4976      	ldr	r1, [pc, #472]	@ (8001520 <HAL_UARTEx_RxEventCallback+0x200>)
 8001348:	4874      	ldr	r0, [pc, #464]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 800134a:	f006 f896 	bl	800747a <memcpy>
        memset(rx_buffer, '\0', 16);
 800134e:	2210      	movs	r2, #16
 8001350:	2100      	movs	r1, #0
 8001352:	4873      	ldr	r0, [pc, #460]	@ (8001520 <HAL_UARTEx_RxEventCallback+0x200>)
 8001354:	f006 f84a 	bl	80073ec <memset>
        main_buffer[Size] = '\0';
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4a70      	ldr	r2, [pc, #448]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 800135c:	2100      	movs	r1, #0
 800135e:	54d1      	strb	r1, [r2, r3]

        int len = strlen((char*)main_buffer);
 8001360:	486e      	ldr	r0, [pc, #440]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001362:	f7fe ff47 	bl	80001f4 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while (len > 0 && (main_buffer[len-1] == '\r' || main_buffer[len-1] == '\n')) {
 800136c:	e00a      	b.n	8001384 <HAL_UARTEx_RxEventCallback+0x64>
            main_buffer[--len] = '\0';
 800136e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001372:	3b01      	subs	r3, #1
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001378:	4a68      	ldr	r2, [pc, #416]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 800137a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800137e:	4413      	add	r3, r2
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
        while (len > 0 && (main_buffer[len-1] == '\r' || main_buffer[len-1] == '\n')) {
 8001384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001388:	2b00      	cmp	r3, #0
 800138a:	dd0d      	ble.n	80013a8 <HAL_UARTEx_RxEventCallback+0x88>
 800138c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001390:	3b01      	subs	r3, #1
 8001392:	4a62      	ldr	r2, [pc, #392]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	2b0d      	cmp	r3, #13
 8001398:	d0e9      	beq.n	800136e <HAL_UARTEx_RxEventCallback+0x4e>
 800139a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800139e:	3b01      	subs	r3, #1
 80013a0:	4a5e      	ldr	r2, [pc, #376]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	2b0a      	cmp	r3, #10
 80013a6:	d0e2      	beq.n	800136e <HAL_UARTEx_RxEventCallback+0x4e>
        }

        // Handle 'Q' query
        if (strcmp((char*)main_buffer, "Q") == 0) {
 80013a8:	495e      	ldr	r1, [pc, #376]	@ (8001524 <HAL_UARTEx_RxEventCallback+0x204>)
 80013aa:	485c      	ldr	r0, [pc, #368]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 80013ac:	f7fe ff18 	bl	80001e0 <strcmp>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 809c 	bne.w	80014f0 <HAL_UARTEx_RxEventCallback+0x1d0>
            char status[128];

            // Send PID values
            snprintf(status, sizeof(status),
 80013b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001528 <HAL_UARTEx_RxEventCallback+0x208>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                "Kp=%d.%02d Ki=%d.%03d Kd=%d.%02d\nThresh: ",
                (int)Kp, (int)(Kp * 100) % 100,
 80013c2:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <HAL_UARTEx_RxEventCallback+0x208>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800152c <HAL_UARTEx_RxEventCallback+0x20c>
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 2a90 	vmov	r2, s15
            snprintf(status, sizeof(status),
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <HAL_UARTEx_RxEventCallback+0x210>)
 80013da:	fb83 1302 	smull	r1, r3, r3, r2
 80013de:	1159      	asrs	r1, r3, #5
 80013e0:	17d3      	asrs	r3, r2, #31
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	2164      	movs	r1, #100	@ 0x64
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a51      	ldr	r2, [pc, #324]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x214>)
 80013ee:	edd2 7a00 	vldr	s15, [r2]
 80013f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f6:	ee17 5a90 	vmov	r5, s15
                (int)Ki, (int)(Ki * 1000) % 1000,
 80013fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001534 <HAL_UARTEx_RxEventCallback+0x214>)
 80013fc:	edd2 7a00 	vldr	s15, [r2]
 8001400:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001538 <HAL_UARTEx_RxEventCallback+0x218>
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 1a90 	vmov	r1, s15
            snprintf(status, sizeof(status),
 8001410:	4a4a      	ldr	r2, [pc, #296]	@ (800153c <HAL_UARTEx_RxEventCallback+0x21c>)
 8001412:	fb82 0201 	smull	r0, r2, r2, r1
 8001416:	1190      	asrs	r0, r2, #6
 8001418:	17ca      	asrs	r2, r1, #31
 800141a:	1a82      	subs	r2, r0, r2
 800141c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001420:	fb00 f202 	mul.w	r2, r0, r2
 8001424:	1a8a      	subs	r2, r1, r2
 8001426:	4946      	ldr	r1, [pc, #280]	@ (8001540 <HAL_UARTEx_RxEventCallback+0x220>)
 8001428:	edd1 7a00 	vldr	s15, [r1]
 800142c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001430:	ee17 6a90 	vmov	r6, s15
                (int)Kd, (int)(Kd * 100) % 100);
 8001434:	4942      	ldr	r1, [pc, #264]	@ (8001540 <HAL_UARTEx_RxEventCallback+0x220>)
 8001436:	edd1 7a00 	vldr	s15, [r1]
 800143a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800152c <HAL_UARTEx_RxEventCallback+0x20c>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001446:	ee17 0a90 	vmov	r0, s15
            snprintf(status, sizeof(status),
 800144a:	4939      	ldr	r1, [pc, #228]	@ (8001530 <HAL_UARTEx_RxEventCallback+0x210>)
 800144c:	fb81 4100 	smull	r4, r1, r1, r0
 8001450:	114c      	asrs	r4, r1, #5
 8001452:	17c1      	asrs	r1, r0, #31
 8001454:	1a61      	subs	r1, r4, r1
 8001456:	2464      	movs	r4, #100	@ 0x64
 8001458:	fb04 f101 	mul.w	r1, r4, r1
 800145c:	1a41      	subs	r1, r0, r1
 800145e:	f107 0008 	add.w	r0, r7, #8
 8001462:	9104      	str	r1, [sp, #16]
 8001464:	9603      	str	r6, [sp, #12]
 8001466:	9202      	str	r2, [sp, #8]
 8001468:	9501      	str	r5, [sp, #4]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	ee16 3a90 	vmov	r3, s13
 8001470:	4a34      	ldr	r2, [pc, #208]	@ (8001544 <HAL_UARTEx_RxEventCallback+0x224>)
 8001472:	2180      	movs	r1, #128	@ 0x80
 8001474:	f005 f892 	bl	800659c <sniprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)status, strlen(status), HAL_MAX_DELAY);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe feb9 	bl	80001f4 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	f107 0108 	add.w	r1, r7, #8
 800148a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800148e:	482e      	ldr	r0, [pc, #184]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x228>)
 8001490:	f003 feb2 	bl	80051f8 <HAL_UART_Transmit>

            // Send all 8 threshold values in one line
            for (int i = 0; i < 8; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800149a:	e01d      	b.n	80014d8 <HAL_UARTEx_RxEventCallback+0x1b8>
                char tbuf[8];
                sprintf(tbuf, "%d ", thresh[i]);
 800149c:	4a2b      	ldr	r2, [pc, #172]	@ (800154c <HAL_UARTEx_RxEventCallback+0x22c>)
 800149e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80014aa:	4929      	ldr	r1, [pc, #164]	@ (8001550 <HAL_UARTEx_RxEventCallback+0x230>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 f8ab 	bl	8006608 <siprintf>
                HAL_UART_Transmit(&huart6, (uint8_t*)tbuf, strlen(tbuf), HAL_MAX_DELAY);
 80014b2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe fe9c 	bl	80001f4 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c8:	481f      	ldr	r0, [pc, #124]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x228>)
 80014ca:	f003 fe95 	bl	80051f8 <HAL_UART_Transmit>
            for (int i = 0; i < 8; i++) {
 80014ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014d2:	3301      	adds	r3, #1
 80014d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014dc:	2b07      	cmp	r3, #7
 80014de:	dddd      	ble.n	800149c <HAL_UARTEx_RxEventCallback+0x17c>
            }

            HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e4:	2201      	movs	r2, #1
 80014e6:	491b      	ldr	r1, [pc, #108]	@ (8001554 <HAL_UARTEx_RxEventCallback+0x234>)
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x228>)
 80014ea:	f003 fe85 	bl	80051f8 <HAL_UART_Transmit>
 80014ee:	e002      	b.n	80014f6 <HAL_UARTEx_RxEventCallback+0x1d6>
        }

        // Fallback: PID parameter input
        else {
            setPIDParameter((char*) main_buffer);
 80014f0:	480a      	ldr	r0, [pc, #40]	@ (800151c <HAL_UARTEx_RxEventCallback+0x1fc>)
 80014f2:	f7ff fdff 	bl	80010f4 <setPIDParameter>
        }

        // Restart DMA reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, 16);
 80014f6:	2210      	movs	r2, #16
 80014f8:	4909      	ldr	r1, [pc, #36]	@ (8001520 <HAL_UARTEx_RxEventCallback+0x200>)
 80014fa:	4813      	ldr	r0, [pc, #76]	@ (8001548 <HAL_UARTEx_RxEventCallback+0x228>)
 80014fc:	f003 ff07 	bl	800530e <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_UARTEx_RxEventCallback+0x238>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_UARTEx_RxEventCallback+0x238>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0208 	bic.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
    }
}
 8001510:	bf00      	nop
 8001512:	379c      	adds	r7, #156	@ 0x9c
 8001514:	46bd      	mov	sp, r7
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	40011400 	.word	0x40011400
 800151c:	200004c8 	.word	0x200004c8
 8001520:	200004b8 	.word	0x200004b8
 8001524:	08009598 	.word	0x08009598
 8001528:	20000040 	.word	0x20000040
 800152c:	42c80000 	.word	0x42c80000
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	20000044 	.word	0x20000044
 8001538:	447a0000 	.word	0x447a0000
 800153c:	10624dd3 	.word	0x10624dd3
 8001540:	20000048 	.word	0x20000048
 8001544:	0800959c 	.word	0x0800959c
 8001548:	200003c0 	.word	0x200003c0
 800154c:	20000020 	.word	0x20000020
 8001550:	080095c8 	.word	0x080095c8
 8001554:	080095cc 	.word	0x080095cc
 8001558:	20000408 	.word	0x20000408

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001562:	f000 ffb5 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001566:	f000 f8f1 	bl	800174c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156a:	f000 fbad 	bl	8001cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 800156e:	f000 fb83 	bl	8001c78 <MX_DMA_Init>
  MX_ADC1_Init();
 8001572:	f000 f95f 	bl	8001834 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001576:	f000 fa13 	bl	80019a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800157a:	f000 faa1 	bl	8001ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800157e:	f000 faf7 	bl	8001b70 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001582:	f000 fb4f 	bl	8001c24 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001586:	f000 f949 	bl	800181c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 800158a:	485e      	ldr	r0, [pc, #376]	@ (8001704 <main+0x1a8>)
 800158c:	f001 f87a 	bl	8002684 <HAL_ADC_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, 8);
 8001590:	2208      	movs	r2, #8
 8001592:	495d      	ldr	r1, [pc, #372]	@ (8001708 <main+0x1ac>)
 8001594:	485b      	ldr	r0, [pc, #364]	@ (8001704 <main+0x1a8>)
 8001596:	f001 fa43 	bl	8002a20 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	485b      	ldr	r0, [pc, #364]	@ (800170c <main+0x1b0>)
 800159e:	f003 f96b 	bl	8004878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015a2:	2104      	movs	r1, #4
 80015a4:	4859      	ldr	r0, [pc, #356]	@ (800170c <main+0x1b0>)
 80015a6:	f003 f967 	bl	8004878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015aa:	2100      	movs	r1, #0
 80015ac:	4858      	ldr	r0, [pc, #352]	@ (8001710 <main+0x1b4>)
 80015ae:	f003 f963 	bl	8004878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015b2:	2100      	movs	r1, #0
 80015b4:	4857      	ldr	r0, [pc, #348]	@ (8001714 <main+0x1b8>)
 80015b6:	f003 f95f 	bl	8004878 <HAL_TIM_PWM_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, rx_buffer, 16);
 80015ba:	2210      	movs	r2, #16
 80015bc:	4956      	ldr	r1, [pc, #344]	@ (8001718 <main+0x1bc>)
 80015be:	4857      	ldr	r0, [pc, #348]	@ (800171c <main+0x1c0>)
 80015c0:	f003 fea5 	bl	800530e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx , DMA_IT_HT);
 80015c4:	4b56      	ldr	r3, [pc, #344]	@ (8001720 <main+0x1c4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b55      	ldr	r3, [pc, #340]	@ (8001720 <main+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0208 	bic.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]



  pid.Kp=Kp;
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <main+0x1c8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a53      	ldr	r2, [pc, #332]	@ (8001728 <main+0x1cc>)
 80015da:	6193      	str	r3, [r2, #24]
  pid.Ki=Ki;
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <main+0x1d0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a51      	ldr	r2, [pc, #324]	@ (8001728 <main+0x1cc>)
 80015e2:	61d3      	str	r3, [r2, #28]
  pid.Kd=Kd;
 80015e4:	4b52      	ldr	r3, [pc, #328]	@ (8001730 <main+0x1d4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001728 <main+0x1cc>)
 80015ea:	6213      	str	r3, [r2, #32]
  arm_pid_init_f32(&pid, 1);
 80015ec:	2101      	movs	r1, #1
 80015ee:	484e      	ldr	r0, [pc, #312]	@ (8001728 <main+0x1cc>)
 80015f0:	f000 ff37 	bl	8002462 <arm_pid_init_f32>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 80015f4:	2208      	movs	r2, #8
 80015f6:	4944      	ldr	r1, [pc, #272]	@ (8001708 <main+0x1ac>)
 80015f8:	4842      	ldr	r0, [pc, #264]	@ (8001704 <main+0x1a8>)
 80015fa:	f001 fa11 	bl	8002a20 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 80015fe:	2208      	movs	r2, #8
 8001600:	4941      	ldr	r1, [pc, #260]	@ (8001708 <main+0x1ac>)
 8001602:	4840      	ldr	r0, [pc, #256]	@ (8001704 <main+0x1a8>)
 8001604:	f001 fa0c 	bl	8002a20 <HAL_ADC_Start_DMA>
	  HAL_Delay(5);
 8001608:	2005      	movs	r0, #5
 800160a:	f000 ffd3 	bl	80025b4 <HAL_Delay>

	  position=line_data();
 800160e:	f7ff fd25 	bl	800105c <line_data>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <main+0x1d8>)
 8001618:	edc3 7a00 	vstr	s15, [r3]

	  if (position == 255) {
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <main+0x1d8>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001738 <main+0x1dc>
 8001626:	eef4 7a47 	vcmp.f32	s15, s14
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	d10d      	bne.n	800164c <main+0xf0>
		  setMotorSpeed(0, -base_speed);
 8001630:	4b42      	ldr	r3, [pc, #264]	@ (800173c <main+0x1e0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	425b      	negs	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fccb 	bl	8000fd4 <setMotorSpeed>
	      setMotorSpeed(1, base_speed);
 800163e:	4b3f      	ldr	r3, [pc, #252]	@ (800173c <main+0x1e0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fcc5 	bl	8000fd4 <setMotorSpeed>
	      continue;
 800164a:	e059      	b.n	8001700 <main+0x1a4>
	  }
	  error = ((float32_t)position - 35.0f);
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <main+0x1d8>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001740 <main+0x1e4>
 8001656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800165a:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <main+0x1e8>)
 800165c:	edc3 7a00 	vstr	s15, [r3]
	  output = arm_pid_f32(&pid, error);
 8001660:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <main+0x1e8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <main+0x1cc>)
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	edd7 7a02 	vldr	s15, [r7, #8]
 8001674:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 6a01 	vldr	s13, [r3, #4]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	edd3 7a03 	vldr	s15, [r3, #12]
 8001684:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001688:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	edd3 7a04 	vldr	s15, [r3, #16]
 8001698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800169c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a20      	ldr	r2, [pc, #128]	@ (8001748 <main+0x1ec>)
 80016c6:	6013      	str	r3, [r2, #0]

	  // Adjust motor speeds
	  setMotorSpeed(0, base_speed - (int32_t)output);  // Left motor
 80016c8:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <main+0x1e0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001748 <main+0x1ec>)
 80016ce:	edd2 7a00 	vldr	s15, [r2]
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 2a90 	vmov	r2, s15
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fc78 	bl	8000fd4 <setMotorSpeed>
	  setMotorSpeed(1, base_speed + (int32_t)output);  // Right motor
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <main+0x1ec>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ee:	ee17 2a90 	vmov	r2, s15
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <main+0x1e0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff fc6a 	bl	8000fd4 <setMotorSpeed>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 8);
 8001700:	e77d      	b.n	80015fe <main+0xa2>
 8001702:	bf00      	nop
 8001704:	20000240 	.word	0x20000240
 8001708:	20000468 	.word	0x20000468
 800170c:	200002e8 	.word	0x200002e8
 8001710:	20000378 	.word	0x20000378
 8001714:	20000330 	.word	0x20000330
 8001718:	200004b8 	.word	0x200004b8
 800171c:	200003c0 	.word	0x200003c0
 8001720:	20000408 	.word	0x20000408
 8001724:	20000040 	.word	0x20000040
 8001728:	2000048c 	.word	0x2000048c
 800172c:	20000044 	.word	0x20000044
 8001730:	20000048 	.word	0x20000048
 8001734:	20000488 	.word	0x20000488
 8001738:	437f0000 	.word	0x437f0000
 800173c:	2000004c 	.word	0x2000004c
 8001740:	420c0000 	.word	0x420c0000
 8001744:	200004b0 	.word	0x200004b0
 8001748:	200004b4 	.word	0x200004b4

0800174c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b094      	sub	sp, #80	@ 0x50
 8001750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	2230      	movs	r2, #48	@ 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 fe46 	bl	80073ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <SystemClock_Config+0xc8>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <SystemClock_Config+0xc8>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <SystemClock_Config+0xc8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <SystemClock_Config+0xcc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <SystemClock_Config+0xcc>)
 8001796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <SystemClock_Config+0xcc>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b0:	2310      	movs	r3, #16
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017bc:	2308      	movs	r3, #8
 80017be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017c0:	2364      	movs	r3, #100	@ 0x64
 80017c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fba9 	bl	8003f28 <HAL_RCC_OscConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017dc:	f000 faec 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e0:	230f      	movs	r3, #15
 80017e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2103      	movs	r1, #3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fe0b 	bl	8004418 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001808:	f000 fad6 	bl	8001db8 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3750      	adds	r7, #80	@ 0x50
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2012      	movs	r0, #18
 8001826:	f001 fda8 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800182a:	2012      	movs	r0, #18
 800182c:	f001 fdc1 	bl	80033b2 <HAL_NVIC_EnableIRQ>
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001846:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001848:	4a53      	ldr	r2, [pc, #332]	@ (8001998 <MX_ADC1_Init+0x164>)
 800184a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800184c:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <MX_ADC1_Init+0x160>)
 800184e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001854:	4b4f      	ldr	r3, [pc, #316]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001856:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800185a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800185c:	4b4d      	ldr	r3, [pc, #308]	@ (8001994 <MX_ADC1_Init+0x160>)
 800185e:	2201      	movs	r2, #1
 8001860:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001862:	4b4c      	ldr	r3, [pc, #304]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001864:	2200      	movs	r2, #0
 8001866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001868:	4b4a      	ldr	r3, [pc, #296]	@ (8001994 <MX_ADC1_Init+0x160>)
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001870:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001878:	4a48      	ldr	r2, [pc, #288]	@ (800199c <MX_ADC1_Init+0x168>)
 800187a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <MX_ADC1_Init+0x160>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001884:	2208      	movs	r2, #8
 8001886:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001888:	4b42      	ldr	r3, [pc, #264]	@ (8001994 <MX_ADC1_Init+0x160>)
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001890:	4b40      	ldr	r3, [pc, #256]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001896:	483f      	ldr	r0, [pc, #252]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001898:	f000 feb0 	bl	80025fc <HAL_ADC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80018a2:	f000 fa89 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80018ae:	2304      	movs	r3, #4
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	4837      	ldr	r0, [pc, #220]	@ (8001994 <MX_ADC1_Init+0x160>)
 80018b8:	f001 f9ca 	bl	8002c50 <HAL_ADC_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80018c2:	f000 fa79 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	4619      	mov	r1, r3
 80018d2:	4830      	ldr	r0, [pc, #192]	@ (8001994 <MX_ADC1_Init+0x160>)
 80018d4:	f001 f9bc 	bl	8002c50 <HAL_ADC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80018de:	f000 fa6b 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018e6:	2303      	movs	r3, #3
 80018e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	4619      	mov	r1, r3
 80018ee:	4829      	ldr	r0, [pc, #164]	@ (8001994 <MX_ADC1_Init+0x160>)
 80018f0:	f001 f9ae 	bl	8002c50 <HAL_ADC_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80018fa:	f000 fa5d 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018fe:	2303      	movs	r3, #3
 8001900:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001902:	2304      	movs	r3, #4
 8001904:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4619      	mov	r1, r3
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <MX_ADC1_Init+0x160>)
 800190c:	f001 f9a0 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001916:	f000 fa4f 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800191a:	2304      	movs	r3, #4
 800191c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800191e:	2305      	movs	r3, #5
 8001920:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	4619      	mov	r1, r3
 8001926:	481b      	ldr	r0, [pc, #108]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001928:	f001 f992 	bl	8002c50 <HAL_ADC_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8001932:	f000 fa41 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001936:	2305      	movs	r3, #5
 8001938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800193a:	2306      	movs	r3, #6
 800193c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	4619      	mov	r1, r3
 8001942:	4814      	ldr	r0, [pc, #80]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001944:	f001 f984 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800194e:	f000 fa33 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001952:	2306      	movs	r3, #6
 8001954:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001956:	2307      	movs	r3, #7
 8001958:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	@ (8001994 <MX_ADC1_Init+0x160>)
 8001960:	f001 f976 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800196a:	f000 fa25 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800196e:	2307      	movs	r3, #7
 8001970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001972:	2308      	movs	r3, #8
 8001974:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	@ (8001994 <MX_ADC1_Init+0x160>)
 800197c:	f001 f968 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001986:	f000 fa17 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000240 	.word	0x20000240
 8001998:	40012000 	.word	0x40012000
 800199c:	0f000001 	.word	0x0f000001

080019a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b092      	sub	sp, #72	@ 0x48
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 fd0e 	bl	80073ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d0:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019d2:	4a3a      	ldr	r2, [pc, #232]	@ (8001abc <MX_TIM1_Init+0x11c>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80019d6:	4b38      	ldr	r3, [pc, #224]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80019e4:	4b34      	ldr	r3, [pc, #208]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019e6:	22c8      	movs	r2, #200	@ 0xc8
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b33      	ldr	r3, [pc, #204]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fc:	482e      	ldr	r0, [pc, #184]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 80019fe:	f002 feeb 	bl	80047d8 <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001a08:	f000 f9d6 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4827      	ldr	r0, [pc, #156]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a1c:	f003 fadc 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a26:	f000 f9c7 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	@ 0x60
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481a      	ldr	r0, [pc, #104]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a50:	f002 ffc2 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a5a:	f000 f9ad 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a62:	2204      	movs	r2, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4814      	ldr	r0, [pc, #80]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a68:	f002 ffb6 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001a72:	f000 f9a1 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001a9a:	f003 fb0b 	bl	80050b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001aa4:	f000 f988 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <MX_TIM1_Init+0x118>)
 8001aaa:	f000 fa77 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001aae:	bf00      	nop
 8001ab0:	3748      	adds	r7, #72	@ 0x48
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200002e8 	.word	0x200002e8
 8001abc:	40010000 	.word	0x40010000

08001ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001aec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001afa:	22c8      	movs	r2, #200	@ 0xc8
 8001afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b0a:	4818      	ldr	r0, [pc, #96]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b0c:	f002 fe64 	bl	80047d8 <HAL_TIM_PWM_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b16:	f000 f94f 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	4619      	mov	r1, r3
 8001b28:	4810      	ldr	r0, [pc, #64]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b2a:	f003 fa55 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b34:	f000 f940 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b38:	2360      	movs	r3, #96	@ 0x60
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b50:	f002 ff42 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b5a:	f000 f92d 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b5e:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <MX_TIM2_Init+0xac>)
 8001b60:	f000 fa1c 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000330 	.word	0x20000330

08001b70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001b94:	4a22      	ldr	r2, [pc, #136]	@ (8001c20 <MX_TIM3_Init+0xb0>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001b98:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001ba8:	2264      	movs	r2, #100	@ 0x64
 8001baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bb8:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001bba:	f002 fe0d 	bl	80047d8 <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f000 f8f8 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001bd8:	f003 f9fe 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001be2:	f000 f8e9 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	2360      	movs	r3, #96	@ 0x60
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4807      	ldr	r0, [pc, #28]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001bfe:	f002 feeb 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c08:	f000 f8d6 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <MX_TIM3_Init+0xac>)
 8001c0e:	f000 f9c5 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000378 	.word	0x20000378
 8001c20:	40000400 	.word	0x40000400

08001c24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_USART6_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART6_UART_Init+0x4c>)
 8001c5c:	f003 fa7c 	bl	8005158 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f000 f8a7 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003c0 	.word	0x200003c0
 8001c74:	40011400 	.word	0x40011400

08001c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_DMA_Init+0x4c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <MX_DMA_Init+0x4c>)
 8001c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <MX_DMA_Init+0x4c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2038      	movs	r0, #56	@ 0x38
 8001ca0:	f001 fb6b 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ca4:	2038      	movs	r0, #56	@ 0x38
 8001ca6:	f001 fb84 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2039      	movs	r0, #57	@ 0x39
 8001cb0:	f001 fb63 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001cb4:	2039      	movs	r0, #57	@ 0x39
 8001cb6:	f001 fb7c 	bl	80033b2 <HAL_NVIC_EnableIRQ>

}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b32      	ldr	r3, [pc, #200]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a31      	ldr	r2, [pc, #196]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a2a      	ldr	r2, [pc, #168]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b21      	ldr	r3, [pc, #132]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <MX_GPIO_Init+0xe4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d54:	4816      	ldr	r0, [pc, #88]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d56:	f002 f8cd 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d60:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <MX_GPIO_Init+0xec>)
 8001d62:	f002 f8c7 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d80:	f001 ff34 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_GPIO_Init+0xec>)
 8001d9e:	f001 ff25 	bl	8003bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020000 	.word	0x40020000

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <HAL_ADC_MspInit+0xdc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d157      	bne.n	8001ee6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e46:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a26      	ldr	r2, [pc, #152]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_ADC_MspInit+0xe0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e6e:	23ff      	movs	r3, #255	@ 0xff
 8001e70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e72:	2303      	movs	r3, #3
 8001e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481d      	ldr	r0, [pc, #116]	@ (8001ef8 <HAL_ADC_MspInit+0xe4>)
 8001e82:	f001 feb3 	bl	8003bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001e88:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <HAL_ADC_MspInit+0xec>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ea0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ea8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001eb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ebe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eca:	480c      	ldr	r0, [pc, #48]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ecc:	f001 fa8c 	bl	80033e8 <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ed6:	f7ff ff6f 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ede:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <HAL_ADC_MspInit+0xe8>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	20000288 	.word	0x20000288
 8001f00:	40026410 	.word	0x40026410

08001f04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f26:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f32:	e026      	b.n	8001f82 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
}
 8001f5a:	e012      	b.n	8001f82 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <HAL_TIM_PWM_MspInit+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10d      	bne.n	8001f82 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <HAL_TIM_PWM_MspInit+0x90>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40000400 	.word	0x40000400

08001f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	@ 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <HAL_TIM_MspPostInit+0xfc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d11f      	bne.n	8001ffe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a35      	ldr	r2, [pc, #212]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b33      	ldr	r3, [pc, #204]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	482a      	ldr	r0, [pc, #168]	@ (80020a0 <HAL_TIM_MspPostInit+0x104>)
 8001ff8:	f001 fdf8 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ffc:	e047      	b.n	800208e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002006:	d11f      	bne.n	8002048 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	4a22      	ldr	r2, [pc, #136]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6313      	str	r3, [r2, #48]	@ 0x30
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002024:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4817      	ldr	r0, [pc, #92]	@ (80020a0 <HAL_TIM_MspPostInit+0x104>)
 8002042:	f001 fdd3 	bl	8003bec <HAL_GPIO_Init>
}
 8002046:	e022      	b.n	800208e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <HAL_TIM_MspPostInit+0x108>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11d      	bne.n	800208e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_TIM_MspPostInit+0x100>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206e:	2310      	movs	r3, #16
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207e:	2302      	movs	r3, #2
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4807      	ldr	r0, [pc, #28]	@ (80020a8 <HAL_TIM_MspPostInit+0x10c>)
 800208a:	f001 fdaf 	bl	8003bec <HAL_GPIO_Init>
}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	@ 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	@ (800219c <HAL_UART_MspInit+0xf0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d162      	bne.n	8002194 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b33      	ldr	r3, [pc, #204]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	4a32      	ldr	r2, [pc, #200]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020d8:	f043 0320 	orr.w	r3, r3, #32
 80020dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020de:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a2b      	ldr	r2, [pc, #172]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <HAL_UART_MspInit+0xf4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002106:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002118:	2308      	movs	r3, #8
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4820      	ldr	r0, [pc, #128]	@ (80021a4 <HAL_UART_MspInit+0xf8>)
 8002124:	f001 fd62 	bl	8003bec <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800212a:	4a20      	ldr	r2, [pc, #128]	@ (80021ac <HAL_UART_MspInit+0x100>)
 800212c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002130:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002134:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002144:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002148:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800214a:	4b17      	ldr	r3, [pc, #92]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800214c:	2200      	movs	r2, #0
 800214e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002156:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002158:	2200      	movs	r2, #0
 800215a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002164:	2200      	movs	r2, #0
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002168:	480f      	ldr	r0, [pc, #60]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800216a:	f001 f93d 	bl	80033e8 <HAL_DMA_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002174:	f7ff fe20 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0b      	ldr	r2, [pc, #44]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 800217c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <HAL_UART_MspInit+0xfc>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2047      	movs	r0, #71	@ 0x47
 800218a:	f001 f8f6 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800218e:	2047      	movs	r0, #71	@ 0x47
 8002190:	f001 f90f 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	@ 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40011400 	.word	0x40011400
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020000 	.word	0x40020000
 80021a8:	20000408 	.word	0x20000408
 80021ac:	40026428 	.word	0x40026428

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <NMI_Handler+0x4>

080021b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <MemManage_Handler+0x4>

080021c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002206:	f000 f9b5 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <ADC_IRQHandler+0x10>)
 8002216:	f000 faf3 	bl	8002800 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000240 	.word	0x20000240

08002224 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002228:	4802      	ldr	r0, [pc, #8]	@ (8002234 <DMA2_Stream0_IRQHandler+0x10>)
 800222a:	f001 fa75 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000288 	.word	0x20000288

08002238 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800223c:	4802      	ldr	r0, [pc, #8]	@ (8002248 <DMA2_Stream1_IRQHandler+0x10>)
 800223e:	f001 fa6b 	bl	8003718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000408 	.word	0x20000408

0800224c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <USART6_IRQHandler+0x10>)
 8002252:	f003 f8b9 	bl	80053c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200003c0 	.word	0x200003c0

08002260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return 1;
 8002264:	2301      	movs	r3, #1
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_kill>:

int _kill(int pid, int sig)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227a:	f005 f8d1 	bl	8007420 <__errno>
 800227e:	4603      	mov	r3, r0
 8002280:	2216      	movs	r2, #22
 8002282:	601a      	str	r2, [r3, #0]
  return -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002298:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffe7 	bl	8002270 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a2:	bf00      	nop
 80022a4:	e7fd      	b.n	80022a2 <_exit+0x12>

080022a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e00a      	b.n	80022ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b8:	f3af 8000 	nop.w
 80022bc:	4601      	mov	r1, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	60ba      	str	r2, [r7, #8]
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dbf0      	blt.n	80022b8 <_read+0x12>
  }

  return len;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e009      	b.n	8002306 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3301      	adds	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	dbf1      	blt.n	80022f2 <_write+0x12>
  }
  return len;
 800230e:	687b      	ldr	r3, [r7, #4]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_close>:

int _close(int file)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002320:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002340:	605a      	str	r2, [r3, #4]
  return 0;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_isatty>:

int _isatty(int file)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002358:	2301      	movs	r3, #1
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f005 f836 	bl	8007420 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20020000 	.word	0x20020000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	200004d8 	.word	0x200004d8
 80023e8:	20000630 	.word	0x20000630

080023ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <SystemInit+0x20>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <SystemInit+0x20>)
 80023f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002448 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002414:	f7ff ffea 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002418:	480c      	ldr	r0, [pc, #48]	@ (800244c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800241a:	490d      	ldr	r1, [pc, #52]	@ (8002450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800241c:	4a0d      	ldr	r2, [pc, #52]	@ (8002454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002430:	4c0a      	ldr	r4, [pc, #40]	@ (800245c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243e:	f004 fff5 	bl	800742c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002442:	f7ff f88b 	bl	800155c <main>
  bx  lr    
 8002446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800244c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002450:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002454:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8002458:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800245c:	2000062c 	.word	0x2000062c

08002460 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002460:	e7fe      	b.n	8002460 <DMA1_Stream0_IRQHandler>

08002462 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edd3 7a07 	vldr	s15, [r3, #28]
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002492:	eeb1 7a67 	vneg.f32	s14, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edd3 7a08 	vldr	s15, [r3, #32]
 800249c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	330c      	adds	r3, #12
 80024bc:	220c      	movs	r2, #12
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 ff93 	bl	80073ec <memset>
  }

}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 ff33 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	200f      	movs	r0, #15
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fc5e 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 ff4b 	bl	80033ce <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002550:	f000 ff13 	bl	800337a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000050 	.word	0x20000050
 800256c:	20000058 	.word	0x20000058
 8002570:	20000054 	.word	0x20000054

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000058 	.word	0x20000058
 8002598:	200004dc 	.word	0x200004dc

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200004dc 	.word	0x200004dc

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000058 	.word	0x20000058

080025fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e033      	b.n	800267a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fbfa 	bl	8001e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d118      	bne.n	800266c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002642:	f023 0302 	bic.w	r3, r3, #2
 8002646:	f043 0202 	orr.w	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fc30 	bl	8002eb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40
 800266a:	e001      	b.n	8002670 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADC_Start_IT+0x1a>
 800269a:	2302      	movs	r3, #2
 800269c:	e0a1      	b.n	80027e2 <HAL_ADC_Start_IT+0x15e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d018      	beq.n	80026e6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c4:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <HAL_ADC_Start_IT+0x16c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4a      	ldr	r2, [pc, #296]	@ (80027f4 <HAL_ADC_Start_IT+0x170>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	0c9a      	lsrs	r2, r3, #18
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f9      	bne.n	80026da <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d169      	bne.n	80027c8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800271e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002732:	d106      	bne.n	8002742 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002738:	f023 0206 	bic.w	r2, r3, #6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002740:	e002      	b.n	8002748 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002750:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_ADC_Start_IT+0x174>)
 8002752:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800275c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800276c:	f043 0320 	orr.w	r3, r3, #32
 8002770:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d129      	bne.n	80027e0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	e020      	b.n	80027e0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <HAL_ADC_Start_IT+0x178>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d11b      	bne.n	80027e0 <HAL_ADC_Start_IT+0x15c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d114      	bne.n	80027e0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	e00b      	b.n	80027e0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000050 	.word	0x20000050
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	40012300 	.word	0x40012300
 80027fc:	40012000 	.word	0x40012000

08002800 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d049      	beq.n	80028ca <HAL_ADC_IRQHandler+0xca>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d046      	beq.n	80028ca <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12b      	bne.n	80028ba <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d127      	bne.n	80028ba <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0220 	bic.w	r2, r2, #32
 8002894:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9a0 	bl	8002c00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0212 	mvn.w	r2, #18
 80028c8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d057      	beq.n	8002990 <HAL_ADC_IRQHandler+0x190>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d054      	beq.n	8002990 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d105      	bne.n	80028fe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d139      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002924:	2b00      	cmp	r3, #0
 8002926:	d12b      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d124      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11d      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002948:	2b00      	cmp	r3, #0
 800294a:	d119      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800295a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fc15 	bl	80031b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 020c 	mvn.w	r2, #12
 800298e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d017      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x1d6>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d014      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10d      	bne.n	80029d6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f92e 	bl	8002c28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029e4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x218>
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d012      	beq.n	8002a18 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0220 	mvn.w	r2, #32
 8002a06:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f917 	bl	8002c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0220 	mvn.w	r2, #32
 8002a16:	601a      	str	r2, [r3, #0]
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Start_DMA+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0ce      	b.n	8002bdc <HAL_ADC_Start_DMA+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d018      	beq.n	8002a86 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a64:	4b5f      	ldr	r3, [pc, #380]	@ (8002be4 <HAL_ADC_Start_DMA+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a5f      	ldr	r2, [pc, #380]	@ (8002be8 <HAL_ADC_Start_DMA+0x1c8>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9a      	lsrs	r2, r3, #18
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f9      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a94:	d107      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 8086 	bne.w	8002bc2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ae0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af4:	d106      	bne.n	8002b04 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f023 0206 	bic.w	r2, r3, #6
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b02:	e002      	b.n	8002b0a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b12:	4b36      	ldr	r3, [pc, #216]	@ (8002bec <HAL_ADC_Start_DMA+0x1cc>)
 8002b14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	4a35      	ldr	r2, [pc, #212]	@ (8002bf0 <HAL_ADC_Start_DMA+0x1d0>)
 8002b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <HAL_ADC_Start_DMA+0x1d4>)
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <HAL_ADC_Start_DMA+0x1d8>)
 8002b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b46:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b56:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	334c      	adds	r3, #76	@ 0x4c
 8002b62:	4619      	mov	r1, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f000 fcec 	bl	8003544 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10f      	bne.n	8002b98 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d129      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e020      	b.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	@ (8002bfc <HAL_ADC_Start_DMA+0x1dc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11b      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d114      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e00b      	b.n	8002bda <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000050 	.word	0x20000050
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	080030ad 	.word	0x080030ad
 8002bf4:	08003167 	.word	0x08003167
 8002bf8:	08003183 	.word	0x08003183
 8002bfc:	40012000 	.word	0x40012000

08002c00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e113      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x244>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d925      	bls.n	8002cc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68d9      	ldr	r1, [r3, #12]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4403      	add	r3, r0
 8002cba:	3b1e      	subs	r3, #30
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	e022      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	2207      	movs	r2, #7
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	400a      	ands	r2, r1
 8002cea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4403      	add	r3, r0
 8002d04:	409a      	lsls	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d824      	bhi.n	8002d60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b05      	subs	r3, #5
 8002d28:	221f      	movs	r2, #31
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4618      	mov	r0, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b05      	subs	r3, #5
 8002d52:	fa00 f203 	lsl.w	r2, r0, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d5e:	e04c      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d824      	bhi.n	8002db2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b23      	subs	r3, #35	@ 0x23
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43da      	mvns	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	400a      	ands	r2, r1
 8002d88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b23      	subs	r3, #35	@ 0x23
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8002db0:	e023      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b41      	subs	r3, #65	@ 0x41
 8002dc4:	221f      	movs	r2, #31
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b41      	subs	r3, #65	@ 0x41
 8002dee:	fa00 f203 	lsl.w	r2, r0, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dfa:	4b29      	ldr	r3, [pc, #164]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x250>)
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a28      	ldr	r2, [pc, #160]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x254>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10f      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d8>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b12      	cmp	r3, #18
 8002e0e:	d10b      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x254>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d12b      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x23a>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x258>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x1f4>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b11      	cmp	r3, #17
 8002e42:	d122      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x258>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d111      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e66:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <HAL_ADC_ConfigChannel+0x25c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x260>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9a      	lsrs	r2, r3, #18
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	40012000 	.word	0x40012000
 8002ea8:	10000012 	.word	0x10000012
 8002eac:	20000050 	.word	0x20000050
 8002eb0:	431bde83 	.word	0x431bde83

08002eb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ebc:	4b79      	ldr	r3, [pc, #484]	@ (80030a4 <ADC_Init+0x1f0>)
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	021a      	lsls	r2, r3, #8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	4a58      	ldr	r2, [pc, #352]	@ (80030a8 <ADC_Init+0x1f4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e00f      	b.n	8002fb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0202 	bic.w	r2, r2, #2
 8002fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7e1b      	ldrb	r3, [r3, #24]
 8002fcc:	005a      	lsls	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ffe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	3b01      	subs	r3, #1
 800300c:	035a      	lsls	r2, r3, #13
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	e007      	b.n	8003028 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003026:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003036:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	3b01      	subs	r3, #1
 8003044:	051a      	lsls	r2, r3, #20
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800305c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800306a:	025a      	lsls	r2, r3, #9
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	029a      	lsls	r2, r3, #10
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40012300 	.word	0x40012300
 80030a8:	0f000001 	.word	0x0f000001

080030ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d13c      	bne.n	8003140 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12b      	bne.n	8003138 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d127      	bne.n	8003138 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003100:	2b00      	cmp	r3, #0
 8003102:	d119      	bne.n	8003138 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0220 	bic.w	r2, r2, #32
 8003112:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fd61 	bl	8002c00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800313e:	e00e      	b.n	800315e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff fd75 	bl	8002c3c <HAL_ADC_ErrorCallback>
}
 8003152:	e004      	b.n	800315e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff fd4d 	bl	8002c14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2240      	movs	r2, #64	@ 0x40
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff fd4a 	bl	8002c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	@ (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	@ (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	@ 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	@ 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	@ (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	@ (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7ff f8d2 	bl	800259c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e099      	b.n	8003538 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003424:	e00f      	b.n	8003446 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003426:	f7ff f8b9 	bl	800259c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b05      	cmp	r3, #5
 8003432:	d908      	bls.n	8003446 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2203      	movs	r2, #3
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e078      	b.n	8003538 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e8      	bne.n	8003426 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_DMA_Init+0x158>)
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	2b04      	cmp	r3, #4
 800349e:	d107      	bne.n	80034b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d117      	bne.n	800350a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb01 	bl	8003af4 <DMA_CheckFifoParam>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2240      	movs	r2, #64	@ 0x40
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003506:	2301      	movs	r3, #1
 8003508:	e016      	b.n	8003538 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fab8 	bl	8003a88 <DMA_CalcBaseAndBitshift>
 8003518:	4603      	mov	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	223f      	movs	r2, #63	@ 0x3f
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	f010803f 	.word	0xf010803f

08003544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_DMA_Start_IT+0x26>
 8003566:	2302      	movs	r3, #2
 8003568:	e040      	b.n	80035ec <HAL_DMA_Start_IT+0xa8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d12f      	bne.n	80035de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa4a 	bl	8003a2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	223f      	movs	r2, #63	@ 0x3f
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0216 	orr.w	r2, r2, #22
 80035b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0208 	orr.w	r2, r2, #8
 80035ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e005      	b.n	80035ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
 80035e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003602:	f7fe ffcb 	bl	800259c <HAL_GetTick>
 8003606:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d008      	beq.n	8003626 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	@ 0x80
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e052      	b.n	80036cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0216 	bic.w	r2, r2, #22
 8003634:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003644:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_DMA_Abort+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0208 	bic.w	r2, r2, #8
 8003664:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003676:	e013      	b.n	80036a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003678:	f7fe ff90 	bl	800259c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b05      	cmp	r3, #5
 8003684:	d90c      	bls.n	80036a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2203      	movs	r2, #3
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e015      	b.n	80036cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e4      	bne.n	8003678 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b2:	223f      	movs	r2, #63	@ 0x3f
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d004      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2280      	movs	r2, #128	@ 0x80
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00c      	b.n	800370c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2205      	movs	r2, #5
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003724:	4b8e      	ldr	r3, [pc, #568]	@ (8003960 <HAL_DMA_IRQHandler+0x248>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a8e      	ldr	r2, [pc, #568]	@ (8003964 <HAL_DMA_IRQHandler+0x24c>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	2208      	movs	r2, #8
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01a      	beq.n	8003784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0204 	bic.w	r2, r2, #4
 800376a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2208      	movs	r2, #8
 8003772:	409a      	lsls	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	2201      	movs	r2, #1
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d012      	beq.n	80037ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2201      	movs	r2, #1
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f043 0202 	orr.w	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	2204      	movs	r2, #4
 80037c0:	409a      	lsls	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d012      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	2204      	movs	r2, #4
 80037de:	409a      	lsls	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	2210      	movs	r2, #16
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d043      	beq.n	8003888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03c      	beq.n	8003888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	2210      	movs	r2, #16
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d018      	beq.n	800385a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d024      	beq.n	8003888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
 8003846:	e01f      	b.n	8003888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
 8003858:	e016      	b.n	8003888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d107      	bne.n	8003878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0208 	bic.w	r2, r2, #8
 8003876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	2220      	movs	r2, #32
 800388e:	409a      	lsls	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 808f 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8087 	beq.w	80039b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	2220      	movs	r2, #32
 80038b0:	409a      	lsls	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d136      	bne.n	8003930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0216 	bic.w	r2, r2, #22
 80038d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x1da>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0208 	bic.w	r2, r2, #8
 8003900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	223f      	movs	r2, #63	@ 0x3f
 8003908:	409a      	lsls	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07e      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
        }
        return;
 800392e:	e079      	b.n	8003a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	2b00      	cmp	r3, #0
 8003952:	d031      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
 800395c:	e02c      	b.n	80039b8 <HAL_DMA_IRQHandler+0x2a0>
 800395e:	bf00      	nop
 8003960:	20000050 	.word	0x20000050
 8003964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e01e      	b.n	80039b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0210 	bic.w	r2, r2, #16
 8003996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d032      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d022      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2205      	movs	r2, #5
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d307      	bcc.n	8003a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f2      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x2cc>
 80039fe:	e000      	b.n	8003a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a24:	bf00      	nop
    }
  }
}
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	d108      	bne.n	8003a6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a6a:	e007      	b.n	8003a7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	3b10      	subs	r3, #16
 8003a98:	4a14      	ldr	r2, [pc, #80]	@ (8003aec <DMA_CalcBaseAndBitshift+0x64>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aa2:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d909      	bls.n	8003aca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ac8:	e007      	b.n	8003ada <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	aaaaaaab 	.word	0xaaaaaaab
 8003af0:	080095e8 	.word	0x080095e8

08003af4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11f      	bne.n	8003b4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d856      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xce>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <DMA_CheckFifoParam+0x28>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b3f 	.word	0x08003b3f
 8003b24:	08003b2d 	.word	0x08003b2d
 8003b28:	08003bc3 	.word	0x08003bc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d046      	beq.n	8003bc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3c:	e043      	b.n	8003bc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b46:	d140      	bne.n	8003bca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4c:	e03d      	b.n	8003bca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b56:	d121      	bne.n	8003b9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d837      	bhi.n	8003bce <DMA_CheckFifoParam+0xda>
 8003b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <DMA_CheckFifoParam+0x70>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b7b 	.word	0x08003b7b
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003b8d 	.word	0x08003b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e030      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d025      	beq.n	8003bd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8a:	e022      	b.n	8003bd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b94:	d11f      	bne.n	8003bd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b9a:	e01c      	b.n	8003bd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d903      	bls.n	8003baa <DMA_CheckFifoParam+0xb6>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d003      	beq.n	8003bb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ba8:	e018      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
      break;
 8003bae:	e015      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e00b      	b.n	8003bda <DMA_CheckFifoParam+0xe6>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e00a      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e008      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e006      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;   
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
    }
  } 
  
  return status; 
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e159      	b.n	8003ebc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c08:	2201      	movs	r2, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f040 8148 	bne.w	8003eb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d005      	beq.n	8003c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d130      	bne.n	8003ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 0201 	and.w	r2, r3, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d017      	beq.n	8003cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d123      	bne.n	8003d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	220f      	movs	r2, #15
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	08da      	lsrs	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3208      	adds	r2, #8
 8003d2a:	69b9      	ldr	r1, [r7, #24]
 8003d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0203 	and.w	r2, r3, #3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a2 	beq.w	8003eb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b57      	ldr	r3, [pc, #348]	@ (8003ed4 <HAL_GPIO_Init+0x2e8>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	4a56      	ldr	r2, [pc, #344]	@ (8003ed4 <HAL_GPIO_Init+0x2e8>)
 8003d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d82:	4b54      	ldr	r3, [pc, #336]	@ (8003ed4 <HAL_GPIO_Init+0x2e8>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d8e:	4a52      	ldr	r2, [pc, #328]	@ (8003ed8 <HAL_GPIO_Init+0x2ec>)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	3302      	adds	r3, #2
 8003d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a49      	ldr	r2, [pc, #292]	@ (8003edc <HAL_GPIO_Init+0x2f0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d019      	beq.n	8003dee <HAL_GPIO_Init+0x202>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a48      	ldr	r2, [pc, #288]	@ (8003ee0 <HAL_GPIO_Init+0x2f4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_GPIO_Init+0x1fe>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a47      	ldr	r2, [pc, #284]	@ (8003ee4 <HAL_GPIO_Init+0x2f8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00d      	beq.n	8003de6 <HAL_GPIO_Init+0x1fa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a46      	ldr	r2, [pc, #280]	@ (8003ee8 <HAL_GPIO_Init+0x2fc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <HAL_GPIO_Init+0x1f6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a45      	ldr	r2, [pc, #276]	@ (8003eec <HAL_GPIO_Init+0x300>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_GPIO_Init+0x1f2>
 8003dda:	2304      	movs	r3, #4
 8003ddc:	e008      	b.n	8003df0 <HAL_GPIO_Init+0x204>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x204>
 8003de2:	2303      	movs	r3, #3
 8003de4:	e004      	b.n	8003df0 <HAL_GPIO_Init+0x204>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e002      	b.n	8003df0 <HAL_GPIO_Init+0x204>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_GPIO_Init+0x204>
 8003dee:	2300      	movs	r3, #0
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f002 0203 	and.w	r2, r2, #3
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	4093      	lsls	r3, r2
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e00:	4935      	ldr	r1, [pc, #212]	@ (8003ed8 <HAL_GPIO_Init+0x2ec>)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0e:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e38:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e5c:	4a24      	ldr	r2, [pc, #144]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e62:	4b23      	ldr	r3, [pc, #140]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e86:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef0 <HAL_GPIO_Init+0x304>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	f67f aea2 	bls.w	8003c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3724      	adds	r7, #36	@ 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40020400 	.word	0x40020400
 8003ee4:	40020800 	.word	0x40020800
 8003ee8:	40020c00 	.word	0x40020c00
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40013c00 	.word	0x40013c00

08003ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f10:	e003      	b.n	8003f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e267      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d075      	beq.n	8004032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	4b88      	ldr	r3, [pc, #544]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d00c      	beq.n	8003f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4b85      	ldr	r3, [pc, #532]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d112      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b82      	ldr	r3, [pc, #520]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d05b      	beq.n	8004030 <HAL_RCC_OscConfig+0x108>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d157      	bne.n	8004030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e242      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x74>
 8003f8e:	4b76      	ldr	r3, [pc, #472]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a75      	ldr	r2, [pc, #468]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e01d      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x98>
 8003fa6:	4b70      	ldr	r3, [pc, #448]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a6f      	ldr	r2, [pc, #444]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0xb0>
 8003fc0:	4b69      	ldr	r3, [pc, #420]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a68      	ldr	r2, [pc, #416]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b66      	ldr	r3, [pc, #408]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a65      	ldr	r2, [pc, #404]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fadc 	bl	800259c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fad8 	bl	800259c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	@ 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e207      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xc0>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fac8 	bl	800259c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fac4 	bl	800259c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	@ 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1f3      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004022:	4b51      	ldr	r3, [pc, #324]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0xe8>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404a:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d11c      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b44      	ldr	r3, [pc, #272]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d116      	bne.n	8004090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e1c7      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b3b      	ldr	r3, [pc, #236]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4937      	ldr	r1, [pc, #220]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	e03a      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004098:	4b34      	ldr	r3, [pc, #208]	@ (800416c <HAL_RCC_OscConfig+0x244>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fe fa7d 	bl	800259c <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fe fa79 	bl	800259c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1a8      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b28      	ldr	r3, [pc, #160]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4925      	ldr	r1, [pc, #148]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]
 80040d8:	e015      	b.n	8004106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040da:	4b24      	ldr	r3, [pc, #144]	@ (800416c <HAL_RCC_OscConfig+0x244>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fa5c 	bl	800259c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fe fa58 	bl	800259c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e187      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d036      	beq.n	8004180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411a:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <HAL_RCC_OscConfig+0x248>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fe fa3c 	bl	800259c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004128:	f7fe fa38 	bl	800259c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e167      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413a:	4b0b      	ldr	r3, [pc, #44]	@ (8004168 <HAL_RCC_OscConfig+0x240>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x200>
 8004146:	e01b      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004148:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <HAL_RCC_OscConfig+0x248>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800414e:	f7fe fa25 	bl	800259c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	e00e      	b.n	8004174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004156:	f7fe fa21 	bl	800259c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d907      	bls.n	8004174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e150      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
 8004168:	40023800 	.word	0x40023800
 800416c:	42470000 	.word	0x42470000
 8004170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	4b88      	ldr	r3, [pc, #544]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ea      	bne.n	8004156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8097 	beq.w	80042bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004192:	4b81      	ldr	r3, [pc, #516]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	4b77      	ldr	r3, [pc, #476]	@ (800439c <HAL_RCC_OscConfig+0x474>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ca:	4b74      	ldr	r3, [pc, #464]	@ (800439c <HAL_RCC_OscConfig+0x474>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a73      	ldr	r2, [pc, #460]	@ (800439c <HAL_RCC_OscConfig+0x474>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fe f9e1 	bl	800259c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fe f9dd 	bl	800259c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e10c      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	4b6a      	ldr	r3, [pc, #424]	@ (800439c <HAL_RCC_OscConfig+0x474>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x2ea>
 8004204:	4b64      	ldr	r3, [pc, #400]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004208:	4a63      	ldr	r2, [pc, #396]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004210:	e01c      	b.n	800424c <HAL_RCC_OscConfig+0x324>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x30c>
 800421a:	4b5f      	ldr	r3, [pc, #380]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	4a5e      	ldr	r2, [pc, #376]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	@ 0x70
 8004226:	4b5c      	ldr	r3, [pc, #368]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a5b      	ldr	r2, [pc, #364]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0x324>
 8004234:	4b58      	ldr	r3, [pc, #352]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	4a57      	ldr	r2, [pc, #348]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004240:	4b55      	ldr	r3, [pc, #340]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a54      	ldr	r2, [pc, #336]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004246:	f023 0304 	bic.w	r3, r3, #4
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fe f9a2 	bl	800259c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425c:	f7fe f99e 	bl	800259c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e0cb      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004272:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ee      	beq.n	800425c <HAL_RCC_OscConfig+0x334>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fe f98c 	bl	800259c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fe f988 	bl	800259c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0b5      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429e:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1ee      	bne.n	8004288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b0:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a1 	beq.w	8004408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c6:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d05c      	beq.n	800438c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d141      	bne.n	800435e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <HAL_RCC_OscConfig+0x478>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe f95c 	bl	800259c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fe f958 	bl	800259c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e087      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b27      	ldr	r3, [pc, #156]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004314:	019b      	lsls	r3, r3, #6
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	3b01      	subs	r3, #1
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	491b      	ldr	r1, [pc, #108]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004330:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <HAL_RCC_OscConfig+0x478>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe f931 	bl	800259c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fe f92d 	bl	800259c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e05c      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004350:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x416>
 800435c:	e054      	b.n	8004408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <HAL_RCC_OscConfig+0x478>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe f91a 	bl	800259c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe f916 	bl	800259c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e045      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_RCC_OscConfig+0x470>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x444>
 800438a:	e03d      	b.n	8004408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e038      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000
 80043a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <HAL_RCC_OscConfig+0x4ec>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d028      	beq.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d121      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d11a      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043dc:	4293      	cmp	r3, r2
 80043de:	d111      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	085b      	lsrs	r3, r3, #1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800

08004418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0cc      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b68      	ldr	r3, [pc, #416]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d90c      	bls.n	8004454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b65      	ldr	r3, [pc, #404]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b63      	ldr	r3, [pc, #396]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0b8      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800446c:	4b59      	ldr	r3, [pc, #356]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a58      	ldr	r2, [pc, #352]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004484:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4a52      	ldr	r2, [pc, #328]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800448e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b50      	ldr	r3, [pc, #320]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	494d      	ldr	r1, [pc, #308]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d044      	beq.n	8004538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d119      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d003      	beq.n	80044d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b3f      	ldr	r3, [pc, #252]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e067      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b37      	ldr	r3, [pc, #220]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4934      	ldr	r1, [pc, #208]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fe f848 	bl	800259c <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fe f844 	bl	800259c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d20c      	bcs.n	8004560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b22      	ldr	r3, [pc, #136]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e032      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800456c:	4b19      	ldr	r3, [pc, #100]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4916      	ldr	r1, [pc, #88]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458a:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	490e      	ldr	r1, [pc, #56]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800459e:	f000 f821 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80045a2:	4602      	mov	r2, r0
 80045a4:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	490a      	ldr	r1, [pc, #40]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	5ccb      	ldrb	r3, [r1, r3]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd ffa8 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023c00 	.word	0x40023c00
 80045d4:	40023800 	.word	0x40023800
 80045d8:	080095d0 	.word	0x080095d0
 80045dc:	20000050 	.word	0x20000050
 80045e0:	20000054 	.word	0x20000054

080045e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e8:	b090      	sub	sp, #64	@ 0x40
 80045ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f4:	2300      	movs	r3, #0
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045fc:	4b59      	ldr	r3, [pc, #356]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d00d      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x40>
 8004608:	2b08      	cmp	r3, #8
 800460a:	f200 80a1 	bhi.w	8004750 <HAL_RCC_GetSysClockFreq+0x16c>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x34>
 8004612:	2b04      	cmp	r3, #4
 8004614:	d003      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x3a>
 8004616:	e09b      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b53      	ldr	r3, [pc, #332]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x184>)
 800461a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800461c:	e09b      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800461e:	4b53      	ldr	r3, [pc, #332]	@ (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 8004620:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004622:	e098      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004624:	4b4f      	ldr	r3, [pc, #316]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800462e:	4b4d      	ldr	r3, [pc, #308]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d028      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463a:	4b4a      	ldr	r3, [pc, #296]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	099b      	lsrs	r3, r3, #6
 8004640:	2200      	movs	r2, #0
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	627a      	str	r2, [r7, #36]	@ 0x24
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800464c:	2100      	movs	r1, #0
 800464e:	4b47      	ldr	r3, [pc, #284]	@ (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 8004650:	fb03 f201 	mul.w	r2, r3, r1
 8004654:	2300      	movs	r3, #0
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	4413      	add	r3, r2
 800465c:	4a43      	ldr	r2, [pc, #268]	@ (800476c <HAL_RCC_GetSysClockFreq+0x188>)
 800465e:	fba0 1202 	umull	r1, r2, r0, r2
 8004662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004664:	460a      	mov	r2, r1
 8004666:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466a:	4413      	add	r3, r2
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	2200      	movs	r2, #0
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	61fa      	str	r2, [r7, #28]
 8004676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800467e:	f7fc fadd 	bl	8000c3c <__aeabi_uldivmod>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4613      	mov	r3, r2
 8004688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800468a:	e053      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	2200      	movs	r2, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	617a      	str	r2, [r7, #20]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800469e:	f04f 0b00 	mov.w	fp, #0
 80046a2:	4652      	mov	r2, sl
 80046a4:	465b      	mov	r3, fp
 80046a6:	f04f 0000 	mov.w	r0, #0
 80046aa:	f04f 0100 	mov.w	r1, #0
 80046ae:	0159      	lsls	r1, r3, #5
 80046b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b4:	0150      	lsls	r0, r2, #5
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	ebb2 080a 	subs.w	r8, r2, sl
 80046be:	eb63 090b 	sbc.w	r9, r3, fp
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046d6:	ebb2 0408 	subs.w	r4, r2, r8
 80046da:	eb63 0509 	sbc.w	r5, r3, r9
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	00eb      	lsls	r3, r5, #3
 80046e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ec:	00e2      	lsls	r2, r4, #3
 80046ee:	4614      	mov	r4, r2
 80046f0:	461d      	mov	r5, r3
 80046f2:	eb14 030a 	adds.w	r3, r4, sl
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	eb45 030b 	adc.w	r3, r5, fp
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470a:	4629      	mov	r1, r5
 800470c:	028b      	lsls	r3, r1, #10
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004714:	4621      	mov	r1, r4
 8004716:	028a      	lsls	r2, r1, #10
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471e:	2200      	movs	r2, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	60fa      	str	r2, [r7, #12]
 8004724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004728:	f7fc fa88 	bl	8000c3c <__aeabi_uldivmod>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4613      	mov	r3, r2
 8004732:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x180>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800474e:	e002      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x184>)
 8004752:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004758:	4618      	mov	r0, r3
 800475a:	3740      	adds	r7, #64	@ 0x40
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800
 8004768:	00f42400 	.word	0x00f42400
 800476c:	017d7840 	.word	0x017d7840

08004770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004774:	4b03      	ldr	r3, [pc, #12]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x14>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000050 	.word	0x20000050

08004788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800478c:	f7ff fff0 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 8004790:	4602      	mov	r2, r0
 8004792:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	0a9b      	lsrs	r3, r3, #10
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	4903      	ldr	r1, [pc, #12]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800479e:	5ccb      	ldrb	r3, [r1, r3]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800
 80047ac:	080095e0 	.word	0x080095e0

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b4:	f7ff ffdc 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0b5b      	lsrs	r3, r3, #13
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4903      	ldr	r1, [pc, #12]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	080095e0 	.word	0x080095e0

080047d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e041      	b.n	800486e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd fb80 	bl	8001f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 f9a0 	bl	8004b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_TIM_PWM_Start+0x24>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e022      	b.n	80048e2 <HAL_TIM_PWM_Start+0x6a>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d109      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x3e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e015      	b.n	80048e2 <HAL_TIM_PWM_Start+0x6a>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x58>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e008      	b.n	80048e2 <HAL_TIM_PWM_Start+0x6a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e068      	b.n	80049bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0x82>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f8:	e013      	b.n	8004922 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0x92>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004908:	e00b      	b.n	8004922 <HAL_TIM_PWM_Start+0xaa>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d104      	bne.n	800491a <HAL_TIM_PWM_Start+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004918:	e003      	b.n	8004922 <HAL_TIM_PWM_Start+0xaa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fb2e 	bl	8004f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <HAL_TIM_PWM_Start+0x14c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d107      	bne.n	800494a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004948:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <HAL_TIM_PWM_Start+0x14c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_TIM_PWM_Start+0x10e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495c:	d013      	beq.n	8004986 <HAL_TIM_PWM_Start+0x10e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	@ (80049c8 <HAL_TIM_PWM_Start+0x150>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIM_PWM_Start+0x10e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	@ (80049cc <HAL_TIM_PWM_Start+0x154>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIM_PWM_Start+0x10e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a16      	ldr	r2, [pc, #88]	@ (80049d0 <HAL_TIM_PWM_Start+0x158>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_PWM_Start+0x10e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <HAL_TIM_PWM_Start+0x15c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d111      	bne.n	80049aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b06      	cmp	r3, #6
 8004996:	d010      	beq.n	80049ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	e007      	b.n	80049ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40014000 	.word	0x40014000

080049d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0ae      	b.n	8004b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	f200 809f 	bhi.w	8004b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a06:	a201      	add	r2, pc, #4	@ (adr r2, 8004a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004b45 	.word	0x08004b45
 8004a14:	08004b45 	.word	0x08004b45
 8004a18:	08004b45 	.word	0x08004b45
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004b45 	.word	0x08004b45
 8004a24:	08004b45 	.word	0x08004b45
 8004a28:	08004b45 	.word	0x08004b45
 8004a2c:	08004ac3 	.word	0x08004ac3
 8004a30:	08004b45 	.word	0x08004b45
 8004a34:	08004b45 	.word	0x08004b45
 8004a38:	08004b45 	.word	0x08004b45
 8004a3c:	08004b03 	.word	0x08004b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f914 	bl	8004c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0208 	orr.w	r2, r2, #8
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	619a      	str	r2, [r3, #24]
      break;
 8004a7e:	e064      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f95a 	bl	8004d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]
      break;
 8004ac0:	e043      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f9a5 	bl	8004e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0208 	orr.w	r2, r2, #8
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0204 	bic.w	r2, r2, #4
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
      break;
 8004b00:	e023      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f9ef 	bl	8004eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	61da      	str	r2, [r3, #28]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a37      	ldr	r2, [pc, #220]	@ (8004c5c <TIM_Base_SetConfig+0x100>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a36      	ldr	r2, [pc, #216]	@ (8004c60 <TIM_Base_SetConfig+0x104>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a35      	ldr	r2, [pc, #212]	@ (8004c64 <TIM_Base_SetConfig+0x108>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01b      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb4:	d017      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	@ (8004c5c <TIM_Base_SetConfig+0x100>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <TIM_Base_SetConfig+0x104>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00f      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <TIM_Base_SetConfig+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <TIM_Base_SetConfig+0x10c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <TIM_Base_SetConfig+0x110>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <TIM_Base_SetConfig+0x114>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 0201 	bic.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 0302 	bic.w	r3, r3, #2
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <TIM_OC1_SetConfig+0xc8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10c      	bne.n	8004cea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0308 	bic.w	r3, r3, #8
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <TIM_OC1_SetConfig+0xc8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d111      	bne.n	8004d16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40010000 	.word	0x40010000

08004d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 0210 	bic.w	r2, r3, #16
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <TIM_OC2_SetConfig+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10d      	bne.n	8004dbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	@ (8004e14 <TIM_OC2_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d113      	bne.n	8004dec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000

08004e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <TIM_OC3_SetConfig+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10d      	bne.n	8004e92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	@ (8004ee8 <TIM_OC3_SetConfig+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d113      	bne.n	8004ec2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40010000 	.word	0x40010000

08004eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a10      	ldr	r2, [pc, #64]	@ (8004f88 <TIM_OC4_SetConfig+0x9c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d109      	bne.n	8004f60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000

08004f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e050      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40014000 	.word	0x40014000

080050b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e03d      	b.n	800514c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e042      	b.n	80051f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc ff94 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800519a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 ff85 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	@ 0x28
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b20      	cmp	r3, #32
 8005216:	d175      	bne.n	8005304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_UART_Transmit+0x2c>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e06e      	b.n	8005306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2221      	movs	r2, #33	@ 0x21
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005236:	f7fd f9b1 	bl	800259c <HAL_GetTick>
 800523a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	88fa      	ldrh	r2, [r7, #6]
 8005246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005250:	d108      	bne.n	8005264 <HAL_UART_Transmit+0x6c>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e003      	b.n	800526c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800526c:	e02e      	b.n	80052cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	2180      	movs	r1, #128	@ 0x80
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fc5d 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e03a      	b.n	8005306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	3302      	adds	r3, #2
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e007      	b.n	80052be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	3301      	adds	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1cb      	bne.n	800526e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	2140      	movs	r1, #64	@ 0x40
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fc29 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e006      	b.n	8005306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08c      	sub	sp, #48	@ 0x30
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b20      	cmp	r3, #32
 8005326:	d14a      	bne.n	80053be <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e043      	b.n	80053c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	461a      	mov	r2, r3
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fc4e 	bl	8005bec <UART_Start_Receive_DMA>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d12c      	bne.n	80053b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005362:	2b01      	cmp	r3, #1
 8005364:	d125      	bne.n	80053b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	617b      	str	r3, [r7, #20]
   return(result);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f043 0310 	orr.w	r3, r3, #16
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800539c:	627a      	str	r2, [r7, #36]	@ 0x24
 800539e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6a39      	ldr	r1, [r7, #32]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80053b0:	e002      	b.n	80053b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80053b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053bc:	e000      	b.n	80053c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3730      	adds	r7, #48	@ 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0ba      	sub	sp, #232	@ 0xe8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fd81 	bl	8005f2e <UART_Receive_IT>
      return;
 800542c:	e25b      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800542e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80de 	beq.w	80055f4 <HAL_UART_IRQHandler+0x22c>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005448:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80d1 	beq.w	80055f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
 800545e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005492:	f043 0202 	orr.w	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f043 0204 	orr.w	r2, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 81f2 	beq.w	80058dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
 8005504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fd0c 	bl	8005f2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_UART_IRQHandler+0x17a>
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d04f      	beq.n	80055e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc14 	bl	8005d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005552:	2b40      	cmp	r3, #64	@ 0x40
 8005554:	d141      	bne.n	80055da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800556c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005574:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005582:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800558e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800559a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1d9      	bne.n	8005556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	4a7e      	ldr	r2, [pc, #504]	@ (80057a8 <HAL_UART_IRQHandler+0x3e0>)
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe f88c 	bl	80036d4 <HAL_DMA_Abort_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	e00e      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9a8 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d8:	e00a      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9a4 	bl	8005928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e006      	b.n	80055f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9a0 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055ee:	e175      	b.n	80058dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	bf00      	nop
    return;
 80055f2:	e173      	b.n	80058dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 814f 	bne.w	800589c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 8148 	beq.w	800589c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8141 	beq.w	800589c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b40      	cmp	r3, #64	@ 0x40
 800563c:	f040 80b6 	bne.w	80057ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800564c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8145 	beq.w	80058e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800565a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800565e:	429a      	cmp	r2, r3
 8005660:	f080 813e 	bcs.w	80058e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005676:	f000 8088 	beq.w	800578a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	330c      	adds	r3, #12
 80056a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d9      	bne.n	800567a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e1      	bne.n	80056c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3314      	adds	r3, #20
 8005722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005728:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800572c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e3      	bne.n	8005702 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005758:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575a:	f023 0310 	bic.w	r3, r3, #16
 800575e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800576c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800576e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005772:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800577a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e3      	bne.n	8005748 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	4618      	mov	r0, r3
 8005786:	f7fd ff35 	bl	80035f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	b29b      	uxth	r3, r3
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fb fdbd 	bl	8001320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a6:	e09b      	b.n	80058e0 <HAL_UART_IRQHandler+0x518>
 80057a8:	08005e37 	.word	0x08005e37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 808e 	beq.w	80058e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8089 	beq.w	80058e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80057f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e3      	bne.n	80057d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3314      	adds	r3, #20
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	623b      	str	r3, [r7, #32]
   return(result);
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3314      	adds	r3, #20
 800582a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800582e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e3      	bne.n	800580a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005874:	61fa      	str	r2, [r7, #28]
 8005876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	617b      	str	r3, [r7, #20]
   return(result);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e3      	bne.n	8005850 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800588e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fb fd43 	bl	8001320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800589a:	e023      	b.n	80058e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_UART_IRQHandler+0x4f4>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fad2 	bl	8005e5e <UART_Transmit_IT>
    return;
 80058ba:	e014      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00e      	beq.n	80058e6 <HAL_UART_IRQHandler+0x51e>
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fb12 	bl	8005efe <UART_EndTransmit_IT>
    return;
 80058da:	e004      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80058dc:	bf00      	nop
 80058de:	e002      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058e4:	bf00      	nop
  }
}
 80058e6:	37e8      	adds	r7, #232	@ 0xe8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b09c      	sub	sp, #112	@ 0x70
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d172      	bne.n	8005a3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800595a:	2200      	movs	r2, #0
 800595c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800595e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800596e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800597e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005980:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005984:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800598c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80059aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80059b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80059b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e5      	bne.n	8005992 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3314      	adds	r3, #20
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	623b      	str	r3, [r7, #32]
   return(result);
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80059de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80059e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d119      	bne.n	8005a3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0310 	bic.w	r3, r3, #16
 8005a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a2a:	61fa      	str	r2, [r7, #28]
 8005a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	69b9      	ldr	r1, [r7, #24]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	617b      	str	r3, [r7, #20]
   return(result);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a40:	2200      	movs	r2, #0
 8005a42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d106      	bne.n	8005a5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a50:	4619      	mov	r1, r3
 8005a52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a54:	f7fb fc64 	bl	8001320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a58:	e002      	b.n	8005a60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a5c:	f7ff ff50 	bl	8005900 <HAL_UART_RxCpltCallback>
}
 8005a60:	bf00      	nop
 8005a62:	3770      	adds	r7, #112	@ 0x70
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d108      	bne.n	8005a96 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7fb fc46 	bl	8001320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a94:	e002      	b.n	8005a9c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ff3c 	bl	8005914 <HAL_UART_RxHalfCpltCallback>
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac0:	2b80      	cmp	r3, #128	@ 0x80
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b21      	cmp	r3, #33	@ 0x21
 8005ad6:	d108      	bne.n	8005aea <UART_DMAError+0x46>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ae4:	68b8      	ldr	r0, [r7, #8]
 8005ae6:	f000 f91b 	bl	8005d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b22      	cmp	r3, #34	@ 0x22
 8005b0a:	d108      	bne.n	8005b1e <UART_DMAError+0x7a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005b18:	68b8      	ldr	r0, [r7, #8]
 8005b1a:	f000 f929 	bl	8005d70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f043 0210 	orr.w	r2, r3, #16
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b2a:	68b8      	ldr	r0, [r7, #8]
 8005b2c:	f7ff fefc 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b48:	e03b      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b50:	d037      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fc fd23 	bl	800259c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e03a      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d023      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b80      	cmp	r3, #128	@ 0x80
 8005b7e:	d020      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b40      	cmp	r3, #64	@ 0x40
 8005b84:	d01d      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d116      	bne.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f8e0 	bl	8005d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e00f      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d0b4      	beq.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b098      	sub	sp, #96	@ 0x60
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2222      	movs	r2, #34	@ 0x22
 8005c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	4a3e      	ldr	r2, [pc, #248]	@ (8005d14 <UART_Start_Receive_DMA+0x128>)
 8005c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c20:	4a3d      	ldr	r2, [pc, #244]	@ (8005d18 <UART_Start_Receive_DMA+0x12c>)
 8005c22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	4a3c      	ldr	r2, [pc, #240]	@ (8005d1c <UART_Start_Receive_DMA+0x130>)
 8005c2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	2200      	movs	r2, #0
 8005c32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	f7fd fc7a 	bl	8003544 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d019      	beq.n	8005ca2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c8e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e5      	bne.n	8005c6e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cc2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005cc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cec:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3314      	adds	r3, #20
 8005cf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6a39      	ldr	r1, [r7, #32]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e5      	bne.n	8005cd6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3760      	adds	r7, #96	@ 0x60
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	0800593d 	.word	0x0800593d
 8005d18:	08005a69 	.word	0x08005a69
 8005d1c:	08005aa5 	.word	0x08005aa5

08005d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	@ 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	61ba      	str	r2, [r7, #24]
 8005d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6979      	ldr	r1, [r7, #20]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e5      	bne.n	8005d28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005d64:	bf00      	nop
 8005d66:	3724      	adds	r7, #36	@ 0x24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b095      	sub	sp, #84	@ 0x54
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d98:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d119      	bne.n	8005e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f023 0310 	bic.w	r3, r3, #16
 8005dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e08:	61ba      	str	r2, [r7, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6979      	ldr	r1, [r7, #20]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	613b      	str	r3, [r7, #16]
   return(result);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e2a:	bf00      	nop
 8005e2c:	3754      	adds	r7, #84	@ 0x54
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fd69 	bl	8005928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b21      	cmp	r3, #33	@ 0x21
 8005e70:	d13e      	bne.n	8005ef0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7a:	d114      	bne.n	8005ea6 <UART_Transmit_IT+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d110      	bne.n	8005ea6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	1c9a      	adds	r2, r3, #2
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]
 8005ea4:	e008      	b.n	8005eb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	1c59      	adds	r1, r3, #1
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6211      	str	r1, [r2, #32]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10f      	bne.n	8005eec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fce4 	bl	80058ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08c      	sub	sp, #48	@ 0x30
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b22      	cmp	r3, #34	@ 0x22
 8005f40:	f040 80ae 	bne.w	80060a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4c:	d117      	bne.n	8005f7e <UART_Receive_IT+0x50>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d113      	bne.n	8005f7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f7c:	e026      	b.n	8005fcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f90:	d007      	beq.n	8005fa2 <UART_Receive_IT+0x74>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <UART_Receive_IT+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e008      	b.n	8005fc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d15d      	bne.n	800609c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0220 	bic.w	r2, r2, #32
 8005fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	2b01      	cmp	r3, #1
 8006024:	d135      	bne.n	8006092 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d10a      	bne.n	8006084 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb f948 	bl	8001320 <HAL_UARTEx_RxEventCallback>
 8006090:	e002      	b.n	8006098 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fc34 	bl	8005900 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e002      	b.n	80060a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3730      	adds	r7, #48	@ 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	@ 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	ea40 0301 	orr.w	r3, r0, r1
 80060d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006104:	f021 010c 	bic.w	r1, r1, #12
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006112:	430b      	orrs	r3, r1
 8006114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	ea40 0301 	orr.w	r3, r0, r1
 8006132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b8f      	ldr	r3, [pc, #572]	@ (8006378 <UART_SetConfig+0x2cc>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0xa0>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b8d      	ldr	r3, [pc, #564]	@ (800637c <UART_SetConfig+0x2d0>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d104      	bne.n	8006156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fb30 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006150:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006154:	e003      	b.n	800615e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe fb17 	bl	8004788 <HAL_RCC_GetPCLK1Freq>
 800615a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006168:	f040 810c 	bne.w	8006384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006176:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800617a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	1891      	adds	r1, r2, r2
 8006184:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006186:	415b      	adcs	r3, r3
 8006188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800618a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800618e:	4621      	mov	r1, r4
 8006190:	eb12 0801 	adds.w	r8, r2, r1
 8006194:	4629      	mov	r1, r5
 8006196:	eb43 0901 	adc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061bc:	462b      	mov	r3, r5
 80061be:	eb49 0303 	adc.w	r3, r9, r3
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061da:	460b      	mov	r3, r1
 80061dc:	18db      	adds	r3, r3, r3
 80061de:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e0:	4613      	mov	r3, r2
 80061e2:	eb42 0303 	adc.w	r3, r2, r3
 80061e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061f0:	f7fa fd24 	bl	8000c3c <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b61      	ldr	r3, [pc, #388]	@ (8006380 <UART_SetConfig+0x2d4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800620c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800621c:	415b      	adcs	r3, r3
 800621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006224:	4641      	mov	r1, r8
 8006226:	eb12 0a01 	adds.w	sl, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb43 0b01 	adc.w	fp, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800623c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006244:	4692      	mov	sl, r2
 8006246:	469b      	mov	fp, r3
 8006248:	4643      	mov	r3, r8
 800624a:	eb1a 0303 	adds.w	r3, sl, r3
 800624e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006252:	464b      	mov	r3, r9
 8006254:	eb4b 0303 	adc.w	r3, fp, r3
 8006258:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006268:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800626c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006270:	460b      	mov	r3, r1
 8006272:	18db      	adds	r3, r3, r3
 8006274:	643b      	str	r3, [r7, #64]	@ 0x40
 8006276:	4613      	mov	r3, r2
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	647b      	str	r3, [r7, #68]	@ 0x44
 800627e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006286:	f7fa fcd9 	bl	8000c3c <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4611      	mov	r1, r2
 8006290:	4b3b      	ldr	r3, [pc, #236]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006292:	fba3 2301 	umull	r2, r3, r3, r1
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2264      	movs	r2, #100	@ 0x64
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	1acb      	subs	r3, r1, r3
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062a6:	4b36      	ldr	r3, [pc, #216]	@ (8006380 <UART_SetConfig+0x2d4>)
 80062a8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b4:	441c      	add	r4, r3
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062d0:	415b      	adcs	r3, r3
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006324:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800632c:	460b      	mov	r3, r1
 800632e:	18db      	adds	r3, r3, r3
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006332:	4613      	mov	r3, r2
 8006334:	eb42 0303 	adc.w	r3, r2, r3
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800633a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800633e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006342:	f7fa fc7b 	bl	8000c3c <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <UART_SetConfig+0x2d4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	@ 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3332      	adds	r3, #50	@ 0x32
 800635e:	4a08      	ldr	r2, [pc, #32]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 0207 	and.w	r2, r3, #7
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4422      	add	r2, r4
 8006372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006374:	e106      	b.n	8006584 <UART_SetConfig+0x4d8>
 8006376:	bf00      	nop
 8006378:	40011000 	.word	0x40011000
 800637c:	40011400 	.word	0x40011400
 8006380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800638e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	1891      	adds	r1, r2, r2
 800639c:	6239      	str	r1, [r7, #32]
 800639e:	415b      	adcs	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a6:	4641      	mov	r1, r8
 80063a8:	1854      	adds	r4, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0501 	adc.w	r5, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	00eb      	lsls	r3, r5, #3
 80063ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063be:	00e2      	lsls	r2, r4, #3
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	4643      	mov	r3, r8
 80063c6:	18e3      	adds	r3, r4, r3
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063cc:	464b      	mov	r3, r9
 80063ce:	eb45 0303 	adc.w	r3, r5, r3
 80063d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063f2:	4629      	mov	r1, r5
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fc:	4621      	mov	r1, r4
 80063fe:	008a      	lsls	r2, r1, #2
 8006400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006404:	f7fa fc1a 	bl	8000c3c <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b60      	ldr	r3, [pc, #384]	@ (8006590 <UART_SetConfig+0x4e4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006420:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	61b9      	str	r1, [r7, #24]
 8006430:	415b      	adcs	r3, r3
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6139      	str	r1, [r7, #16]
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006482:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064a2:	f7fa fbcb 	bl	8000c3c <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064ae:	fba3 2301 	umull	r2, r3, r3, r1
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	2264      	movs	r2, #100	@ 0x64
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	1acb      	subs	r3, r1, r3
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	3332      	adds	r3, #50	@ 0x32
 80064c0:	4a33      	ldr	r2, [pc, #204]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064cc:	441c      	add	r4, r3
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800651e:	464b      	mov	r3, r9
 8006520:	460a      	mov	r2, r1
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	663b      	str	r3, [r7, #96]	@ 0x60
 8006532:	667a      	str	r2, [r7, #100]	@ 0x64
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006540:	4649      	mov	r1, r9
 8006542:	008b      	lsls	r3, r1, #2
 8006544:	4641      	mov	r1, r8
 8006546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654a:	4641      	mov	r1, r8
 800654c:	008a      	lsls	r2, r1, #2
 800654e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006552:	f7fa fb73 	bl	8000c3c <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <UART_SetConfig+0x4e4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	@ 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	3332      	adds	r3, #50	@ 0x32
 800656e:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <UART_SetConfig+0x4e4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 020f 	and.w	r2, r3, #15
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4422      	add	r2, r4
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006590:	51eb851f 	.word	0x51eb851f

08006594 <atof>:
 8006594:	2100      	movs	r1, #0
 8006596:	f000 beff 	b.w	8007398 <strtod>
	...

0800659c <sniprintf>:
 800659c:	b40c      	push	{r2, r3}
 800659e:	b530      	push	{r4, r5, lr}
 80065a0:	4b18      	ldr	r3, [pc, #96]	@ (8006604 <sniprintf+0x68>)
 80065a2:	1e0c      	subs	r4, r1, #0
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	b09d      	sub	sp, #116	@ 0x74
 80065a8:	da08      	bge.n	80065bc <sniprintf+0x20>
 80065aa:	238b      	movs	r3, #139	@ 0x8b
 80065ac:	602b      	str	r3, [r5, #0]
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065b2:	b01d      	add	sp, #116	@ 0x74
 80065b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b8:	b002      	add	sp, #8
 80065ba:	4770      	bx	lr
 80065bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80065ca:	bf14      	ite	ne
 80065cc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80065d0:	4623      	moveq	r3, r4
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065da:	9002      	str	r0, [sp, #8]
 80065dc:	9006      	str	r0, [sp, #24]
 80065de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065e4:	ab21      	add	r3, sp, #132	@ 0x84
 80065e6:	a902      	add	r1, sp, #8
 80065e8:	4628      	mov	r0, r5
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f001 faf0 	bl	8007bd0 <_svfiprintf_r>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	bfbc      	itt	lt
 80065f4:	238b      	movlt	r3, #139	@ 0x8b
 80065f6:	602b      	strlt	r3, [r5, #0]
 80065f8:	2c00      	cmp	r4, #0
 80065fa:	d0da      	beq.n	80065b2 <sniprintf+0x16>
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e7d6      	b.n	80065b2 <sniprintf+0x16>
 8006604:	200001d4 	.word	0x200001d4

08006608 <siprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b510      	push	{r4, lr}
 800660c:	b09d      	sub	sp, #116	@ 0x74
 800660e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006618:	480a      	ldr	r0, [pc, #40]	@ (8006644 <siprintf+0x3c>)
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	9104      	str	r1, [sp, #16]
 800661e:	490a      	ldr	r1, [pc, #40]	@ (8006648 <siprintf+0x40>)
 8006620:	f853 2b04 	ldr.w	r2, [r3], #4
 8006624:	9105      	str	r1, [sp, #20]
 8006626:	2400      	movs	r4, #0
 8006628:	a902      	add	r1, sp, #8
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006630:	f001 face 	bl	8007bd0 <_svfiprintf_r>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	701c      	strb	r4, [r3, #0]
 8006638:	b01d      	add	sp, #116	@ 0x74
 800663a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663e:	b003      	add	sp, #12
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200001d4 	.word	0x200001d4
 8006648:	ffff0208 	.word	0xffff0208

0800664c <std>:
 800664c:	2300      	movs	r3, #0
 800664e:	b510      	push	{r4, lr}
 8006650:	4604      	mov	r4, r0
 8006652:	e9c0 3300 	strd	r3, r3, [r0]
 8006656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800665a:	6083      	str	r3, [r0, #8]
 800665c:	8181      	strh	r1, [r0, #12]
 800665e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006660:	81c2      	strh	r2, [r0, #14]
 8006662:	6183      	str	r3, [r0, #24]
 8006664:	4619      	mov	r1, r3
 8006666:	2208      	movs	r2, #8
 8006668:	305c      	adds	r0, #92	@ 0x5c
 800666a:	f000 febf 	bl	80073ec <memset>
 800666e:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <std+0x58>)
 8006670:	6263      	str	r3, [r4, #36]	@ 0x24
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <std+0x5c>)
 8006674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <std+0x60>)
 8006678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <std+0x64>)
 800667c:	6323      	str	r3, [r4, #48]	@ 0x30
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <std+0x68>)
 8006680:	6224      	str	r4, [r4, #32]
 8006682:	429c      	cmp	r4, r3
 8006684:	d006      	beq.n	8006694 <std+0x48>
 8006686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800668a:	4294      	cmp	r4, r2
 800668c:	d002      	beq.n	8006694 <std+0x48>
 800668e:	33d0      	adds	r3, #208	@ 0xd0
 8006690:	429c      	cmp	r4, r3
 8006692:	d105      	bne.n	80066a0 <std+0x54>
 8006694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f000 beea 	b.w	8007474 <__retarget_lock_init_recursive>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	08008d0d 	.word	0x08008d0d
 80066a8:	08008d2f 	.word	0x08008d2f
 80066ac:	08008d67 	.word	0x08008d67
 80066b0:	08008d8b 	.word	0x08008d8b
 80066b4:	200004e0 	.word	0x200004e0

080066b8 <stdio_exit_handler>:
 80066b8:	4a02      	ldr	r2, [pc, #8]	@ (80066c4 <stdio_exit_handler+0xc>)
 80066ba:	4903      	ldr	r1, [pc, #12]	@ (80066c8 <stdio_exit_handler+0x10>)
 80066bc:	4803      	ldr	r0, [pc, #12]	@ (80066cc <stdio_exit_handler+0x14>)
 80066be:	f000 be77 	b.w	80073b0 <_fwalk_sglue>
 80066c2:	bf00      	nop
 80066c4:	2000005c 	.word	0x2000005c
 80066c8:	08008351 	.word	0x08008351
 80066cc:	200001d8 	.word	0x200001d8

080066d0 <cleanup_stdio>:
 80066d0:	6841      	ldr	r1, [r0, #4]
 80066d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <cleanup_stdio+0x34>)
 80066d4:	4299      	cmp	r1, r3
 80066d6:	b510      	push	{r4, lr}
 80066d8:	4604      	mov	r4, r0
 80066da:	d001      	beq.n	80066e0 <cleanup_stdio+0x10>
 80066dc:	f001 fe38 	bl	8008350 <_fflush_r>
 80066e0:	68a1      	ldr	r1, [r4, #8]
 80066e2:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <cleanup_stdio+0x38>)
 80066e4:	4299      	cmp	r1, r3
 80066e6:	d002      	beq.n	80066ee <cleanup_stdio+0x1e>
 80066e8:	4620      	mov	r0, r4
 80066ea:	f001 fe31 	bl	8008350 <_fflush_r>
 80066ee:	68e1      	ldr	r1, [r4, #12]
 80066f0:	4b06      	ldr	r3, [pc, #24]	@ (800670c <cleanup_stdio+0x3c>)
 80066f2:	4299      	cmp	r1, r3
 80066f4:	d004      	beq.n	8006700 <cleanup_stdio+0x30>
 80066f6:	4620      	mov	r0, r4
 80066f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fc:	f001 be28 	b.w	8008350 <_fflush_r>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	bf00      	nop
 8006704:	200004e0 	.word	0x200004e0
 8006708:	20000548 	.word	0x20000548
 800670c:	200005b0 	.word	0x200005b0

08006710 <global_stdio_init.part.0>:
 8006710:	b510      	push	{r4, lr}
 8006712:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <global_stdio_init.part.0+0x30>)
 8006714:	4c0b      	ldr	r4, [pc, #44]	@ (8006744 <global_stdio_init.part.0+0x34>)
 8006716:	4a0c      	ldr	r2, [pc, #48]	@ (8006748 <global_stdio_init.part.0+0x38>)
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	4620      	mov	r0, r4
 800671c:	2200      	movs	r2, #0
 800671e:	2104      	movs	r1, #4
 8006720:	f7ff ff94 	bl	800664c <std>
 8006724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006728:	2201      	movs	r2, #1
 800672a:	2109      	movs	r1, #9
 800672c:	f7ff ff8e 	bl	800664c <std>
 8006730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006734:	2202      	movs	r2, #2
 8006736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673a:	2112      	movs	r1, #18
 800673c:	f7ff bf86 	b.w	800664c <std>
 8006740:	20000618 	.word	0x20000618
 8006744:	200004e0 	.word	0x200004e0
 8006748:	080066b9 	.word	0x080066b9

0800674c <__sfp_lock_acquire>:
 800674c:	4801      	ldr	r0, [pc, #4]	@ (8006754 <__sfp_lock_acquire+0x8>)
 800674e:	f000 be92 	b.w	8007476 <__retarget_lock_acquire_recursive>
 8006752:	bf00      	nop
 8006754:	2000061d 	.word	0x2000061d

08006758 <__sfp_lock_release>:
 8006758:	4801      	ldr	r0, [pc, #4]	@ (8006760 <__sfp_lock_release+0x8>)
 800675a:	f000 be8d 	b.w	8007478 <__retarget_lock_release_recursive>
 800675e:	bf00      	nop
 8006760:	2000061d 	.word	0x2000061d

08006764 <__sinit>:
 8006764:	b510      	push	{r4, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	f7ff fff0 	bl	800674c <__sfp_lock_acquire>
 800676c:	6a23      	ldr	r3, [r4, #32]
 800676e:	b11b      	cbz	r3, 8006778 <__sinit+0x14>
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006774:	f7ff bff0 	b.w	8006758 <__sfp_lock_release>
 8006778:	4b04      	ldr	r3, [pc, #16]	@ (800678c <__sinit+0x28>)
 800677a:	6223      	str	r3, [r4, #32]
 800677c:	4b04      	ldr	r3, [pc, #16]	@ (8006790 <__sinit+0x2c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f5      	bne.n	8006770 <__sinit+0xc>
 8006784:	f7ff ffc4 	bl	8006710 <global_stdio_init.part.0>
 8006788:	e7f2      	b.n	8006770 <__sinit+0xc>
 800678a:	bf00      	nop
 800678c:	080066d1 	.word	0x080066d1
 8006790:	20000618 	.word	0x20000618

08006794 <sulp>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4604      	mov	r4, r0
 8006798:	460d      	mov	r5, r1
 800679a:	ec45 4b10 	vmov	d0, r4, r5
 800679e:	4616      	mov	r6, r2
 80067a0:	f002 f976 	bl	8008a90 <__ulp>
 80067a4:	ec51 0b10 	vmov	r0, r1, d0
 80067a8:	b17e      	cbz	r6, 80067ca <sulp+0x36>
 80067aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd09      	ble.n	80067ca <sulp+0x36>
 80067b6:	051b      	lsls	r3, r3, #20
 80067b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80067bc:	2400      	movs	r4, #0
 80067be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80067c2:	4622      	mov	r2, r4
 80067c4:	462b      	mov	r3, r5
 80067c6:	f7f9 ff2f 	bl	8000628 <__aeabi_dmul>
 80067ca:	ec41 0b10 	vmov	d0, r0, r1
 80067ce:	bd70      	pop	{r4, r5, r6, pc}

080067d0 <_strtod_l>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	b09f      	sub	sp, #124	@ 0x7c
 80067d6:	460c      	mov	r4, r1
 80067d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80067da:	2200      	movs	r2, #0
 80067dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80067de:	9005      	str	r0, [sp, #20]
 80067e0:	f04f 0a00 	mov.w	sl, #0
 80067e4:	f04f 0b00 	mov.w	fp, #0
 80067e8:	460a      	mov	r2, r1
 80067ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80067ec:	7811      	ldrb	r1, [r2, #0]
 80067ee:	292b      	cmp	r1, #43	@ 0x2b
 80067f0:	d04a      	beq.n	8006888 <_strtod_l+0xb8>
 80067f2:	d838      	bhi.n	8006866 <_strtod_l+0x96>
 80067f4:	290d      	cmp	r1, #13
 80067f6:	d832      	bhi.n	800685e <_strtod_l+0x8e>
 80067f8:	2908      	cmp	r1, #8
 80067fa:	d832      	bhi.n	8006862 <_strtod_l+0x92>
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d03b      	beq.n	8006878 <_strtod_l+0xa8>
 8006800:	2200      	movs	r2, #0
 8006802:	920e      	str	r2, [sp, #56]	@ 0x38
 8006804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006806:	782a      	ldrb	r2, [r5, #0]
 8006808:	2a30      	cmp	r2, #48	@ 0x30
 800680a:	f040 80b2 	bne.w	8006972 <_strtod_l+0x1a2>
 800680e:	786a      	ldrb	r2, [r5, #1]
 8006810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006814:	2a58      	cmp	r2, #88	@ 0x58
 8006816:	d16e      	bne.n	80068f6 <_strtod_l+0x126>
 8006818:	9302      	str	r3, [sp, #8]
 800681a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4a8f      	ldr	r2, [pc, #572]	@ (8006a60 <_strtod_l+0x290>)
 8006824:	9805      	ldr	r0, [sp, #20]
 8006826:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006828:	a919      	add	r1, sp, #100	@ 0x64
 800682a:	f000 fea5 	bl	8007578 <__gethex>
 800682e:	f010 060f 	ands.w	r6, r0, #15
 8006832:	4604      	mov	r4, r0
 8006834:	d005      	beq.n	8006842 <_strtod_l+0x72>
 8006836:	2e06      	cmp	r6, #6
 8006838:	d128      	bne.n	800688c <_strtod_l+0xbc>
 800683a:	3501      	adds	r5, #1
 800683c:	2300      	movs	r3, #0
 800683e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006840:	930e      	str	r3, [sp, #56]	@ 0x38
 8006842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 858e 	bne.w	8007366 <_strtod_l+0xb96>
 800684a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684c:	b1cb      	cbz	r3, 8006882 <_strtod_l+0xb2>
 800684e:	4652      	mov	r2, sl
 8006850:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006854:	ec43 2b10 	vmov	d0, r2, r3
 8006858:	b01f      	add	sp, #124	@ 0x7c
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	2920      	cmp	r1, #32
 8006860:	d1ce      	bne.n	8006800 <_strtod_l+0x30>
 8006862:	3201      	adds	r2, #1
 8006864:	e7c1      	b.n	80067ea <_strtod_l+0x1a>
 8006866:	292d      	cmp	r1, #45	@ 0x2d
 8006868:	d1ca      	bne.n	8006800 <_strtod_l+0x30>
 800686a:	2101      	movs	r1, #1
 800686c:	910e      	str	r1, [sp, #56]	@ 0x38
 800686e:	1c51      	adds	r1, r2, #1
 8006870:	9119      	str	r1, [sp, #100]	@ 0x64
 8006872:	7852      	ldrb	r2, [r2, #1]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d1c5      	bne.n	8006804 <_strtod_l+0x34>
 8006878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800687a:	9419      	str	r4, [sp, #100]	@ 0x64
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8570 	bne.w	8007362 <_strtod_l+0xb92>
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	e7e5      	b.n	8006854 <_strtod_l+0x84>
 8006888:	2100      	movs	r1, #0
 800688a:	e7ef      	b.n	800686c <_strtod_l+0x9c>
 800688c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800688e:	b13a      	cbz	r2, 80068a0 <_strtod_l+0xd0>
 8006890:	2135      	movs	r1, #53	@ 0x35
 8006892:	a81c      	add	r0, sp, #112	@ 0x70
 8006894:	f002 f9f6 	bl	8008c84 <__copybits>
 8006898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800689a:	9805      	ldr	r0, [sp, #20]
 800689c:	f001 fdcc 	bl	8008438 <_Bfree>
 80068a0:	3e01      	subs	r6, #1
 80068a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80068a4:	2e04      	cmp	r6, #4
 80068a6:	d806      	bhi.n	80068b6 <_strtod_l+0xe6>
 80068a8:	e8df f006 	tbb	[pc, r6]
 80068ac:	201d0314 	.word	0x201d0314
 80068b0:	14          	.byte	0x14
 80068b1:	00          	.byte	0x00
 80068b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80068b6:	05e1      	lsls	r1, r4, #23
 80068b8:	bf48      	it	mi
 80068ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80068be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068c2:	0d1b      	lsrs	r3, r3, #20
 80068c4:	051b      	lsls	r3, r3, #20
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1bb      	bne.n	8006842 <_strtod_l+0x72>
 80068ca:	f000 fda9 	bl	8007420 <__errno>
 80068ce:	2322      	movs	r3, #34	@ 0x22
 80068d0:	6003      	str	r3, [r0, #0]
 80068d2:	e7b6      	b.n	8006842 <_strtod_l+0x72>
 80068d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80068d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80068dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068e4:	e7e7      	b.n	80068b6 <_strtod_l+0xe6>
 80068e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006a68 <_strtod_l+0x298>
 80068ea:	e7e4      	b.n	80068b6 <_strtod_l+0xe6>
 80068ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068f0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80068f4:	e7df      	b.n	80068b6 <_strtod_l+0xe6>
 80068f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b30      	cmp	r3, #48	@ 0x30
 8006900:	d0f9      	beq.n	80068f6 <_strtod_l+0x126>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d09d      	beq.n	8006842 <_strtod_l+0x72>
 8006906:	2301      	movs	r3, #1
 8006908:	2700      	movs	r7, #0
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800690e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006910:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006912:	46b9      	mov	r9, r7
 8006914:	220a      	movs	r2, #10
 8006916:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006918:	7805      	ldrb	r5, [r0, #0]
 800691a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800691e:	b2d9      	uxtb	r1, r3
 8006920:	2909      	cmp	r1, #9
 8006922:	d928      	bls.n	8006976 <_strtod_l+0x1a6>
 8006924:	494f      	ldr	r1, [pc, #316]	@ (8006a64 <_strtod_l+0x294>)
 8006926:	2201      	movs	r2, #1
 8006928:	f000 fd68 	bl	80073fc <strncmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	d032      	beq.n	8006996 <_strtod_l+0x1c6>
 8006930:	2000      	movs	r0, #0
 8006932:	462a      	mov	r2, r5
 8006934:	900a      	str	r0, [sp, #40]	@ 0x28
 8006936:	464d      	mov	r5, r9
 8006938:	4603      	mov	r3, r0
 800693a:	2a65      	cmp	r2, #101	@ 0x65
 800693c:	d001      	beq.n	8006942 <_strtod_l+0x172>
 800693e:	2a45      	cmp	r2, #69	@ 0x45
 8006940:	d114      	bne.n	800696c <_strtod_l+0x19c>
 8006942:	b91d      	cbnz	r5, 800694c <_strtod_l+0x17c>
 8006944:	9a08      	ldr	r2, [sp, #32]
 8006946:	4302      	orrs	r2, r0
 8006948:	d096      	beq.n	8006878 <_strtod_l+0xa8>
 800694a:	2500      	movs	r5, #0
 800694c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800694e:	1c62      	adds	r2, r4, #1
 8006950:	9219      	str	r2, [sp, #100]	@ 0x64
 8006952:	7862      	ldrb	r2, [r4, #1]
 8006954:	2a2b      	cmp	r2, #43	@ 0x2b
 8006956:	d07a      	beq.n	8006a4e <_strtod_l+0x27e>
 8006958:	2a2d      	cmp	r2, #45	@ 0x2d
 800695a:	d07e      	beq.n	8006a5a <_strtod_l+0x28a>
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006964:	2909      	cmp	r1, #9
 8006966:	f240 8085 	bls.w	8006a74 <_strtod_l+0x2a4>
 800696a:	9419      	str	r4, [sp, #100]	@ 0x64
 800696c:	f04f 0800 	mov.w	r8, #0
 8006970:	e0a5      	b.n	8006abe <_strtod_l+0x2ee>
 8006972:	2300      	movs	r3, #0
 8006974:	e7c8      	b.n	8006908 <_strtod_l+0x138>
 8006976:	f1b9 0f08 	cmp.w	r9, #8
 800697a:	bfd8      	it	le
 800697c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800697e:	f100 0001 	add.w	r0, r0, #1
 8006982:	bfda      	itte	le
 8006984:	fb02 3301 	mlale	r3, r2, r1, r3
 8006988:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800698a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800698e:	f109 0901 	add.w	r9, r9, #1
 8006992:	9019      	str	r0, [sp, #100]	@ 0x64
 8006994:	e7bf      	b.n	8006916 <_strtod_l+0x146>
 8006996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	9219      	str	r2, [sp, #100]	@ 0x64
 800699c:	785a      	ldrb	r2, [r3, #1]
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	d03b      	beq.n	8006a1c <_strtod_l+0x24c>
 80069a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80069a6:	464d      	mov	r5, r9
 80069a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80069ac:	2b09      	cmp	r3, #9
 80069ae:	d912      	bls.n	80069d6 <_strtod_l+0x206>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e7c2      	b.n	800693a <_strtod_l+0x16a>
 80069b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80069ba:	785a      	ldrb	r2, [r3, #1]
 80069bc:	3001      	adds	r0, #1
 80069be:	2a30      	cmp	r2, #48	@ 0x30
 80069c0:	d0f8      	beq.n	80069b4 <_strtod_l+0x1e4>
 80069c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80069c6:	2b08      	cmp	r3, #8
 80069c8:	f200 84d2 	bhi.w	8007370 <_strtod_l+0xba0>
 80069cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80069d0:	2000      	movs	r0, #0
 80069d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80069d4:	4605      	mov	r5, r0
 80069d6:	3a30      	subs	r2, #48	@ 0x30
 80069d8:	f100 0301 	add.w	r3, r0, #1
 80069dc:	d018      	beq.n	8006a10 <_strtod_l+0x240>
 80069de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069e0:	4419      	add	r1, r3
 80069e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80069e4:	462e      	mov	r6, r5
 80069e6:	f04f 0e0a 	mov.w	lr, #10
 80069ea:	1c71      	adds	r1, r6, #1
 80069ec:	eba1 0c05 	sub.w	ip, r1, r5
 80069f0:	4563      	cmp	r3, ip
 80069f2:	dc15      	bgt.n	8006a20 <_strtod_l+0x250>
 80069f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80069f8:	182b      	adds	r3, r5, r0
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	f105 0501 	add.w	r5, r5, #1
 8006a00:	4405      	add	r5, r0
 8006a02:	dc1a      	bgt.n	8006a3a <_strtod_l+0x26a>
 8006a04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a06:	230a      	movs	r3, #10
 8006a08:	fb03 2301 	mla	r3, r3, r1, r2
 8006a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a0e:	2300      	movs	r3, #0
 8006a10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a12:	1c51      	adds	r1, r2, #1
 8006a14:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a16:	7852      	ldrb	r2, [r2, #1]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	e7c5      	b.n	80069a8 <_strtod_l+0x1d8>
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	e7ce      	b.n	80069be <_strtod_l+0x1ee>
 8006a20:	2e08      	cmp	r6, #8
 8006a22:	dc05      	bgt.n	8006a30 <_strtod_l+0x260>
 8006a24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a26:	fb0e f606 	mul.w	r6, lr, r6
 8006a2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	e7dc      	b.n	80069ea <_strtod_l+0x21a>
 8006a30:	2910      	cmp	r1, #16
 8006a32:	bfd8      	it	le
 8006a34:	fb0e f707 	mulle.w	r7, lr, r7
 8006a38:	e7f8      	b.n	8006a2c <_strtod_l+0x25c>
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	bfdc      	itt	le
 8006a3e:	230a      	movle	r3, #10
 8006a40:	fb03 2707 	mlale	r7, r3, r7, r2
 8006a44:	e7e3      	b.n	8006a0e <_strtod_l+0x23e>
 8006a46:	2300      	movs	r3, #0
 8006a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e77a      	b.n	8006944 <_strtod_l+0x174>
 8006a4e:	f04f 0c00 	mov.w	ip, #0
 8006a52:	1ca2      	adds	r2, r4, #2
 8006a54:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a56:	78a2      	ldrb	r2, [r4, #2]
 8006a58:	e782      	b.n	8006960 <_strtod_l+0x190>
 8006a5a:	f04f 0c01 	mov.w	ip, #1
 8006a5e:	e7f8      	b.n	8006a52 <_strtod_l+0x282>
 8006a60:	0800976c 	.word	0x0800976c
 8006a64:	080095f0 	.word	0x080095f0
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a6e:	1c51      	adds	r1, r2, #1
 8006a70:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a72:	7852      	ldrb	r2, [r2, #1]
 8006a74:	2a30      	cmp	r2, #48	@ 0x30
 8006a76:	d0f9      	beq.n	8006a6c <_strtod_l+0x29c>
 8006a78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a7c:	2908      	cmp	r1, #8
 8006a7e:	f63f af75 	bhi.w	800696c <_strtod_l+0x19c>
 8006a82:	3a30      	subs	r2, #48	@ 0x30
 8006a84:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a8a:	f04f 080a 	mov.w	r8, #10
 8006a8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a90:	1c56      	adds	r6, r2, #1
 8006a92:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a94:	7852      	ldrb	r2, [r2, #1]
 8006a96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a9a:	f1be 0f09 	cmp.w	lr, #9
 8006a9e:	d939      	bls.n	8006b14 <_strtod_l+0x344>
 8006aa0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006aa2:	1a76      	subs	r6, r6, r1
 8006aa4:	2e08      	cmp	r6, #8
 8006aa6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006aaa:	dc03      	bgt.n	8006ab4 <_strtod_l+0x2e4>
 8006aac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006aae:	4588      	cmp	r8, r1
 8006ab0:	bfa8      	it	ge
 8006ab2:	4688      	movge	r8, r1
 8006ab4:	f1bc 0f00 	cmp.w	ip, #0
 8006ab8:	d001      	beq.n	8006abe <_strtod_l+0x2ee>
 8006aba:	f1c8 0800 	rsb	r8, r8, #0
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	d14e      	bne.n	8006b60 <_strtod_l+0x390>
 8006ac2:	9908      	ldr	r1, [sp, #32]
 8006ac4:	4308      	orrs	r0, r1
 8006ac6:	f47f aebc 	bne.w	8006842 <_strtod_l+0x72>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f47f aed4 	bne.w	8006878 <_strtod_l+0xa8>
 8006ad0:	2a69      	cmp	r2, #105	@ 0x69
 8006ad2:	d028      	beq.n	8006b26 <_strtod_l+0x356>
 8006ad4:	dc25      	bgt.n	8006b22 <_strtod_l+0x352>
 8006ad6:	2a49      	cmp	r2, #73	@ 0x49
 8006ad8:	d025      	beq.n	8006b26 <_strtod_l+0x356>
 8006ada:	2a4e      	cmp	r2, #78	@ 0x4e
 8006adc:	f47f aecc 	bne.w	8006878 <_strtod_l+0xa8>
 8006ae0:	499a      	ldr	r1, [pc, #616]	@ (8006d4c <_strtod_l+0x57c>)
 8006ae2:	a819      	add	r0, sp, #100	@ 0x64
 8006ae4:	f000 ff6a 	bl	80079bc <__match>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f43f aec5 	beq.w	8006878 <_strtod_l+0xa8>
 8006aee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b28      	cmp	r3, #40	@ 0x28
 8006af4:	d12e      	bne.n	8006b54 <_strtod_l+0x384>
 8006af6:	4996      	ldr	r1, [pc, #600]	@ (8006d50 <_strtod_l+0x580>)
 8006af8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006afa:	a819      	add	r0, sp, #100	@ 0x64
 8006afc:	f000 ff72 	bl	80079e4 <__hexnan>
 8006b00:	2805      	cmp	r0, #5
 8006b02:	d127      	bne.n	8006b54 <_strtod_l+0x384>
 8006b04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006b06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006b0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006b0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006b12:	e696      	b.n	8006842 <_strtod_l+0x72>
 8006b14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b16:	fb08 2101 	mla	r1, r8, r1, r2
 8006b1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006b1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b20:	e7b5      	b.n	8006a8e <_strtod_l+0x2be>
 8006b22:	2a6e      	cmp	r2, #110	@ 0x6e
 8006b24:	e7da      	b.n	8006adc <_strtod_l+0x30c>
 8006b26:	498b      	ldr	r1, [pc, #556]	@ (8006d54 <_strtod_l+0x584>)
 8006b28:	a819      	add	r0, sp, #100	@ 0x64
 8006b2a:	f000 ff47 	bl	80079bc <__match>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f43f aea2 	beq.w	8006878 <_strtod_l+0xa8>
 8006b34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b36:	4988      	ldr	r1, [pc, #544]	@ (8006d58 <_strtod_l+0x588>)
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	a819      	add	r0, sp, #100	@ 0x64
 8006b3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b3e:	f000 ff3d 	bl	80079bc <__match>
 8006b42:	b910      	cbnz	r0, 8006b4a <_strtod_l+0x37a>
 8006b44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b46:	3301      	adds	r3, #1
 8006b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b4a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006d68 <_strtod_l+0x598>
 8006b4e:	f04f 0a00 	mov.w	sl, #0
 8006b52:	e676      	b.n	8006842 <_strtod_l+0x72>
 8006b54:	4881      	ldr	r0, [pc, #516]	@ (8006d5c <_strtod_l+0x58c>)
 8006b56:	f000 fc9f 	bl	8007498 <nan>
 8006b5a:	ec5b ab10 	vmov	sl, fp, d0
 8006b5e:	e670      	b.n	8006842 <_strtod_l+0x72>
 8006b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b62:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006b64:	eba8 0303 	sub.w	r3, r8, r3
 8006b68:	f1b9 0f00 	cmp.w	r9, #0
 8006b6c:	bf08      	it	eq
 8006b6e:	46a9      	moveq	r9, r5
 8006b70:	2d10      	cmp	r5, #16
 8006b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b74:	462c      	mov	r4, r5
 8006b76:	bfa8      	it	ge
 8006b78:	2410      	movge	r4, #16
 8006b7a:	f7f9 fcdb 	bl	8000534 <__aeabi_ui2d>
 8006b7e:	2d09      	cmp	r5, #9
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	dc13      	bgt.n	8006bae <_strtod_l+0x3de>
 8006b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f43f ae5a 	beq.w	8006842 <_strtod_l+0x72>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b90:	dd78      	ble.n	8006c84 <_strtod_l+0x4b4>
 8006b92:	2b16      	cmp	r3, #22
 8006b94:	dc5f      	bgt.n	8006c56 <_strtod_l+0x486>
 8006b96:	4972      	ldr	r1, [pc, #456]	@ (8006d60 <_strtod_l+0x590>)
 8006b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	f7f9 fd40 	bl	8000628 <__aeabi_dmul>
 8006ba8:	4682      	mov	sl, r0
 8006baa:	468b      	mov	fp, r1
 8006bac:	e649      	b.n	8006842 <_strtod_l+0x72>
 8006bae:	4b6c      	ldr	r3, [pc, #432]	@ (8006d60 <_strtod_l+0x590>)
 8006bb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006bb8:	f7f9 fd36 	bl	8000628 <__aeabi_dmul>
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	f7f9 fcb7 	bl	8000534 <__aeabi_ui2d>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4650      	mov	r0, sl
 8006bcc:	4659      	mov	r1, fp
 8006bce:	f7f9 fb75 	bl	80002bc <__adddf3>
 8006bd2:	2d0f      	cmp	r5, #15
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	468b      	mov	fp, r1
 8006bd8:	ddd5      	ble.n	8006b86 <_strtod_l+0x3b6>
 8006bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bdc:	1b2c      	subs	r4, r5, r4
 8006bde:	441c      	add	r4, r3
 8006be0:	2c00      	cmp	r4, #0
 8006be2:	f340 8093 	ble.w	8006d0c <_strtod_l+0x53c>
 8006be6:	f014 030f 	ands.w	r3, r4, #15
 8006bea:	d00a      	beq.n	8006c02 <_strtod_l+0x432>
 8006bec:	495c      	ldr	r1, [pc, #368]	@ (8006d60 <_strtod_l+0x590>)
 8006bee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bf2:	4652      	mov	r2, sl
 8006bf4:	465b      	mov	r3, fp
 8006bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bfa:	f7f9 fd15 	bl	8000628 <__aeabi_dmul>
 8006bfe:	4682      	mov	sl, r0
 8006c00:	468b      	mov	fp, r1
 8006c02:	f034 040f 	bics.w	r4, r4, #15
 8006c06:	d073      	beq.n	8006cf0 <_strtod_l+0x520>
 8006c08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006c0c:	dd49      	ble.n	8006ca2 <_strtod_l+0x4d2>
 8006c0e:	2400      	movs	r4, #0
 8006c10:	46a0      	mov	r8, r4
 8006c12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c14:	46a1      	mov	r9, r4
 8006c16:	9a05      	ldr	r2, [sp, #20]
 8006c18:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006d68 <_strtod_l+0x598>
 8006c1c:	2322      	movs	r3, #34	@ 0x22
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	f04f 0a00 	mov.w	sl, #0
 8006c24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f43f ae0b 	beq.w	8006842 <_strtod_l+0x72>
 8006c2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c2e:	9805      	ldr	r0, [sp, #20]
 8006c30:	f001 fc02 	bl	8008438 <_Bfree>
 8006c34:	9805      	ldr	r0, [sp, #20]
 8006c36:	4649      	mov	r1, r9
 8006c38:	f001 fbfe 	bl	8008438 <_Bfree>
 8006c3c:	9805      	ldr	r0, [sp, #20]
 8006c3e:	4641      	mov	r1, r8
 8006c40:	f001 fbfa 	bl	8008438 <_Bfree>
 8006c44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c46:	9805      	ldr	r0, [sp, #20]
 8006c48:	f001 fbf6 	bl	8008438 <_Bfree>
 8006c4c:	9805      	ldr	r0, [sp, #20]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	f001 fbf2 	bl	8008438 <_Bfree>
 8006c54:	e5f5      	b.n	8006842 <_strtod_l+0x72>
 8006c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	dbbc      	blt.n	8006bda <_strtod_l+0x40a>
 8006c60:	4c3f      	ldr	r4, [pc, #252]	@ (8006d60 <_strtod_l+0x590>)
 8006c62:	f1c5 050f 	rsb	r5, r5, #15
 8006c66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c6a:	4652      	mov	r2, sl
 8006c6c:	465b      	mov	r3, fp
 8006c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c72:	f7f9 fcd9 	bl	8000628 <__aeabi_dmul>
 8006c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c78:	1b5d      	subs	r5, r3, r5
 8006c7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c82:	e78f      	b.n	8006ba4 <_strtod_l+0x3d4>
 8006c84:	3316      	adds	r3, #22
 8006c86:	dba8      	blt.n	8006bda <_strtod_l+0x40a>
 8006c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8a:	eba3 0808 	sub.w	r8, r3, r8
 8006c8e:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <_strtod_l+0x590>)
 8006c90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c94:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	f7f9 fdee 	bl	800087c <__aeabi_ddiv>
 8006ca0:	e782      	b.n	8006ba8 <_strtod_l+0x3d8>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4f2f      	ldr	r7, [pc, #188]	@ (8006d64 <_strtod_l+0x594>)
 8006ca6:	1124      	asrs	r4, r4, #4
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	461e      	mov	r6, r3
 8006cae:	2c01      	cmp	r4, #1
 8006cb0:	dc21      	bgt.n	8006cf6 <_strtod_l+0x526>
 8006cb2:	b10b      	cbz	r3, 8006cb8 <_strtod_l+0x4e8>
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	468b      	mov	fp, r1
 8006cb8:	492a      	ldr	r1, [pc, #168]	@ (8006d64 <_strtod_l+0x594>)
 8006cba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006cbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006cc2:	4652      	mov	r2, sl
 8006cc4:	465b      	mov	r3, fp
 8006cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cca:	f7f9 fcad 	bl	8000628 <__aeabi_dmul>
 8006cce:	4b26      	ldr	r3, [pc, #152]	@ (8006d68 <_strtod_l+0x598>)
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	4925      	ldr	r1, [pc, #148]	@ (8006d6c <_strtod_l+0x59c>)
 8006cd6:	428b      	cmp	r3, r1
 8006cd8:	4682      	mov	sl, r0
 8006cda:	d898      	bhi.n	8006c0e <_strtod_l+0x43e>
 8006cdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	bf86      	itte	hi
 8006ce4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006d70 <_strtod_l+0x5a0>
 8006ce8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006cec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9308      	str	r3, [sp, #32]
 8006cf4:	e076      	b.n	8006de4 <_strtod_l+0x614>
 8006cf6:	07e2      	lsls	r2, r4, #31
 8006cf8:	d504      	bpl.n	8006d04 <_strtod_l+0x534>
 8006cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfe:	f7f9 fc93 	bl	8000628 <__aeabi_dmul>
 8006d02:	2301      	movs	r3, #1
 8006d04:	3601      	adds	r6, #1
 8006d06:	1064      	asrs	r4, r4, #1
 8006d08:	3708      	adds	r7, #8
 8006d0a:	e7d0      	b.n	8006cae <_strtod_l+0x4de>
 8006d0c:	d0f0      	beq.n	8006cf0 <_strtod_l+0x520>
 8006d0e:	4264      	negs	r4, r4
 8006d10:	f014 020f 	ands.w	r2, r4, #15
 8006d14:	d00a      	beq.n	8006d2c <_strtod_l+0x55c>
 8006d16:	4b12      	ldr	r3, [pc, #72]	@ (8006d60 <_strtod_l+0x590>)
 8006d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	4659      	mov	r1, fp
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fdaa 	bl	800087c <__aeabi_ddiv>
 8006d28:	4682      	mov	sl, r0
 8006d2a:	468b      	mov	fp, r1
 8006d2c:	1124      	asrs	r4, r4, #4
 8006d2e:	d0df      	beq.n	8006cf0 <_strtod_l+0x520>
 8006d30:	2c1f      	cmp	r4, #31
 8006d32:	dd1f      	ble.n	8006d74 <_strtod_l+0x5a4>
 8006d34:	2400      	movs	r4, #0
 8006d36:	46a0      	mov	r8, r4
 8006d38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d3a:	46a1      	mov	r9, r4
 8006d3c:	9a05      	ldr	r2, [sp, #20]
 8006d3e:	2322      	movs	r3, #34	@ 0x22
 8006d40:	f04f 0a00 	mov.w	sl, #0
 8006d44:	f04f 0b00 	mov.w	fp, #0
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e76b      	b.n	8006c24 <_strtod_l+0x454>
 8006d4c:	080095fb 	.word	0x080095fb
 8006d50:	08009758 	.word	0x08009758
 8006d54:	080095f2 	.word	0x080095f2
 8006d58:	080095f5 	.word	0x080095f5
 8006d5c:	08009755 	.word	0x08009755
 8006d60:	080098e0 	.word	0x080098e0
 8006d64:	080098b8 	.word	0x080098b8
 8006d68:	7ff00000 	.word	0x7ff00000
 8006d6c:	7ca00000 	.word	0x7ca00000
 8006d70:	7fefffff 	.word	0x7fefffff
 8006d74:	f014 0310 	ands.w	r3, r4, #16
 8006d78:	bf18      	it	ne
 8006d7a:	236a      	movne	r3, #106	@ 0x6a
 8006d7c:	4ea9      	ldr	r6, [pc, #676]	@ (8007024 <_strtod_l+0x854>)
 8006d7e:	9308      	str	r3, [sp, #32]
 8006d80:	4650      	mov	r0, sl
 8006d82:	4659      	mov	r1, fp
 8006d84:	2300      	movs	r3, #0
 8006d86:	07e7      	lsls	r7, r4, #31
 8006d88:	d504      	bpl.n	8006d94 <_strtod_l+0x5c4>
 8006d8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d8e:	f7f9 fc4b 	bl	8000628 <__aeabi_dmul>
 8006d92:	2301      	movs	r3, #1
 8006d94:	1064      	asrs	r4, r4, #1
 8006d96:	f106 0608 	add.w	r6, r6, #8
 8006d9a:	d1f4      	bne.n	8006d86 <_strtod_l+0x5b6>
 8006d9c:	b10b      	cbz	r3, 8006da2 <_strtod_l+0x5d2>
 8006d9e:	4682      	mov	sl, r0
 8006da0:	468b      	mov	fp, r1
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	b1b3      	cbz	r3, 8006dd4 <_strtod_l+0x604>
 8006da6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006daa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	4659      	mov	r1, fp
 8006db2:	dd0f      	ble.n	8006dd4 <_strtod_l+0x604>
 8006db4:	2b1f      	cmp	r3, #31
 8006db6:	dd56      	ble.n	8006e66 <_strtod_l+0x696>
 8006db8:	2b34      	cmp	r3, #52	@ 0x34
 8006dba:	bfde      	ittt	le
 8006dbc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006dc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006dc4:	4093      	lslle	r3, r2
 8006dc6:	f04f 0a00 	mov.w	sl, #0
 8006dca:	bfcc      	ite	gt
 8006dcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006dd0:	ea03 0b01 	andle.w	fp, r3, r1
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	f7f9 fe8c 	bl	8000af8 <__aeabi_dcmpeq>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1a7      	bne.n	8006d34 <_strtod_l+0x564>
 8006de4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006dea:	9805      	ldr	r0, [sp, #20]
 8006dec:	462b      	mov	r3, r5
 8006dee:	464a      	mov	r2, r9
 8006df0:	f001 fb8a 	bl	8008508 <__s2b>
 8006df4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f af09 	beq.w	8006c0e <_strtod_l+0x43e>
 8006dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	eba3 0308 	sub.w	r3, r3, r8
 8006e06:	bfa8      	it	ge
 8006e08:	2300      	movge	r3, #0
 8006e0a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e12:	9316      	str	r3, [sp, #88]	@ 0x58
 8006e14:	46a0      	mov	r8, r4
 8006e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e18:	9805      	ldr	r0, [sp, #20]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	f001 facc 	bl	80083b8 <_Balloc>
 8006e20:	4681      	mov	r9, r0
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f43f aef7 	beq.w	8006c16 <_strtod_l+0x446>
 8006e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	3202      	adds	r2, #2
 8006e2e:	f103 010c 	add.w	r1, r3, #12
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	300c      	adds	r0, #12
 8006e36:	f000 fb20 	bl	800747a <memcpy>
 8006e3a:	ec4b ab10 	vmov	d0, sl, fp
 8006e3e:	9805      	ldr	r0, [sp, #20]
 8006e40:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e42:	a91b      	add	r1, sp, #108	@ 0x6c
 8006e44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e48:	f001 fe92 	bl	8008b70 <__d2b>
 8006e4c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f aee1 	beq.w	8006c16 <_strtod_l+0x446>
 8006e54:	9805      	ldr	r0, [sp, #20]
 8006e56:	2101      	movs	r1, #1
 8006e58:	f001 fbec 	bl	8008634 <__i2b>
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	b948      	cbnz	r0, 8006e74 <_strtod_l+0x6a4>
 8006e60:	f04f 0800 	mov.w	r8, #0
 8006e64:	e6d7      	b.n	8006c16 <_strtod_l+0x446>
 8006e66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	ea03 0a0a 	and.w	sl, r3, sl
 8006e72:	e7af      	b.n	8006dd4 <_strtod_l+0x604>
 8006e74:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	bfab      	itete	ge
 8006e7c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e7e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e80:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e84:	bfac      	ite	ge
 8006e86:	18ef      	addge	r7, r5, r3
 8006e88:	1b5e      	sublt	r6, r3, r5
 8006e8a:	9b08      	ldr	r3, [sp, #32]
 8006e8c:	1aed      	subs	r5, r5, r3
 8006e8e:	4415      	add	r5, r2
 8006e90:	4b65      	ldr	r3, [pc, #404]	@ (8007028 <_strtod_l+0x858>)
 8006e92:	3d01      	subs	r5, #1
 8006e94:	429d      	cmp	r5, r3
 8006e96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e9a:	da50      	bge.n	8006f3e <_strtod_l+0x76e>
 8006e9c:	1b5b      	subs	r3, r3, r5
 8006e9e:	2b1f      	cmp	r3, #31
 8006ea0:	eba2 0203 	sub.w	r2, r2, r3
 8006ea4:	f04f 0101 	mov.w	r1, #1
 8006ea8:	dc3d      	bgt.n	8006f26 <_strtod_l+0x756>
 8006eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006eae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eb4:	18bd      	adds	r5, r7, r2
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	42af      	cmp	r7, r5
 8006eba:	4416      	add	r6, r2
 8006ebc:	441e      	add	r6, r3
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	bfa8      	it	ge
 8006ec2:	462b      	movge	r3, r5
 8006ec4:	42b3      	cmp	r3, r6
 8006ec6:	bfa8      	it	ge
 8006ec8:	4633      	movge	r3, r6
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bfc2      	ittt	gt
 8006ece:	1aed      	subgt	r5, r5, r3
 8006ed0:	1af6      	subgt	r6, r6, r3
 8006ed2:	1aff      	subgt	r7, r7, r3
 8006ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	dd16      	ble.n	8006f08 <_strtod_l+0x738>
 8006eda:	4641      	mov	r1, r8
 8006edc:	9805      	ldr	r0, [sp, #20]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f001 fc60 	bl	80087a4 <__pow5mult>
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d0ba      	beq.n	8006e60 <_strtod_l+0x690>
 8006eea:	4601      	mov	r1, r0
 8006eec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006eee:	9805      	ldr	r0, [sp, #20]
 8006ef0:	f001 fbb6 	bl	8008660 <__multiply>
 8006ef4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f ae8d 	beq.w	8006c16 <_strtod_l+0x446>
 8006efc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006efe:	9805      	ldr	r0, [sp, #20]
 8006f00:	f001 fa9a 	bl	8008438 <_Bfree>
 8006f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f06:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	dc1d      	bgt.n	8006f48 <_strtod_l+0x778>
 8006f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd23      	ble.n	8006f5a <_strtod_l+0x78a>
 8006f12:	4649      	mov	r1, r9
 8006f14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006f16:	9805      	ldr	r0, [sp, #20]
 8006f18:	f001 fc44 	bl	80087a4 <__pow5mult>
 8006f1c:	4681      	mov	r9, r0
 8006f1e:	b9e0      	cbnz	r0, 8006f5a <_strtod_l+0x78a>
 8006f20:	f04f 0900 	mov.w	r9, #0
 8006f24:	e677      	b.n	8006c16 <_strtod_l+0x446>
 8006f26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006f2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006f2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006f32:	35e2      	adds	r5, #226	@ 0xe2
 8006f34:	fa01 f305 	lsl.w	r3, r1, r5
 8006f38:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006f3c:	e7ba      	b.n	8006eb4 <_strtod_l+0x6e4>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f42:	2301      	movs	r3, #1
 8006f44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f46:	e7b5      	b.n	8006eb4 <_strtod_l+0x6e4>
 8006f48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f4a:	9805      	ldr	r0, [sp, #20]
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	f001 fc83 	bl	8008858 <__lshift>
 8006f52:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1d9      	bne.n	8006f0c <_strtod_l+0x73c>
 8006f58:	e65d      	b.n	8006c16 <_strtod_l+0x446>
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	dd07      	ble.n	8006f6e <_strtod_l+0x79e>
 8006f5e:	4649      	mov	r1, r9
 8006f60:	9805      	ldr	r0, [sp, #20]
 8006f62:	4632      	mov	r2, r6
 8006f64:	f001 fc78 	bl	8008858 <__lshift>
 8006f68:	4681      	mov	r9, r0
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0d8      	beq.n	8006f20 <_strtod_l+0x750>
 8006f6e:	2f00      	cmp	r7, #0
 8006f70:	dd08      	ble.n	8006f84 <_strtod_l+0x7b4>
 8006f72:	4641      	mov	r1, r8
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	463a      	mov	r2, r7
 8006f78:	f001 fc6e 	bl	8008858 <__lshift>
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f43f ae49 	beq.w	8006c16 <_strtod_l+0x446>
 8006f84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f86:	9805      	ldr	r0, [sp, #20]
 8006f88:	464a      	mov	r2, r9
 8006f8a:	f001 fced 	bl	8008968 <__mdiff>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	2800      	cmp	r0, #0
 8006f92:	f43f ae40 	beq.w	8006c16 <_strtod_l+0x446>
 8006f96:	68c3      	ldr	r3, [r0, #12]
 8006f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60c3      	str	r3, [r0, #12]
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	f001 fcc6 	bl	8008930 <__mcmp>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	da45      	bge.n	8007034 <_strtod_l+0x864>
 8006fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006faa:	ea53 030a 	orrs.w	r3, r3, sl
 8006fae:	d16b      	bne.n	8007088 <_strtod_l+0x8b8>
 8006fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d167      	bne.n	8007088 <_strtod_l+0x8b8>
 8006fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fbc:	0d1b      	lsrs	r3, r3, #20
 8006fbe:	051b      	lsls	r3, r3, #20
 8006fc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fc4:	d960      	bls.n	8007088 <_strtod_l+0x8b8>
 8006fc6:	6963      	ldr	r3, [r4, #20]
 8006fc8:	b913      	cbnz	r3, 8006fd0 <_strtod_l+0x800>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	dd5b      	ble.n	8007088 <_strtod_l+0x8b8>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	9805      	ldr	r0, [sp, #20]
 8006fd6:	f001 fc3f 	bl	8008858 <__lshift>
 8006fda:	4641      	mov	r1, r8
 8006fdc:	4604      	mov	r4, r0
 8006fde:	f001 fca7 	bl	8008930 <__mcmp>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	dd50      	ble.n	8007088 <_strtod_l+0x8b8>
 8006fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fea:	9a08      	ldr	r2, [sp, #32]
 8006fec:	0d1b      	lsrs	r3, r3, #20
 8006fee:	051b      	lsls	r3, r3, #20
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	d06a      	beq.n	80070ca <_strtod_l+0x8fa>
 8006ff4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ff8:	d867      	bhi.n	80070ca <_strtod_l+0x8fa>
 8006ffa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ffe:	f67f ae9d 	bls.w	8006d3c <_strtod_l+0x56c>
 8007002:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <_strtod_l+0x85c>)
 8007004:	4650      	mov	r0, sl
 8007006:	4659      	mov	r1, fp
 8007008:	2200      	movs	r2, #0
 800700a:	f7f9 fb0d 	bl	8000628 <__aeabi_dmul>
 800700e:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <_strtod_l+0x860>)
 8007010:	400b      	ands	r3, r1
 8007012:	4682      	mov	sl, r0
 8007014:	468b      	mov	fp, r1
 8007016:	2b00      	cmp	r3, #0
 8007018:	f47f ae08 	bne.w	8006c2c <_strtod_l+0x45c>
 800701c:	9a05      	ldr	r2, [sp, #20]
 800701e:	2322      	movs	r3, #34	@ 0x22
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e603      	b.n	8006c2c <_strtod_l+0x45c>
 8007024:	08009780 	.word	0x08009780
 8007028:	fffffc02 	.word	0xfffffc02
 800702c:	39500000 	.word	0x39500000
 8007030:	7ff00000 	.word	0x7ff00000
 8007034:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007038:	d165      	bne.n	8007106 <_strtod_l+0x936>
 800703a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800703c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007040:	b35a      	cbz	r2, 800709a <_strtod_l+0x8ca>
 8007042:	4a9f      	ldr	r2, [pc, #636]	@ (80072c0 <_strtod_l+0xaf0>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d12b      	bne.n	80070a0 <_strtod_l+0x8d0>
 8007048:	9b08      	ldr	r3, [sp, #32]
 800704a:	4651      	mov	r1, sl
 800704c:	b303      	cbz	r3, 8007090 <_strtod_l+0x8c0>
 800704e:	4b9d      	ldr	r3, [pc, #628]	@ (80072c4 <_strtod_l+0xaf4>)
 8007050:	465a      	mov	r2, fp
 8007052:	4013      	ands	r3, r2
 8007054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800705c:	d81b      	bhi.n	8007096 <_strtod_l+0x8c6>
 800705e:	0d1b      	lsrs	r3, r3, #20
 8007060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	4299      	cmp	r1, r3
 800706a:	d119      	bne.n	80070a0 <_strtod_l+0x8d0>
 800706c:	4b96      	ldr	r3, [pc, #600]	@ (80072c8 <_strtod_l+0xaf8>)
 800706e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007070:	429a      	cmp	r2, r3
 8007072:	d102      	bne.n	800707a <_strtod_l+0x8aa>
 8007074:	3101      	adds	r1, #1
 8007076:	f43f adce 	beq.w	8006c16 <_strtod_l+0x446>
 800707a:	4b92      	ldr	r3, [pc, #584]	@ (80072c4 <_strtod_l+0xaf4>)
 800707c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800707e:	401a      	ands	r2, r3
 8007080:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007084:	f04f 0a00 	mov.w	sl, #0
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1b9      	bne.n	8007002 <_strtod_l+0x832>
 800708e:	e5cd      	b.n	8006c2c <_strtod_l+0x45c>
 8007090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007094:	e7e8      	b.n	8007068 <_strtod_l+0x898>
 8007096:	4613      	mov	r3, r2
 8007098:	e7e6      	b.n	8007068 <_strtod_l+0x898>
 800709a:	ea53 030a 	orrs.w	r3, r3, sl
 800709e:	d0a2      	beq.n	8006fe6 <_strtod_l+0x816>
 80070a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070a2:	b1db      	cbz	r3, 80070dc <_strtod_l+0x90c>
 80070a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070a6:	4213      	tst	r3, r2
 80070a8:	d0ee      	beq.n	8007088 <_strtod_l+0x8b8>
 80070aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ac:	9a08      	ldr	r2, [sp, #32]
 80070ae:	4650      	mov	r0, sl
 80070b0:	4659      	mov	r1, fp
 80070b2:	b1bb      	cbz	r3, 80070e4 <_strtod_l+0x914>
 80070b4:	f7ff fb6e 	bl	8006794 <sulp>
 80070b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070bc:	ec53 2b10 	vmov	r2, r3, d0
 80070c0:	f7f9 f8fc 	bl	80002bc <__adddf3>
 80070c4:	4682      	mov	sl, r0
 80070c6:	468b      	mov	fp, r1
 80070c8:	e7de      	b.n	8007088 <_strtod_l+0x8b8>
 80070ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80070ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80070da:	e7d5      	b.n	8007088 <_strtod_l+0x8b8>
 80070dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070de:	ea13 0f0a 	tst.w	r3, sl
 80070e2:	e7e1      	b.n	80070a8 <_strtod_l+0x8d8>
 80070e4:	f7ff fb56 	bl	8006794 <sulp>
 80070e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ec:	ec53 2b10 	vmov	r2, r3, d0
 80070f0:	f7f9 f8e2 	bl	80002b8 <__aeabi_dsub>
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	4682      	mov	sl, r0
 80070fa:	468b      	mov	fp, r1
 80070fc:	f7f9 fcfc 	bl	8000af8 <__aeabi_dcmpeq>
 8007100:	2800      	cmp	r0, #0
 8007102:	d0c1      	beq.n	8007088 <_strtod_l+0x8b8>
 8007104:	e61a      	b.n	8006d3c <_strtod_l+0x56c>
 8007106:	4641      	mov	r1, r8
 8007108:	4620      	mov	r0, r4
 800710a:	f001 fd89 	bl	8008c20 <__ratio>
 800710e:	ec57 6b10 	vmov	r6, r7, d0
 8007112:	2200      	movs	r2, #0
 8007114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 fd00 	bl	8000b20 <__aeabi_dcmple>
 8007120:	2800      	cmp	r0, #0
 8007122:	d06f      	beq.n	8007204 <_strtod_l+0xa34>
 8007124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d17a      	bne.n	8007220 <_strtod_l+0xa50>
 800712a:	f1ba 0f00 	cmp.w	sl, #0
 800712e:	d158      	bne.n	80071e2 <_strtod_l+0xa12>
 8007130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007136:	2b00      	cmp	r3, #0
 8007138:	d15a      	bne.n	80071f0 <_strtod_l+0xa20>
 800713a:	4b64      	ldr	r3, [pc, #400]	@ (80072cc <_strtod_l+0xafc>)
 800713c:	2200      	movs	r2, #0
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fce3 	bl	8000b0c <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d159      	bne.n	80071fe <_strtod_l+0xa2e>
 800714a:	4630      	mov	r0, r6
 800714c:	4639      	mov	r1, r7
 800714e:	4b60      	ldr	r3, [pc, #384]	@ (80072d0 <_strtod_l+0xb00>)
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 fa69 	bl	8000628 <__aeabi_dmul>
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800715e:	9606      	str	r6, [sp, #24]
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007166:	4d57      	ldr	r5, [pc, #348]	@ (80072c4 <_strtod_l+0xaf4>)
 8007168:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800716c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800716e:	401d      	ands	r5, r3
 8007170:	4b58      	ldr	r3, [pc, #352]	@ (80072d4 <_strtod_l+0xb04>)
 8007172:	429d      	cmp	r5, r3
 8007174:	f040 80b2 	bne.w	80072dc <_strtod_l+0xb0c>
 8007178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800717a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800717e:	ec4b ab10 	vmov	d0, sl, fp
 8007182:	f001 fc85 	bl	8008a90 <__ulp>
 8007186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800718a:	ec51 0b10 	vmov	r0, r1, d0
 800718e:	f7f9 fa4b 	bl	8000628 <__aeabi_dmul>
 8007192:	4652      	mov	r2, sl
 8007194:	465b      	mov	r3, fp
 8007196:	f7f9 f891 	bl	80002bc <__adddf3>
 800719a:	460b      	mov	r3, r1
 800719c:	4949      	ldr	r1, [pc, #292]	@ (80072c4 <_strtod_l+0xaf4>)
 800719e:	4a4e      	ldr	r2, [pc, #312]	@ (80072d8 <_strtod_l+0xb08>)
 80071a0:	4019      	ands	r1, r3
 80071a2:	4291      	cmp	r1, r2
 80071a4:	4682      	mov	sl, r0
 80071a6:	d942      	bls.n	800722e <_strtod_l+0xa5e>
 80071a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071aa:	4b47      	ldr	r3, [pc, #284]	@ (80072c8 <_strtod_l+0xaf8>)
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d103      	bne.n	80071b8 <_strtod_l+0x9e8>
 80071b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071b2:	3301      	adds	r3, #1
 80071b4:	f43f ad2f 	beq.w	8006c16 <_strtod_l+0x446>
 80071b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80072c8 <_strtod_l+0xaf8>
 80071bc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80071c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071c2:	9805      	ldr	r0, [sp, #20]
 80071c4:	f001 f938 	bl	8008438 <_Bfree>
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	4649      	mov	r1, r9
 80071cc:	f001 f934 	bl	8008438 <_Bfree>
 80071d0:	9805      	ldr	r0, [sp, #20]
 80071d2:	4641      	mov	r1, r8
 80071d4:	f001 f930 	bl	8008438 <_Bfree>
 80071d8:	9805      	ldr	r0, [sp, #20]
 80071da:	4621      	mov	r1, r4
 80071dc:	f001 f92c 	bl	8008438 <_Bfree>
 80071e0:	e619      	b.n	8006e16 <_strtod_l+0x646>
 80071e2:	f1ba 0f01 	cmp.w	sl, #1
 80071e6:	d103      	bne.n	80071f0 <_strtod_l+0xa20>
 80071e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f43f ada6 	beq.w	8006d3c <_strtod_l+0x56c>
 80071f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80072a0 <_strtod_l+0xad0>
 80071f4:	4f35      	ldr	r7, [pc, #212]	@ (80072cc <_strtod_l+0xafc>)
 80071f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071fa:	2600      	movs	r6, #0
 80071fc:	e7b1      	b.n	8007162 <_strtod_l+0x992>
 80071fe:	4f34      	ldr	r7, [pc, #208]	@ (80072d0 <_strtod_l+0xb00>)
 8007200:	2600      	movs	r6, #0
 8007202:	e7aa      	b.n	800715a <_strtod_l+0x98a>
 8007204:	4b32      	ldr	r3, [pc, #200]	@ (80072d0 <_strtod_l+0xb00>)
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	2200      	movs	r2, #0
 800720c:	f7f9 fa0c 	bl	8000628 <__aeabi_dmul>
 8007210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d09f      	beq.n	800715a <_strtod_l+0x98a>
 800721a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800721e:	e7a0      	b.n	8007162 <_strtod_l+0x992>
 8007220:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80072a8 <_strtod_l+0xad8>
 8007224:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007228:	ec57 6b17 	vmov	r6, r7, d7
 800722c:	e799      	b.n	8007162 <_strtod_l+0x992>
 800722e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007232:	9b08      	ldr	r3, [sp, #32]
 8007234:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1c1      	bne.n	80071c0 <_strtod_l+0x9f0>
 800723c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007240:	0d1b      	lsrs	r3, r3, #20
 8007242:	051b      	lsls	r3, r3, #20
 8007244:	429d      	cmp	r5, r3
 8007246:	d1bb      	bne.n	80071c0 <_strtod_l+0x9f0>
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fd0e 	bl	8000c6c <__aeabi_d2lz>
 8007250:	f7f9 f9bc 	bl	80005cc <__aeabi_l2d>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f9 f82c 	bl	80002b8 <__aeabi_dsub>
 8007260:	460b      	mov	r3, r1
 8007262:	4602      	mov	r2, r0
 8007264:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007268:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800726c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800726e:	ea46 060a 	orr.w	r6, r6, sl
 8007272:	431e      	orrs	r6, r3
 8007274:	d06f      	beq.n	8007356 <_strtod_l+0xb86>
 8007276:	a30e      	add	r3, pc, #56	@ (adr r3, 80072b0 <_strtod_l+0xae0>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f9 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8007280:	2800      	cmp	r0, #0
 8007282:	f47f acd3 	bne.w	8006c2c <_strtod_l+0x45c>
 8007286:	a30c      	add	r3, pc, #48	@ (adr r3, 80072b8 <_strtod_l+0xae8>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007290:	f7f9 fc5a 	bl	8000b48 <__aeabi_dcmpgt>
 8007294:	2800      	cmp	r0, #0
 8007296:	d093      	beq.n	80071c0 <_strtod_l+0x9f0>
 8007298:	e4c8      	b.n	8006c2c <_strtod_l+0x45c>
 800729a:	bf00      	nop
 800729c:	f3af 8000 	nop.w
 80072a0:	00000000 	.word	0x00000000
 80072a4:	bff00000 	.word	0xbff00000
 80072a8:	00000000 	.word	0x00000000
 80072ac:	3ff00000 	.word	0x3ff00000
 80072b0:	94a03595 	.word	0x94a03595
 80072b4:	3fdfffff 	.word	0x3fdfffff
 80072b8:	35afe535 	.word	0x35afe535
 80072bc:	3fe00000 	.word	0x3fe00000
 80072c0:	000fffff 	.word	0x000fffff
 80072c4:	7ff00000 	.word	0x7ff00000
 80072c8:	7fefffff 	.word	0x7fefffff
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	3fe00000 	.word	0x3fe00000
 80072d4:	7fe00000 	.word	0x7fe00000
 80072d8:	7c9fffff 	.word	0x7c9fffff
 80072dc:	9b08      	ldr	r3, [sp, #32]
 80072de:	b323      	cbz	r3, 800732a <_strtod_l+0xb5a>
 80072e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80072e4:	d821      	bhi.n	800732a <_strtod_l+0xb5a>
 80072e6:	a328      	add	r3, pc, #160	@ (adr r3, 8007388 <_strtod_l+0xbb8>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f9 fc16 	bl	8000b20 <__aeabi_dcmple>
 80072f4:	b1a0      	cbz	r0, 8007320 <_strtod_l+0xb50>
 80072f6:	4639      	mov	r1, r7
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7f9 fc2f 	bl	8000b5c <__aeabi_d2uiz>
 80072fe:	2801      	cmp	r0, #1
 8007300:	bf38      	it	cc
 8007302:	2001      	movcc	r0, #1
 8007304:	f7f9 f916 	bl	8000534 <__aeabi_ui2d>
 8007308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	b9fb      	cbnz	r3, 8007350 <_strtod_l+0xb80>
 8007310:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007314:	9014      	str	r0, [sp, #80]	@ 0x50
 8007316:	9315      	str	r3, [sp, #84]	@ 0x54
 8007318:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800731c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007320:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007322:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007326:	1b5b      	subs	r3, r3, r5
 8007328:	9311      	str	r3, [sp, #68]	@ 0x44
 800732a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800732e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007332:	f001 fbad 	bl	8008a90 <__ulp>
 8007336:	4650      	mov	r0, sl
 8007338:	ec53 2b10 	vmov	r2, r3, d0
 800733c:	4659      	mov	r1, fp
 800733e:	f7f9 f973 	bl	8000628 <__aeabi_dmul>
 8007342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007346:	f7f8 ffb9 	bl	80002bc <__adddf3>
 800734a:	4682      	mov	sl, r0
 800734c:	468b      	mov	fp, r1
 800734e:	e770      	b.n	8007232 <_strtod_l+0xa62>
 8007350:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007354:	e7e0      	b.n	8007318 <_strtod_l+0xb48>
 8007356:	a30e      	add	r3, pc, #56	@ (adr r3, 8007390 <_strtod_l+0xbc0>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f9 fbd6 	bl	8000b0c <__aeabi_dcmplt>
 8007360:	e798      	b.n	8007294 <_strtod_l+0xac4>
 8007362:	2300      	movs	r3, #0
 8007364:	930e      	str	r3, [sp, #56]	@ 0x38
 8007366:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	f7ff ba6d 	b.w	800684a <_strtod_l+0x7a>
 8007370:	2a65      	cmp	r2, #101	@ 0x65
 8007372:	f43f ab68 	beq.w	8006a46 <_strtod_l+0x276>
 8007376:	2a45      	cmp	r2, #69	@ 0x45
 8007378:	f43f ab65 	beq.w	8006a46 <_strtod_l+0x276>
 800737c:	2301      	movs	r3, #1
 800737e:	f7ff bba0 	b.w	8006ac2 <_strtod_l+0x2f2>
 8007382:	bf00      	nop
 8007384:	f3af 8000 	nop.w
 8007388:	ffc00000 	.word	0xffc00000
 800738c:	41dfffff 	.word	0x41dfffff
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fcfffff 	.word	0x3fcfffff

08007398 <strtod>:
 8007398:	460a      	mov	r2, r1
 800739a:	4601      	mov	r1, r0
 800739c:	4802      	ldr	r0, [pc, #8]	@ (80073a8 <strtod+0x10>)
 800739e:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <strtod+0x14>)
 80073a0:	6800      	ldr	r0, [r0, #0]
 80073a2:	f7ff ba15 	b.w	80067d0 <_strtod_l>
 80073a6:	bf00      	nop
 80073a8:	200001d4 	.word	0x200001d4
 80073ac:	20000068 	.word	0x20000068

080073b0 <_fwalk_sglue>:
 80073b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	4607      	mov	r7, r0
 80073b6:	4688      	mov	r8, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	2600      	movs	r6, #0
 80073bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c0:	f1b9 0901 	subs.w	r9, r9, #1
 80073c4:	d505      	bpl.n	80073d2 <_fwalk_sglue+0x22>
 80073c6:	6824      	ldr	r4, [r4, #0]
 80073c8:	2c00      	cmp	r4, #0
 80073ca:	d1f7      	bne.n	80073bc <_fwalk_sglue+0xc>
 80073cc:	4630      	mov	r0, r6
 80073ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d2:	89ab      	ldrh	r3, [r5, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d907      	bls.n	80073e8 <_fwalk_sglue+0x38>
 80073d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073dc:	3301      	adds	r3, #1
 80073de:	d003      	beq.n	80073e8 <_fwalk_sglue+0x38>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c0      	blx	r8
 80073e6:	4306      	orrs	r6, r0
 80073e8:	3568      	adds	r5, #104	@ 0x68
 80073ea:	e7e9      	b.n	80073c0 <_fwalk_sglue+0x10>

080073ec <memset>:
 80073ec:	4402      	add	r2, r0
 80073ee:	4603      	mov	r3, r0
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d100      	bne.n	80073f6 <memset+0xa>
 80073f4:	4770      	bx	lr
 80073f6:	f803 1b01 	strb.w	r1, [r3], #1
 80073fa:	e7f9      	b.n	80073f0 <memset+0x4>

080073fc <strncmp>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	b16a      	cbz	r2, 800741c <strncmp+0x20>
 8007400:	3901      	subs	r1, #1
 8007402:	1884      	adds	r4, r0, r2
 8007404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007408:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800740c:	429a      	cmp	r2, r3
 800740e:	d103      	bne.n	8007418 <strncmp+0x1c>
 8007410:	42a0      	cmp	r0, r4
 8007412:	d001      	beq.n	8007418 <strncmp+0x1c>
 8007414:	2a00      	cmp	r2, #0
 8007416:	d1f5      	bne.n	8007404 <strncmp+0x8>
 8007418:	1ad0      	subs	r0, r2, r3
 800741a:	bd10      	pop	{r4, pc}
 800741c:	4610      	mov	r0, r2
 800741e:	e7fc      	b.n	800741a <strncmp+0x1e>

08007420 <__errno>:
 8007420:	4b01      	ldr	r3, [pc, #4]	@ (8007428 <__errno+0x8>)
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	200001d4 	.word	0x200001d4

0800742c <__libc_init_array>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4d0d      	ldr	r5, [pc, #52]	@ (8007464 <__libc_init_array+0x38>)
 8007430:	4c0d      	ldr	r4, [pc, #52]	@ (8007468 <__libc_init_array+0x3c>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	2600      	movs	r6, #0
 8007438:	42a6      	cmp	r6, r4
 800743a:	d109      	bne.n	8007450 <__libc_init_array+0x24>
 800743c:	4d0b      	ldr	r5, [pc, #44]	@ (800746c <__libc_init_array+0x40>)
 800743e:	4c0c      	ldr	r4, [pc, #48]	@ (8007470 <__libc_init_array+0x44>)
 8007440:	f002 f894 	bl	800956c <_init>
 8007444:	1b64      	subs	r4, r4, r5
 8007446:	10a4      	asrs	r4, r4, #2
 8007448:	2600      	movs	r6, #0
 800744a:	42a6      	cmp	r6, r4
 800744c:	d105      	bne.n	800745a <__libc_init_array+0x2e>
 800744e:	bd70      	pop	{r4, r5, r6, pc}
 8007450:	f855 3b04 	ldr.w	r3, [r5], #4
 8007454:	4798      	blx	r3
 8007456:	3601      	adds	r6, #1
 8007458:	e7ee      	b.n	8007438 <__libc_init_array+0xc>
 800745a:	f855 3b04 	ldr.w	r3, [r5], #4
 800745e:	4798      	blx	r3
 8007460:	3601      	adds	r6, #1
 8007462:	e7f2      	b.n	800744a <__libc_init_array+0x1e>
 8007464:	080099b0 	.word	0x080099b0
 8007468:	080099b0 	.word	0x080099b0
 800746c:	080099b0 	.word	0x080099b0
 8007470:	080099b4 	.word	0x080099b4

08007474 <__retarget_lock_init_recursive>:
 8007474:	4770      	bx	lr

08007476 <__retarget_lock_acquire_recursive>:
 8007476:	4770      	bx	lr

08007478 <__retarget_lock_release_recursive>:
 8007478:	4770      	bx	lr

0800747a <memcpy>:
 800747a:	440a      	add	r2, r1
 800747c:	4291      	cmp	r1, r2
 800747e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007482:	d100      	bne.n	8007486 <memcpy+0xc>
 8007484:	4770      	bx	lr
 8007486:	b510      	push	{r4, lr}
 8007488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007490:	4291      	cmp	r1, r2
 8007492:	d1f9      	bne.n	8007488 <memcpy+0xe>
 8007494:	bd10      	pop	{r4, pc}
	...

08007498 <nan>:
 8007498:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80074a0 <nan+0x8>
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	00000000 	.word	0x00000000
 80074a4:	7ff80000 	.word	0x7ff80000

080074a8 <rshift>:
 80074a8:	6903      	ldr	r3, [r0, #16]
 80074aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074b6:	f100 0414 	add.w	r4, r0, #20
 80074ba:	dd45      	ble.n	8007548 <rshift+0xa0>
 80074bc:	f011 011f 	ands.w	r1, r1, #31
 80074c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074c8:	d10c      	bne.n	80074e4 <rshift+0x3c>
 80074ca:	f100 0710 	add.w	r7, r0, #16
 80074ce:	4629      	mov	r1, r5
 80074d0:	42b1      	cmp	r1, r6
 80074d2:	d334      	bcc.n	800753e <rshift+0x96>
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	1eea      	subs	r2, r5, #3
 80074da:	4296      	cmp	r6, r2
 80074dc:	bf38      	it	cc
 80074de:	2300      	movcc	r3, #0
 80074e0:	4423      	add	r3, r4
 80074e2:	e015      	b.n	8007510 <rshift+0x68>
 80074e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80074e8:	f1c1 0820 	rsb	r8, r1, #32
 80074ec:	40cf      	lsrs	r7, r1
 80074ee:	f105 0e04 	add.w	lr, r5, #4
 80074f2:	46a1      	mov	r9, r4
 80074f4:	4576      	cmp	r6, lr
 80074f6:	46f4      	mov	ip, lr
 80074f8:	d815      	bhi.n	8007526 <rshift+0x7e>
 80074fa:	1a9a      	subs	r2, r3, r2
 80074fc:	0092      	lsls	r2, r2, #2
 80074fe:	3a04      	subs	r2, #4
 8007500:	3501      	adds	r5, #1
 8007502:	42ae      	cmp	r6, r5
 8007504:	bf38      	it	cc
 8007506:	2200      	movcc	r2, #0
 8007508:	18a3      	adds	r3, r4, r2
 800750a:	50a7      	str	r7, [r4, r2]
 800750c:	b107      	cbz	r7, 8007510 <rshift+0x68>
 800750e:	3304      	adds	r3, #4
 8007510:	1b1a      	subs	r2, r3, r4
 8007512:	42a3      	cmp	r3, r4
 8007514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007518:	bf08      	it	eq
 800751a:	2300      	moveq	r3, #0
 800751c:	6102      	str	r2, [r0, #16]
 800751e:	bf08      	it	eq
 8007520:	6143      	streq	r3, [r0, #20]
 8007522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007526:	f8dc c000 	ldr.w	ip, [ip]
 800752a:	fa0c fc08 	lsl.w	ip, ip, r8
 800752e:	ea4c 0707 	orr.w	r7, ip, r7
 8007532:	f849 7b04 	str.w	r7, [r9], #4
 8007536:	f85e 7b04 	ldr.w	r7, [lr], #4
 800753a:	40cf      	lsrs	r7, r1
 800753c:	e7da      	b.n	80074f4 <rshift+0x4c>
 800753e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007542:	f847 cf04 	str.w	ip, [r7, #4]!
 8007546:	e7c3      	b.n	80074d0 <rshift+0x28>
 8007548:	4623      	mov	r3, r4
 800754a:	e7e1      	b.n	8007510 <rshift+0x68>

0800754c <__hexdig_fun>:
 800754c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007550:	2b09      	cmp	r3, #9
 8007552:	d802      	bhi.n	800755a <__hexdig_fun+0xe>
 8007554:	3820      	subs	r0, #32
 8007556:	b2c0      	uxtb	r0, r0
 8007558:	4770      	bx	lr
 800755a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800755e:	2b05      	cmp	r3, #5
 8007560:	d801      	bhi.n	8007566 <__hexdig_fun+0x1a>
 8007562:	3847      	subs	r0, #71	@ 0x47
 8007564:	e7f7      	b.n	8007556 <__hexdig_fun+0xa>
 8007566:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800756a:	2b05      	cmp	r3, #5
 800756c:	d801      	bhi.n	8007572 <__hexdig_fun+0x26>
 800756e:	3827      	subs	r0, #39	@ 0x27
 8007570:	e7f1      	b.n	8007556 <__hexdig_fun+0xa>
 8007572:	2000      	movs	r0, #0
 8007574:	4770      	bx	lr
	...

08007578 <__gethex>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b085      	sub	sp, #20
 800757e:	468a      	mov	sl, r1
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	680b      	ldr	r3, [r1, #0]
 8007584:	9001      	str	r0, [sp, #4]
 8007586:	4690      	mov	r8, r2
 8007588:	1c9c      	adds	r4, r3, #2
 800758a:	46a1      	mov	r9, r4
 800758c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007590:	2830      	cmp	r0, #48	@ 0x30
 8007592:	d0fa      	beq.n	800758a <__gethex+0x12>
 8007594:	eba9 0303 	sub.w	r3, r9, r3
 8007598:	f1a3 0b02 	sub.w	fp, r3, #2
 800759c:	f7ff ffd6 	bl	800754c <__hexdig_fun>
 80075a0:	4605      	mov	r5, r0
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d168      	bne.n	8007678 <__gethex+0x100>
 80075a6:	49a0      	ldr	r1, [pc, #640]	@ (8007828 <__gethex+0x2b0>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	4648      	mov	r0, r9
 80075ac:	f7ff ff26 	bl	80073fc <strncmp>
 80075b0:	4607      	mov	r7, r0
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d167      	bne.n	8007686 <__gethex+0x10e>
 80075b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80075ba:	4626      	mov	r6, r4
 80075bc:	f7ff ffc6 	bl	800754c <__hexdig_fun>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d062      	beq.n	800768a <__gethex+0x112>
 80075c4:	4623      	mov	r3, r4
 80075c6:	7818      	ldrb	r0, [r3, #0]
 80075c8:	2830      	cmp	r0, #48	@ 0x30
 80075ca:	4699      	mov	r9, r3
 80075cc:	f103 0301 	add.w	r3, r3, #1
 80075d0:	d0f9      	beq.n	80075c6 <__gethex+0x4e>
 80075d2:	f7ff ffbb 	bl	800754c <__hexdig_fun>
 80075d6:	fab0 f580 	clz	r5, r0
 80075da:	096d      	lsrs	r5, r5, #5
 80075dc:	f04f 0b01 	mov.w	fp, #1
 80075e0:	464a      	mov	r2, r9
 80075e2:	4616      	mov	r6, r2
 80075e4:	3201      	adds	r2, #1
 80075e6:	7830      	ldrb	r0, [r6, #0]
 80075e8:	f7ff ffb0 	bl	800754c <__hexdig_fun>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1f8      	bne.n	80075e2 <__gethex+0x6a>
 80075f0:	498d      	ldr	r1, [pc, #564]	@ (8007828 <__gethex+0x2b0>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff ff01 	bl	80073fc <strncmp>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d13f      	bne.n	800767e <__gethex+0x106>
 80075fe:	b944      	cbnz	r4, 8007612 <__gethex+0x9a>
 8007600:	1c74      	adds	r4, r6, #1
 8007602:	4622      	mov	r2, r4
 8007604:	4616      	mov	r6, r2
 8007606:	3201      	adds	r2, #1
 8007608:	7830      	ldrb	r0, [r6, #0]
 800760a:	f7ff ff9f 	bl	800754c <__hexdig_fun>
 800760e:	2800      	cmp	r0, #0
 8007610:	d1f8      	bne.n	8007604 <__gethex+0x8c>
 8007612:	1ba4      	subs	r4, r4, r6
 8007614:	00a7      	lsls	r7, r4, #2
 8007616:	7833      	ldrb	r3, [r6, #0]
 8007618:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800761c:	2b50      	cmp	r3, #80	@ 0x50
 800761e:	d13e      	bne.n	800769e <__gethex+0x126>
 8007620:	7873      	ldrb	r3, [r6, #1]
 8007622:	2b2b      	cmp	r3, #43	@ 0x2b
 8007624:	d033      	beq.n	800768e <__gethex+0x116>
 8007626:	2b2d      	cmp	r3, #45	@ 0x2d
 8007628:	d034      	beq.n	8007694 <__gethex+0x11c>
 800762a:	1c71      	adds	r1, r6, #1
 800762c:	2400      	movs	r4, #0
 800762e:	7808      	ldrb	r0, [r1, #0]
 8007630:	f7ff ff8c 	bl	800754c <__hexdig_fun>
 8007634:	1e43      	subs	r3, r0, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b18      	cmp	r3, #24
 800763a:	d830      	bhi.n	800769e <__gethex+0x126>
 800763c:	f1a0 0210 	sub.w	r2, r0, #16
 8007640:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007644:	f7ff ff82 	bl	800754c <__hexdig_fun>
 8007648:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800764c:	fa5f fc8c 	uxtb.w	ip, ip
 8007650:	f1bc 0f18 	cmp.w	ip, #24
 8007654:	f04f 030a 	mov.w	r3, #10
 8007658:	d91e      	bls.n	8007698 <__gethex+0x120>
 800765a:	b104      	cbz	r4, 800765e <__gethex+0xe6>
 800765c:	4252      	negs	r2, r2
 800765e:	4417      	add	r7, r2
 8007660:	f8ca 1000 	str.w	r1, [sl]
 8007664:	b1ed      	cbz	r5, 80076a2 <__gethex+0x12a>
 8007666:	f1bb 0f00 	cmp.w	fp, #0
 800766a:	bf0c      	ite	eq
 800766c:	2506      	moveq	r5, #6
 800766e:	2500      	movne	r5, #0
 8007670:	4628      	mov	r0, r5
 8007672:	b005      	add	sp, #20
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	2500      	movs	r5, #0
 800767a:	462c      	mov	r4, r5
 800767c:	e7b0      	b.n	80075e0 <__gethex+0x68>
 800767e:	2c00      	cmp	r4, #0
 8007680:	d1c7      	bne.n	8007612 <__gethex+0x9a>
 8007682:	4627      	mov	r7, r4
 8007684:	e7c7      	b.n	8007616 <__gethex+0x9e>
 8007686:	464e      	mov	r6, r9
 8007688:	462f      	mov	r7, r5
 800768a:	2501      	movs	r5, #1
 800768c:	e7c3      	b.n	8007616 <__gethex+0x9e>
 800768e:	2400      	movs	r4, #0
 8007690:	1cb1      	adds	r1, r6, #2
 8007692:	e7cc      	b.n	800762e <__gethex+0xb6>
 8007694:	2401      	movs	r4, #1
 8007696:	e7fb      	b.n	8007690 <__gethex+0x118>
 8007698:	fb03 0002 	mla	r0, r3, r2, r0
 800769c:	e7ce      	b.n	800763c <__gethex+0xc4>
 800769e:	4631      	mov	r1, r6
 80076a0:	e7de      	b.n	8007660 <__gethex+0xe8>
 80076a2:	eba6 0309 	sub.w	r3, r6, r9
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4629      	mov	r1, r5
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	dc0a      	bgt.n	80076c4 <__gethex+0x14c>
 80076ae:	9801      	ldr	r0, [sp, #4]
 80076b0:	f000 fe82 	bl	80083b8 <_Balloc>
 80076b4:	4604      	mov	r4, r0
 80076b6:	b940      	cbnz	r0, 80076ca <__gethex+0x152>
 80076b8:	4b5c      	ldr	r3, [pc, #368]	@ (800782c <__gethex+0x2b4>)
 80076ba:	4602      	mov	r2, r0
 80076bc:	21e4      	movs	r1, #228	@ 0xe4
 80076be:	485c      	ldr	r0, [pc, #368]	@ (8007830 <__gethex+0x2b8>)
 80076c0:	f001 fc12 	bl	8008ee8 <__assert_func>
 80076c4:	3101      	adds	r1, #1
 80076c6:	105b      	asrs	r3, r3, #1
 80076c8:	e7ef      	b.n	80076aa <__gethex+0x132>
 80076ca:	f100 0a14 	add.w	sl, r0, #20
 80076ce:	2300      	movs	r3, #0
 80076d0:	4655      	mov	r5, sl
 80076d2:	469b      	mov	fp, r3
 80076d4:	45b1      	cmp	r9, r6
 80076d6:	d337      	bcc.n	8007748 <__gethex+0x1d0>
 80076d8:	f845 bb04 	str.w	fp, [r5], #4
 80076dc:	eba5 050a 	sub.w	r5, r5, sl
 80076e0:	10ad      	asrs	r5, r5, #2
 80076e2:	6125      	str	r5, [r4, #16]
 80076e4:	4658      	mov	r0, fp
 80076e6:	f000 ff59 	bl	800859c <__hi0bits>
 80076ea:	016d      	lsls	r5, r5, #5
 80076ec:	f8d8 6000 	ldr.w	r6, [r8]
 80076f0:	1a2d      	subs	r5, r5, r0
 80076f2:	42b5      	cmp	r5, r6
 80076f4:	dd54      	ble.n	80077a0 <__gethex+0x228>
 80076f6:	1bad      	subs	r5, r5, r6
 80076f8:	4629      	mov	r1, r5
 80076fa:	4620      	mov	r0, r4
 80076fc:	f001 fae5 	bl	8008cca <__any_on>
 8007700:	4681      	mov	r9, r0
 8007702:	b178      	cbz	r0, 8007724 <__gethex+0x1ac>
 8007704:	1e6b      	subs	r3, r5, #1
 8007706:	1159      	asrs	r1, r3, #5
 8007708:	f003 021f 	and.w	r2, r3, #31
 800770c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007710:	f04f 0901 	mov.w	r9, #1
 8007714:	fa09 f202 	lsl.w	r2, r9, r2
 8007718:	420a      	tst	r2, r1
 800771a:	d003      	beq.n	8007724 <__gethex+0x1ac>
 800771c:	454b      	cmp	r3, r9
 800771e:	dc36      	bgt.n	800778e <__gethex+0x216>
 8007720:	f04f 0902 	mov.w	r9, #2
 8007724:	4629      	mov	r1, r5
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff febe 	bl	80074a8 <rshift>
 800772c:	442f      	add	r7, r5
 800772e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007732:	42bb      	cmp	r3, r7
 8007734:	da42      	bge.n	80077bc <__gethex+0x244>
 8007736:	9801      	ldr	r0, [sp, #4]
 8007738:	4621      	mov	r1, r4
 800773a:	f000 fe7d 	bl	8008438 <_Bfree>
 800773e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007740:	2300      	movs	r3, #0
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	25a3      	movs	r5, #163	@ 0xa3
 8007746:	e793      	b.n	8007670 <__gethex+0xf8>
 8007748:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800774c:	2a2e      	cmp	r2, #46	@ 0x2e
 800774e:	d012      	beq.n	8007776 <__gethex+0x1fe>
 8007750:	2b20      	cmp	r3, #32
 8007752:	d104      	bne.n	800775e <__gethex+0x1e6>
 8007754:	f845 bb04 	str.w	fp, [r5], #4
 8007758:	f04f 0b00 	mov.w	fp, #0
 800775c:	465b      	mov	r3, fp
 800775e:	7830      	ldrb	r0, [r6, #0]
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	f7ff fef3 	bl	800754c <__hexdig_fun>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	f000 000f 	and.w	r0, r0, #15
 800776c:	4098      	lsls	r0, r3
 800776e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007772:	3304      	adds	r3, #4
 8007774:	e7ae      	b.n	80076d4 <__gethex+0x15c>
 8007776:	45b1      	cmp	r9, r6
 8007778:	d8ea      	bhi.n	8007750 <__gethex+0x1d8>
 800777a:	492b      	ldr	r1, [pc, #172]	@ (8007828 <__gethex+0x2b0>)
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff fe3b 	bl	80073fc <strncmp>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	2800      	cmp	r0, #0
 800778a:	d1e1      	bne.n	8007750 <__gethex+0x1d8>
 800778c:	e7a2      	b.n	80076d4 <__gethex+0x15c>
 800778e:	1ea9      	subs	r1, r5, #2
 8007790:	4620      	mov	r0, r4
 8007792:	f001 fa9a 	bl	8008cca <__any_on>
 8007796:	2800      	cmp	r0, #0
 8007798:	d0c2      	beq.n	8007720 <__gethex+0x1a8>
 800779a:	f04f 0903 	mov.w	r9, #3
 800779e:	e7c1      	b.n	8007724 <__gethex+0x1ac>
 80077a0:	da09      	bge.n	80077b6 <__gethex+0x23e>
 80077a2:	1b75      	subs	r5, r6, r5
 80077a4:	4621      	mov	r1, r4
 80077a6:	9801      	ldr	r0, [sp, #4]
 80077a8:	462a      	mov	r2, r5
 80077aa:	f001 f855 	bl	8008858 <__lshift>
 80077ae:	1b7f      	subs	r7, r7, r5
 80077b0:	4604      	mov	r4, r0
 80077b2:	f100 0a14 	add.w	sl, r0, #20
 80077b6:	f04f 0900 	mov.w	r9, #0
 80077ba:	e7b8      	b.n	800772e <__gethex+0x1b6>
 80077bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80077c0:	42bd      	cmp	r5, r7
 80077c2:	dd6f      	ble.n	80078a4 <__gethex+0x32c>
 80077c4:	1bed      	subs	r5, r5, r7
 80077c6:	42ae      	cmp	r6, r5
 80077c8:	dc34      	bgt.n	8007834 <__gethex+0x2bc>
 80077ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d022      	beq.n	8007818 <__gethex+0x2a0>
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d024      	beq.n	8007820 <__gethex+0x2a8>
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d115      	bne.n	8007806 <__gethex+0x28e>
 80077da:	42ae      	cmp	r6, r5
 80077dc:	d113      	bne.n	8007806 <__gethex+0x28e>
 80077de:	2e01      	cmp	r6, #1
 80077e0:	d10b      	bne.n	80077fa <__gethex+0x282>
 80077e2:	9a02      	ldr	r2, [sp, #8]
 80077e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077e8:	6013      	str	r3, [r2, #0]
 80077ea:	2301      	movs	r3, #1
 80077ec:	6123      	str	r3, [r4, #16]
 80077ee:	f8ca 3000 	str.w	r3, [sl]
 80077f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077f4:	2562      	movs	r5, #98	@ 0x62
 80077f6:	601c      	str	r4, [r3, #0]
 80077f8:	e73a      	b.n	8007670 <__gethex+0xf8>
 80077fa:	1e71      	subs	r1, r6, #1
 80077fc:	4620      	mov	r0, r4
 80077fe:	f001 fa64 	bl	8008cca <__any_on>
 8007802:	2800      	cmp	r0, #0
 8007804:	d1ed      	bne.n	80077e2 <__gethex+0x26a>
 8007806:	9801      	ldr	r0, [sp, #4]
 8007808:	4621      	mov	r1, r4
 800780a:	f000 fe15 	bl	8008438 <_Bfree>
 800780e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007810:	2300      	movs	r3, #0
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	2550      	movs	r5, #80	@ 0x50
 8007816:	e72b      	b.n	8007670 <__gethex+0xf8>
 8007818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f3      	bne.n	8007806 <__gethex+0x28e>
 800781e:	e7e0      	b.n	80077e2 <__gethex+0x26a>
 8007820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1dd      	bne.n	80077e2 <__gethex+0x26a>
 8007826:	e7ee      	b.n	8007806 <__gethex+0x28e>
 8007828:	080095f0 	.word	0x080095f0
 800782c:	08009606 	.word	0x08009606
 8007830:	08009617 	.word	0x08009617
 8007834:	1e6f      	subs	r7, r5, #1
 8007836:	f1b9 0f00 	cmp.w	r9, #0
 800783a:	d130      	bne.n	800789e <__gethex+0x326>
 800783c:	b127      	cbz	r7, 8007848 <__gethex+0x2d0>
 800783e:	4639      	mov	r1, r7
 8007840:	4620      	mov	r0, r4
 8007842:	f001 fa42 	bl	8008cca <__any_on>
 8007846:	4681      	mov	r9, r0
 8007848:	117a      	asrs	r2, r7, #5
 800784a:	2301      	movs	r3, #1
 800784c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007850:	f007 071f 	and.w	r7, r7, #31
 8007854:	40bb      	lsls	r3, r7
 8007856:	4213      	tst	r3, r2
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	bf18      	it	ne
 800785e:	f049 0902 	orrne.w	r9, r9, #2
 8007862:	f7ff fe21 	bl	80074a8 <rshift>
 8007866:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800786a:	1b76      	subs	r6, r6, r5
 800786c:	2502      	movs	r5, #2
 800786e:	f1b9 0f00 	cmp.w	r9, #0
 8007872:	d047      	beq.n	8007904 <__gethex+0x38c>
 8007874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d015      	beq.n	80078a8 <__gethex+0x330>
 800787c:	2b03      	cmp	r3, #3
 800787e:	d017      	beq.n	80078b0 <__gethex+0x338>
 8007880:	2b01      	cmp	r3, #1
 8007882:	d109      	bne.n	8007898 <__gethex+0x320>
 8007884:	f019 0f02 	tst.w	r9, #2
 8007888:	d006      	beq.n	8007898 <__gethex+0x320>
 800788a:	f8da 3000 	ldr.w	r3, [sl]
 800788e:	ea49 0903 	orr.w	r9, r9, r3
 8007892:	f019 0f01 	tst.w	r9, #1
 8007896:	d10e      	bne.n	80078b6 <__gethex+0x33e>
 8007898:	f045 0510 	orr.w	r5, r5, #16
 800789c:	e032      	b.n	8007904 <__gethex+0x38c>
 800789e:	f04f 0901 	mov.w	r9, #1
 80078a2:	e7d1      	b.n	8007848 <__gethex+0x2d0>
 80078a4:	2501      	movs	r5, #1
 80078a6:	e7e2      	b.n	800786e <__gethex+0x2f6>
 80078a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078aa:	f1c3 0301 	rsb	r3, r3, #1
 80078ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <__gethex+0x320>
 80078b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80078ba:	f104 0314 	add.w	r3, r4, #20
 80078be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80078c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80078c6:	f04f 0c00 	mov.w	ip, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80078d4:	d01b      	beq.n	800790e <__gethex+0x396>
 80078d6:	3201      	adds	r2, #1
 80078d8:	6002      	str	r2, [r0, #0]
 80078da:	2d02      	cmp	r5, #2
 80078dc:	f104 0314 	add.w	r3, r4, #20
 80078e0:	d13c      	bne.n	800795c <__gethex+0x3e4>
 80078e2:	f8d8 2000 	ldr.w	r2, [r8]
 80078e6:	3a01      	subs	r2, #1
 80078e8:	42b2      	cmp	r2, r6
 80078ea:	d109      	bne.n	8007900 <__gethex+0x388>
 80078ec:	1171      	asrs	r1, r6, #5
 80078ee:	2201      	movs	r2, #1
 80078f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078f4:	f006 061f 	and.w	r6, r6, #31
 80078f8:	fa02 f606 	lsl.w	r6, r2, r6
 80078fc:	421e      	tst	r6, r3
 80078fe:	d13a      	bne.n	8007976 <__gethex+0x3fe>
 8007900:	f045 0520 	orr.w	r5, r5, #32
 8007904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007906:	601c      	str	r4, [r3, #0]
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	601f      	str	r7, [r3, #0]
 800790c:	e6b0      	b.n	8007670 <__gethex+0xf8>
 800790e:	4299      	cmp	r1, r3
 8007910:	f843 cc04 	str.w	ip, [r3, #-4]
 8007914:	d8d9      	bhi.n	80078ca <__gethex+0x352>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	459b      	cmp	fp, r3
 800791a:	db17      	blt.n	800794c <__gethex+0x3d4>
 800791c:	6861      	ldr	r1, [r4, #4]
 800791e:	9801      	ldr	r0, [sp, #4]
 8007920:	3101      	adds	r1, #1
 8007922:	f000 fd49 	bl	80083b8 <_Balloc>
 8007926:	4681      	mov	r9, r0
 8007928:	b918      	cbnz	r0, 8007932 <__gethex+0x3ba>
 800792a:	4b1a      	ldr	r3, [pc, #104]	@ (8007994 <__gethex+0x41c>)
 800792c:	4602      	mov	r2, r0
 800792e:	2184      	movs	r1, #132	@ 0x84
 8007930:	e6c5      	b.n	80076be <__gethex+0x146>
 8007932:	6922      	ldr	r2, [r4, #16]
 8007934:	3202      	adds	r2, #2
 8007936:	f104 010c 	add.w	r1, r4, #12
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	300c      	adds	r0, #12
 800793e:	f7ff fd9c 	bl	800747a <memcpy>
 8007942:	4621      	mov	r1, r4
 8007944:	9801      	ldr	r0, [sp, #4]
 8007946:	f000 fd77 	bl	8008438 <_Bfree>
 800794a:	464c      	mov	r4, r9
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007954:	6122      	str	r2, [r4, #16]
 8007956:	2201      	movs	r2, #1
 8007958:	615a      	str	r2, [r3, #20]
 800795a:	e7be      	b.n	80078da <__gethex+0x362>
 800795c:	6922      	ldr	r2, [r4, #16]
 800795e:	455a      	cmp	r2, fp
 8007960:	dd0b      	ble.n	800797a <__gethex+0x402>
 8007962:	2101      	movs	r1, #1
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff fd9f 	bl	80074a8 <rshift>
 800796a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800796e:	3701      	adds	r7, #1
 8007970:	42bb      	cmp	r3, r7
 8007972:	f6ff aee0 	blt.w	8007736 <__gethex+0x1be>
 8007976:	2501      	movs	r5, #1
 8007978:	e7c2      	b.n	8007900 <__gethex+0x388>
 800797a:	f016 061f 	ands.w	r6, r6, #31
 800797e:	d0fa      	beq.n	8007976 <__gethex+0x3fe>
 8007980:	4453      	add	r3, sl
 8007982:	f1c6 0620 	rsb	r6, r6, #32
 8007986:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800798a:	f000 fe07 	bl	800859c <__hi0bits>
 800798e:	42b0      	cmp	r0, r6
 8007990:	dbe7      	blt.n	8007962 <__gethex+0x3ea>
 8007992:	e7f0      	b.n	8007976 <__gethex+0x3fe>
 8007994:	08009606 	.word	0x08009606

08007998 <L_shift>:
 8007998:	f1c2 0208 	rsb	r2, r2, #8
 800799c:	0092      	lsls	r2, r2, #2
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	f1c2 0620 	rsb	r6, r2, #32
 80079a4:	6843      	ldr	r3, [r0, #4]
 80079a6:	6804      	ldr	r4, [r0, #0]
 80079a8:	fa03 f506 	lsl.w	r5, r3, r6
 80079ac:	432c      	orrs	r4, r5
 80079ae:	40d3      	lsrs	r3, r2
 80079b0:	6004      	str	r4, [r0, #0]
 80079b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80079b6:	4288      	cmp	r0, r1
 80079b8:	d3f4      	bcc.n	80079a4 <L_shift+0xc>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}

080079bc <__match>:
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	6803      	ldr	r3, [r0, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c6:	b914      	cbnz	r4, 80079ce <__match+0x12>
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	2001      	movs	r0, #1
 80079cc:	bd30      	pop	{r4, r5, pc}
 80079ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80079d6:	2d19      	cmp	r5, #25
 80079d8:	bf98      	it	ls
 80079da:	3220      	addls	r2, #32
 80079dc:	42a2      	cmp	r2, r4
 80079de:	d0f0      	beq.n	80079c2 <__match+0x6>
 80079e0:	2000      	movs	r0, #0
 80079e2:	e7f3      	b.n	80079cc <__match+0x10>

080079e4 <__hexnan>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	680b      	ldr	r3, [r1, #0]
 80079ea:	6801      	ldr	r1, [r0, #0]
 80079ec:	115e      	asrs	r6, r3, #5
 80079ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079f2:	f013 031f 	ands.w	r3, r3, #31
 80079f6:	b087      	sub	sp, #28
 80079f8:	bf18      	it	ne
 80079fa:	3604      	addne	r6, #4
 80079fc:	2500      	movs	r5, #0
 80079fe:	1f37      	subs	r7, r6, #4
 8007a00:	4682      	mov	sl, r0
 8007a02:	4690      	mov	r8, r2
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	f846 5c04 	str.w	r5, [r6, #-4]
 8007a0a:	46b9      	mov	r9, r7
 8007a0c:	463c      	mov	r4, r7
 8007a0e:	9502      	str	r5, [sp, #8]
 8007a10:	46ab      	mov	fp, r5
 8007a12:	784a      	ldrb	r2, [r1, #1]
 8007a14:	1c4b      	adds	r3, r1, #1
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	b342      	cbz	r2, 8007a6c <__hexnan+0x88>
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	9105      	str	r1, [sp, #20]
 8007a1e:	9204      	str	r2, [sp, #16]
 8007a20:	f7ff fd94 	bl	800754c <__hexdig_fun>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d151      	bne.n	8007acc <__hexnan+0xe8>
 8007a28:	9a04      	ldr	r2, [sp, #16]
 8007a2a:	9905      	ldr	r1, [sp, #20]
 8007a2c:	2a20      	cmp	r2, #32
 8007a2e:	d818      	bhi.n	8007a62 <__hexnan+0x7e>
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	459b      	cmp	fp, r3
 8007a34:	dd13      	ble.n	8007a5e <__hexnan+0x7a>
 8007a36:	454c      	cmp	r4, r9
 8007a38:	d206      	bcs.n	8007a48 <__hexnan+0x64>
 8007a3a:	2d07      	cmp	r5, #7
 8007a3c:	dc04      	bgt.n	8007a48 <__hexnan+0x64>
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4649      	mov	r1, r9
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff ffa8 	bl	8007998 <L_shift>
 8007a48:	4544      	cmp	r4, r8
 8007a4a:	d952      	bls.n	8007af2 <__hexnan+0x10e>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f1a4 0904 	sub.w	r9, r4, #4
 8007a52:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a56:	f8cd b008 	str.w	fp, [sp, #8]
 8007a5a:	464c      	mov	r4, r9
 8007a5c:	461d      	mov	r5, r3
 8007a5e:	9903      	ldr	r1, [sp, #12]
 8007a60:	e7d7      	b.n	8007a12 <__hexnan+0x2e>
 8007a62:	2a29      	cmp	r2, #41	@ 0x29
 8007a64:	d157      	bne.n	8007b16 <__hexnan+0x132>
 8007a66:	3102      	adds	r1, #2
 8007a68:	f8ca 1000 	str.w	r1, [sl]
 8007a6c:	f1bb 0f00 	cmp.w	fp, #0
 8007a70:	d051      	beq.n	8007b16 <__hexnan+0x132>
 8007a72:	454c      	cmp	r4, r9
 8007a74:	d206      	bcs.n	8007a84 <__hexnan+0xa0>
 8007a76:	2d07      	cmp	r5, #7
 8007a78:	dc04      	bgt.n	8007a84 <__hexnan+0xa0>
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff ff8a 	bl	8007998 <L_shift>
 8007a84:	4544      	cmp	r4, r8
 8007a86:	d936      	bls.n	8007af6 <__hexnan+0x112>
 8007a88:	f1a8 0204 	sub.w	r2, r8, #4
 8007a8c:	4623      	mov	r3, r4
 8007a8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a92:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a96:	429f      	cmp	r7, r3
 8007a98:	d2f9      	bcs.n	8007a8e <__hexnan+0xaa>
 8007a9a:	1b3b      	subs	r3, r7, r4
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	3e03      	subs	r6, #3
 8007aa6:	42b4      	cmp	r4, r6
 8007aa8:	bf88      	it	hi
 8007aaa:	2304      	movhi	r3, #4
 8007aac:	4443      	add	r3, r8
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f843 2b04 	str.w	r2, [r3], #4
 8007ab4:	429f      	cmp	r7, r3
 8007ab6:	d2fb      	bcs.n	8007ab0 <__hexnan+0xcc>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	b91b      	cbnz	r3, 8007ac4 <__hexnan+0xe0>
 8007abc:	4547      	cmp	r7, r8
 8007abe:	d128      	bne.n	8007b12 <__hexnan+0x12e>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	2005      	movs	r0, #5
 8007ac6:	b007      	add	sp, #28
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	3501      	adds	r5, #1
 8007ace:	2d08      	cmp	r5, #8
 8007ad0:	f10b 0b01 	add.w	fp, fp, #1
 8007ad4:	dd06      	ble.n	8007ae4 <__hexnan+0x100>
 8007ad6:	4544      	cmp	r4, r8
 8007ad8:	d9c1      	bls.n	8007a5e <__hexnan+0x7a>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ae0:	2501      	movs	r5, #1
 8007ae2:	3c04      	subs	r4, #4
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	f000 000f 	and.w	r0, r0, #15
 8007aea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	e7b5      	b.n	8007a5e <__hexnan+0x7a>
 8007af2:	2508      	movs	r5, #8
 8007af4:	e7b3      	b.n	8007a5e <__hexnan+0x7a>
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0dd      	beq.n	8007ab8 <__hexnan+0xd4>
 8007afc:	f1c3 0320 	rsb	r3, r3, #32
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b04:	40da      	lsrs	r2, r3
 8007b06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007b10:	e7d2      	b.n	8007ab8 <__hexnan+0xd4>
 8007b12:	3f04      	subs	r7, #4
 8007b14:	e7d0      	b.n	8007ab8 <__hexnan+0xd4>
 8007b16:	2004      	movs	r0, #4
 8007b18:	e7d5      	b.n	8007ac6 <__hexnan+0xe2>

08007b1a <__ssputs_r>:
 8007b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1e:	688e      	ldr	r6, [r1, #8]
 8007b20:	461f      	mov	r7, r3
 8007b22:	42be      	cmp	r6, r7
 8007b24:	680b      	ldr	r3, [r1, #0]
 8007b26:	4682      	mov	sl, r0
 8007b28:	460c      	mov	r4, r1
 8007b2a:	4690      	mov	r8, r2
 8007b2c:	d82d      	bhi.n	8007b8a <__ssputs_r+0x70>
 8007b2e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b32:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b36:	d026      	beq.n	8007b86 <__ssputs_r+0x6c>
 8007b38:	6965      	ldr	r5, [r4, #20]
 8007b3a:	6909      	ldr	r1, [r1, #16]
 8007b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b40:	eba3 0901 	sub.w	r9, r3, r1
 8007b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b48:	1c7b      	adds	r3, r7, #1
 8007b4a:	444b      	add	r3, r9
 8007b4c:	106d      	asrs	r5, r5, #1
 8007b4e:	429d      	cmp	r5, r3
 8007b50:	bf38      	it	cc
 8007b52:	461d      	movcc	r5, r3
 8007b54:	0553      	lsls	r3, r2, #21
 8007b56:	d527      	bpl.n	8007ba8 <__ssputs_r+0x8e>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f000 f957 	bl	8007e0c <_malloc_r>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	b360      	cbz	r0, 8007bbc <__ssputs_r+0xa2>
 8007b62:	6921      	ldr	r1, [r4, #16]
 8007b64:	464a      	mov	r2, r9
 8007b66:	f7ff fc88 	bl	800747a <memcpy>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	6126      	str	r6, [r4, #16]
 8007b78:	6165      	str	r5, [r4, #20]
 8007b7a:	444e      	add	r6, r9
 8007b7c:	eba5 0509 	sub.w	r5, r5, r9
 8007b80:	6026      	str	r6, [r4, #0]
 8007b82:	60a5      	str	r5, [r4, #8]
 8007b84:	463e      	mov	r6, r7
 8007b86:	42be      	cmp	r6, r7
 8007b88:	d900      	bls.n	8007b8c <__ssputs_r+0x72>
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4641      	mov	r1, r8
 8007b92:	f001 f939 	bl	8008e08 <memmove>
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	1b9b      	subs	r3, r3, r6
 8007b9a:	60a3      	str	r3, [r4, #8]
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	4433      	add	r3, r6
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	462a      	mov	r2, r5
 8007baa:	f001 f8f2 	bl	8008d92 <_realloc_r>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1e0      	bne.n	8007b76 <__ssputs_r+0x5c>
 8007bb4:	6921      	ldr	r1, [r4, #16]
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	f001 f9c8 	bl	8008f4c <_free_r>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	f8ca 3000 	str.w	r3, [sl]
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bce:	e7e9      	b.n	8007ba4 <__ssputs_r+0x8a>

08007bd0 <_svfiprintf_r>:
 8007bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	4698      	mov	r8, r3
 8007bd6:	898b      	ldrh	r3, [r1, #12]
 8007bd8:	061b      	lsls	r3, r3, #24
 8007bda:	b09d      	sub	sp, #116	@ 0x74
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	d510      	bpl.n	8007c06 <_svfiprintf_r+0x36>
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	b973      	cbnz	r3, 8007c06 <_svfiprintf_r+0x36>
 8007be8:	2140      	movs	r1, #64	@ 0x40
 8007bea:	f000 f90f 	bl	8007e0c <_malloc_r>
 8007bee:	6028      	str	r0, [r5, #0]
 8007bf0:	6128      	str	r0, [r5, #16]
 8007bf2:	b930      	cbnz	r0, 8007c02 <_svfiprintf_r+0x32>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bfc:	b01d      	add	sp, #116	@ 0x74
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	2340      	movs	r3, #64	@ 0x40
 8007c04:	616b      	str	r3, [r5, #20]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c0a:	2320      	movs	r3, #32
 8007c0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c14:	2330      	movs	r3, #48	@ 0x30
 8007c16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007db4 <_svfiprintf_r+0x1e4>
 8007c1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c1e:	f04f 0901 	mov.w	r9, #1
 8007c22:	4623      	mov	r3, r4
 8007c24:	469a      	mov	sl, r3
 8007c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2a:	b10a      	cbz	r2, 8007c30 <_svfiprintf_r+0x60>
 8007c2c:	2a25      	cmp	r2, #37	@ 0x25
 8007c2e:	d1f9      	bne.n	8007c24 <_svfiprintf_r+0x54>
 8007c30:	ebba 0b04 	subs.w	fp, sl, r4
 8007c34:	d00b      	beq.n	8007c4e <_svfiprintf_r+0x7e>
 8007c36:	465b      	mov	r3, fp
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff ff6c 	bl	8007b1a <__ssputs_r>
 8007c42:	3001      	adds	r0, #1
 8007c44:	f000 80a7 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c4a:	445a      	add	r2, fp
 8007c4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 809f 	beq.w	8007d96 <_svfiprintf_r+0x1c6>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c62:	f10a 0a01 	add.w	sl, sl, #1
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c70:	4654      	mov	r4, sl
 8007c72:	2205      	movs	r2, #5
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	484e      	ldr	r0, [pc, #312]	@ (8007db4 <_svfiprintf_r+0x1e4>)
 8007c7a:	f7f8 fac9 	bl	8000210 <memchr>
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	b9d8      	cbnz	r0, 8007cba <_svfiprintf_r+0xea>
 8007c82:	06d0      	lsls	r0, r2, #27
 8007c84:	bf44      	itt	mi
 8007c86:	2320      	movmi	r3, #32
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c8c:	0711      	lsls	r1, r2, #28
 8007c8e:	bf44      	itt	mi
 8007c90:	232b      	movmi	r3, #43	@ 0x2b
 8007c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c96:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9c:	d015      	beq.n	8007cca <_svfiprintf_r+0xfa>
 8007c9e:	9a07      	ldr	r2, [sp, #28]
 8007ca0:	4654      	mov	r4, sl
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f04f 0c0a 	mov.w	ip, #10
 8007ca8:	4621      	mov	r1, r4
 8007caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cae:	3b30      	subs	r3, #48	@ 0x30
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d94b      	bls.n	8007d4c <_svfiprintf_r+0x17c>
 8007cb4:	b1b0      	cbz	r0, 8007ce4 <_svfiprintf_r+0x114>
 8007cb6:	9207      	str	r2, [sp, #28]
 8007cb8:	e014      	b.n	8007ce4 <_svfiprintf_r+0x114>
 8007cba:	eba0 0308 	sub.w	r3, r0, r8
 8007cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	46a2      	mov	sl, r4
 8007cc8:	e7d2      	b.n	8007c70 <_svfiprintf_r+0xa0>
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	1d19      	adds	r1, r3, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	9103      	str	r1, [sp, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfbb      	ittet	lt
 8007cd6:	425b      	neglt	r3, r3
 8007cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cdc:	9307      	strge	r3, [sp, #28]
 8007cde:	9307      	strlt	r3, [sp, #28]
 8007ce0:	bfb8      	it	lt
 8007ce2:	9204      	strlt	r2, [sp, #16]
 8007ce4:	7823      	ldrb	r3, [r4, #0]
 8007ce6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ce8:	d10a      	bne.n	8007d00 <_svfiprintf_r+0x130>
 8007cea:	7863      	ldrb	r3, [r4, #1]
 8007cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cee:	d132      	bne.n	8007d56 <_svfiprintf_r+0x186>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	1d1a      	adds	r2, r3, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	9203      	str	r2, [sp, #12]
 8007cf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cfc:	3402      	adds	r4, #2
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dc4 <_svfiprintf_r+0x1f4>
 8007d04:	7821      	ldrb	r1, [r4, #0]
 8007d06:	2203      	movs	r2, #3
 8007d08:	4650      	mov	r0, sl
 8007d0a:	f7f8 fa81 	bl	8000210 <memchr>
 8007d0e:	b138      	cbz	r0, 8007d20 <_svfiprintf_r+0x150>
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	eba0 000a 	sub.w	r0, r0, sl
 8007d16:	2240      	movs	r2, #64	@ 0x40
 8007d18:	4082      	lsls	r2, r0
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	3401      	adds	r4, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d24:	4824      	ldr	r0, [pc, #144]	@ (8007db8 <_svfiprintf_r+0x1e8>)
 8007d26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d2a:	2206      	movs	r2, #6
 8007d2c:	f7f8 fa70 	bl	8000210 <memchr>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d036      	beq.n	8007da2 <_svfiprintf_r+0x1d2>
 8007d34:	4b21      	ldr	r3, [pc, #132]	@ (8007dbc <_svfiprintf_r+0x1ec>)
 8007d36:	bb1b      	cbnz	r3, 8007d80 <_svfiprintf_r+0x1b0>
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	3307      	adds	r3, #7
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	3308      	adds	r3, #8
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d46:	4433      	add	r3, r6
 8007d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4a:	e76a      	b.n	8007c22 <_svfiprintf_r+0x52>
 8007d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d50:	460c      	mov	r4, r1
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7a8      	b.n	8007ca8 <_svfiprintf_r+0xd8>
 8007d56:	2300      	movs	r3, #0
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f04f 0c0a 	mov.w	ip, #10
 8007d62:	4620      	mov	r0, r4
 8007d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d68:	3a30      	subs	r2, #48	@ 0x30
 8007d6a:	2a09      	cmp	r2, #9
 8007d6c:	d903      	bls.n	8007d76 <_svfiprintf_r+0x1a6>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0c6      	beq.n	8007d00 <_svfiprintf_r+0x130>
 8007d72:	9105      	str	r1, [sp, #20]
 8007d74:	e7c4      	b.n	8007d00 <_svfiprintf_r+0x130>
 8007d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f0      	b.n	8007d62 <_svfiprintf_r+0x192>
 8007d80:	ab03      	add	r3, sp, #12
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <_svfiprintf_r+0x1f0>)
 8007d88:	a904      	add	r1, sp, #16
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	f3af 8000 	nop.w
 8007d90:	1c42      	adds	r2, r0, #1
 8007d92:	4606      	mov	r6, r0
 8007d94:	d1d6      	bne.n	8007d44 <_svfiprintf_r+0x174>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	065b      	lsls	r3, r3, #25
 8007d9a:	f53f af2d 	bmi.w	8007bf8 <_svfiprintf_r+0x28>
 8007d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007da0:	e72c      	b.n	8007bfc <_svfiprintf_r+0x2c>
 8007da2:	ab03      	add	r3, sp, #12
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	462a      	mov	r2, r5
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <_svfiprintf_r+0x1f0>)
 8007daa:	a904      	add	r1, sp, #16
 8007dac:	4638      	mov	r0, r7
 8007dae:	f000 f92d 	bl	800800c <_printf_i>
 8007db2:	e7ed      	b.n	8007d90 <_svfiprintf_r+0x1c0>
 8007db4:	08009677 	.word	0x08009677
 8007db8:	08009681 	.word	0x08009681
 8007dbc:	00000000 	.word	0x00000000
 8007dc0:	08007b1b 	.word	0x08007b1b
 8007dc4:	0800967d 	.word	0x0800967d

08007dc8 <sbrk_aligned>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	4e0f      	ldr	r6, [pc, #60]	@ (8007e08 <sbrk_aligned+0x40>)
 8007dcc:	460c      	mov	r4, r1
 8007dce:	6831      	ldr	r1, [r6, #0]
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	b911      	cbnz	r1, 8007dda <sbrk_aligned+0x12>
 8007dd4:	f001 f856 	bl	8008e84 <_sbrk_r>
 8007dd8:	6030      	str	r0, [r6, #0]
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f001 f851 	bl	8008e84 <_sbrk_r>
 8007de2:	1c43      	adds	r3, r0, #1
 8007de4:	d103      	bne.n	8007dee <sbrk_aligned+0x26>
 8007de6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007dea:	4620      	mov	r0, r4
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	1cc4      	adds	r4, r0, #3
 8007df0:	f024 0403 	bic.w	r4, r4, #3
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d0f8      	beq.n	8007dea <sbrk_aligned+0x22>
 8007df8:	1a21      	subs	r1, r4, r0
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f001 f842 	bl	8008e84 <_sbrk_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d1f2      	bne.n	8007dea <sbrk_aligned+0x22>
 8007e04:	e7ef      	b.n	8007de6 <sbrk_aligned+0x1e>
 8007e06:	bf00      	nop
 8007e08:	20000620 	.word	0x20000620

08007e0c <_malloc_r>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	1ccd      	adds	r5, r1, #3
 8007e12:	f025 0503 	bic.w	r5, r5, #3
 8007e16:	3508      	adds	r5, #8
 8007e18:	2d0c      	cmp	r5, #12
 8007e1a:	bf38      	it	cc
 8007e1c:	250c      	movcc	r5, #12
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	4606      	mov	r6, r0
 8007e22:	db01      	blt.n	8007e28 <_malloc_r+0x1c>
 8007e24:	42a9      	cmp	r1, r5
 8007e26:	d904      	bls.n	8007e32 <_malloc_r+0x26>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	6033      	str	r3, [r6, #0]
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f08 <_malloc_r+0xfc>
 8007e36:	f000 fab3 	bl	80083a0 <__malloc_lock>
 8007e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3e:	461c      	mov	r4, r3
 8007e40:	bb44      	cbnz	r4, 8007e94 <_malloc_r+0x88>
 8007e42:	4629      	mov	r1, r5
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7ff ffbf 	bl	8007dc8 <sbrk_aligned>
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	d158      	bne.n	8007f02 <_malloc_r+0xf6>
 8007e50:	f8d8 4000 	ldr.w	r4, [r8]
 8007e54:	4627      	mov	r7, r4
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	d143      	bne.n	8007ee2 <_malloc_r+0xd6>
 8007e5a:	2c00      	cmp	r4, #0
 8007e5c:	d04b      	beq.n	8007ef6 <_malloc_r+0xea>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	4639      	mov	r1, r7
 8007e62:	4630      	mov	r0, r6
 8007e64:	eb04 0903 	add.w	r9, r4, r3
 8007e68:	f001 f80c 	bl	8008e84 <_sbrk_r>
 8007e6c:	4581      	cmp	r9, r0
 8007e6e:	d142      	bne.n	8007ef6 <_malloc_r+0xea>
 8007e70:	6821      	ldr	r1, [r4, #0]
 8007e72:	1a6d      	subs	r5, r5, r1
 8007e74:	4629      	mov	r1, r5
 8007e76:	4630      	mov	r0, r6
 8007e78:	f7ff ffa6 	bl	8007dc8 <sbrk_aligned>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d03a      	beq.n	8007ef6 <_malloc_r+0xea>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	442b      	add	r3, r5
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	bb62      	cbnz	r2, 8007ee8 <_malloc_r+0xdc>
 8007e8e:	f8c8 7000 	str.w	r7, [r8]
 8007e92:	e00f      	b.n	8007eb4 <_malloc_r+0xa8>
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	1b52      	subs	r2, r2, r5
 8007e98:	d420      	bmi.n	8007edc <_malloc_r+0xd0>
 8007e9a:	2a0b      	cmp	r2, #11
 8007e9c:	d917      	bls.n	8007ece <_malloc_r+0xc2>
 8007e9e:	1961      	adds	r1, r4, r5
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	6025      	str	r5, [r4, #0]
 8007ea4:	bf18      	it	ne
 8007ea6:	6059      	strne	r1, [r3, #4]
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	bf08      	it	eq
 8007eac:	f8c8 1000 	streq.w	r1, [r8]
 8007eb0:	5162      	str	r2, [r4, r5]
 8007eb2:	604b      	str	r3, [r1, #4]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 fa79 	bl	80083ac <__malloc_unlock>
 8007eba:	f104 000b 	add.w	r0, r4, #11
 8007ebe:	1d23      	adds	r3, r4, #4
 8007ec0:	f020 0007 	bic.w	r0, r0, #7
 8007ec4:	1ac2      	subs	r2, r0, r3
 8007ec6:	bf1c      	itt	ne
 8007ec8:	1a1b      	subne	r3, r3, r0
 8007eca:	50a3      	strne	r3, [r4, r2]
 8007ecc:	e7af      	b.n	8007e2e <_malloc_r+0x22>
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	bf0c      	ite	eq
 8007ed4:	f8c8 2000 	streq.w	r2, [r8]
 8007ed8:	605a      	strne	r2, [r3, #4]
 8007eda:	e7eb      	b.n	8007eb4 <_malloc_r+0xa8>
 8007edc:	4623      	mov	r3, r4
 8007ede:	6864      	ldr	r4, [r4, #4]
 8007ee0:	e7ae      	b.n	8007e40 <_malloc_r+0x34>
 8007ee2:	463c      	mov	r4, r7
 8007ee4:	687f      	ldr	r7, [r7, #4]
 8007ee6:	e7b6      	b.n	8007e56 <_malloc_r+0x4a>
 8007ee8:	461a      	mov	r2, r3
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d1fb      	bne.n	8007ee8 <_malloc_r+0xdc>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6053      	str	r3, [r2, #4]
 8007ef4:	e7de      	b.n	8007eb4 <_malloc_r+0xa8>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	6033      	str	r3, [r6, #0]
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 fa56 	bl	80083ac <__malloc_unlock>
 8007f00:	e794      	b.n	8007e2c <_malloc_r+0x20>
 8007f02:	6005      	str	r5, [r0, #0]
 8007f04:	e7d6      	b.n	8007eb4 <_malloc_r+0xa8>
 8007f06:	bf00      	nop
 8007f08:	20000624 	.word	0x20000624

08007f0c <__ascii_mbtowc>:
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	b901      	cbnz	r1, 8007f12 <__ascii_mbtowc+0x6>
 8007f10:	a901      	add	r1, sp, #4
 8007f12:	b142      	cbz	r2, 8007f26 <__ascii_mbtowc+0x1a>
 8007f14:	b14b      	cbz	r3, 8007f2a <__ascii_mbtowc+0x1e>
 8007f16:	7813      	ldrb	r3, [r2, #0]
 8007f18:	600b      	str	r3, [r1, #0]
 8007f1a:	7812      	ldrb	r2, [r2, #0]
 8007f1c:	1e10      	subs	r0, r2, #0
 8007f1e:	bf18      	it	ne
 8007f20:	2001      	movne	r0, #1
 8007f22:	b002      	add	sp, #8
 8007f24:	4770      	bx	lr
 8007f26:	4610      	mov	r0, r2
 8007f28:	e7fb      	b.n	8007f22 <__ascii_mbtowc+0x16>
 8007f2a:	f06f 0001 	mvn.w	r0, #1
 8007f2e:	e7f8      	b.n	8007f22 <__ascii_mbtowc+0x16>

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4616      	mov	r6, r2
 8007f36:	4698      	mov	r8, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b10a      	cbz	r2, 8007f56 <_printf_common+0x26>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	0699      	lsls	r1, r3, #26
 8007f5a:	bf42      	ittt	mi
 8007f5c:	6833      	ldrmi	r3, [r6, #0]
 8007f5e:	3302      	addmi	r3, #2
 8007f60:	6033      	strmi	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	f015 0506 	ands.w	r5, r5, #6
 8007f68:	d106      	bne.n	8007f78 <_printf_common+0x48>
 8007f6a:	f104 0a19 	add.w	sl, r4, #25
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dc26      	bgt.n	8007fc6 <_printf_common+0x96>
 8007f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	3b00      	subs	r3, #0
 8007f80:	bf18      	it	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	0692      	lsls	r2, r2, #26
 8007f86:	d42b      	bmi.n	8007fe0 <_printf_common+0xb0>
 8007f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f8c:	4641      	mov	r1, r8
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c8      	blx	r9
 8007f92:	3001      	adds	r0, #1
 8007f94:	d01e      	beq.n	8007fd4 <_printf_common+0xa4>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	6922      	ldr	r2, [r4, #16]
 8007f9a:	f003 0306 	and.w	r3, r3, #6
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	bf02      	ittt	eq
 8007fa2:	68e5      	ldreq	r5, [r4, #12]
 8007fa4:	6833      	ldreq	r3, [r6, #0]
 8007fa6:	1aed      	subeq	r5, r5, r3
 8007fa8:	68a3      	ldr	r3, [r4, #8]
 8007faa:	bf0c      	ite	eq
 8007fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb0:	2500      	movne	r5, #0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bfc4      	itt	gt
 8007fb6:	1a9b      	subgt	r3, r3, r2
 8007fb8:	18ed      	addgt	r5, r5, r3
 8007fba:	2600      	movs	r6, #0
 8007fbc:	341a      	adds	r4, #26
 8007fbe:	42b5      	cmp	r5, r6
 8007fc0:	d11a      	bne.n	8007ff8 <_printf_common+0xc8>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e008      	b.n	8007fd8 <_printf_common+0xa8>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4638      	mov	r0, r7
 8007fce:	47c8      	blx	r9
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d103      	bne.n	8007fdc <_printf_common+0xac>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7c6      	b.n	8007f6e <_printf_common+0x3e>
 8007fe0:	18e1      	adds	r1, r4, r3
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	2030      	movs	r0, #48	@ 0x30
 8007fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fea:	4422      	add	r2, r4
 8007fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7c7      	b.n	8007f88 <_printf_common+0x58>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c8      	blx	r9
 8008002:	3001      	adds	r0, #1
 8008004:	d0e6      	beq.n	8007fd4 <_printf_common+0xa4>
 8008006:	3601      	adds	r6, #1
 8008008:	e7d9      	b.n	8007fbe <_printf_common+0x8e>
	...

0800800c <_printf_i>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	7e0f      	ldrb	r7, [r1, #24]
 8008012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008014:	2f78      	cmp	r7, #120	@ 0x78
 8008016:	4691      	mov	r9, r2
 8008018:	4680      	mov	r8, r0
 800801a:	460c      	mov	r4, r1
 800801c:	469a      	mov	sl, r3
 800801e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008022:	d807      	bhi.n	8008034 <_printf_i+0x28>
 8008024:	2f62      	cmp	r7, #98	@ 0x62
 8008026:	d80a      	bhi.n	800803e <_printf_i+0x32>
 8008028:	2f00      	cmp	r7, #0
 800802a:	f000 80d1 	beq.w	80081d0 <_printf_i+0x1c4>
 800802e:	2f58      	cmp	r7, #88	@ 0x58
 8008030:	f000 80b8 	beq.w	80081a4 <_printf_i+0x198>
 8008034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800803c:	e03a      	b.n	80080b4 <_printf_i+0xa8>
 800803e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008042:	2b15      	cmp	r3, #21
 8008044:	d8f6      	bhi.n	8008034 <_printf_i+0x28>
 8008046:	a101      	add	r1, pc, #4	@ (adr r1, 800804c <_printf_i+0x40>)
 8008048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008035 	.word	0x08008035
 8008058:	08008035 	.word	0x08008035
 800805c:	08008035 	.word	0x08008035
 8008060:	08008035 	.word	0x08008035
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008035 	.word	0x08008035
 800806c:	08008035 	.word	0x08008035
 8008070:	08008035 	.word	0x08008035
 8008074:	08008035 	.word	0x08008035
 8008078:	080081b7 	.word	0x080081b7
 800807c:	080080e3 	.word	0x080080e3
 8008080:	08008171 	.word	0x08008171
 8008084:	08008035 	.word	0x08008035
 8008088:	08008035 	.word	0x08008035
 800808c:	080081d9 	.word	0x080081d9
 8008090:	08008035 	.word	0x08008035
 8008094:	080080e3 	.word	0x080080e3
 8008098:	08008035 	.word	0x08008035
 800809c:	08008035 	.word	0x08008035
 80080a0:	08008179 	.word	0x08008179
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6032      	str	r2, [r6, #0]
 80080ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080b4:	2301      	movs	r3, #1
 80080b6:	e09c      	b.n	80081f2 <_printf_i+0x1e6>
 80080b8:	6833      	ldr	r3, [r6, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6031      	str	r1, [r6, #0]
 80080c0:	0606      	lsls	r6, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xbc>
 80080c4:	681d      	ldr	r5, [r3, #0]
 80080c6:	e003      	b.n	80080d0 <_printf_i+0xc4>
 80080c8:	0645      	lsls	r5, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xb8>
 80080cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080d0:	2d00      	cmp	r5, #0
 80080d2:	da03      	bge.n	80080dc <_printf_i+0xd0>
 80080d4:	232d      	movs	r3, #45	@ 0x2d
 80080d6:	426d      	negs	r5, r5
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080dc:	4858      	ldr	r0, [pc, #352]	@ (8008240 <_printf_i+0x234>)
 80080de:	230a      	movs	r3, #10
 80080e0:	e011      	b.n	8008106 <_printf_i+0xfa>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	0608      	lsls	r0, r1, #24
 80080e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80080ec:	d402      	bmi.n	80080f4 <_printf_i+0xe8>
 80080ee:	0649      	lsls	r1, r1, #25
 80080f0:	bf48      	it	mi
 80080f2:	b2ad      	uxthmi	r5, r5
 80080f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80080f6:	4852      	ldr	r0, [pc, #328]	@ (8008240 <_printf_i+0x234>)
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	bf14      	ite	ne
 80080fc:	230a      	movne	r3, #10
 80080fe:	2308      	moveq	r3, #8
 8008100:	2100      	movs	r1, #0
 8008102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008106:	6866      	ldr	r6, [r4, #4]
 8008108:	60a6      	str	r6, [r4, #8]
 800810a:	2e00      	cmp	r6, #0
 800810c:	db05      	blt.n	800811a <_printf_i+0x10e>
 800810e:	6821      	ldr	r1, [r4, #0]
 8008110:	432e      	orrs	r6, r5
 8008112:	f021 0104 	bic.w	r1, r1, #4
 8008116:	6021      	str	r1, [r4, #0]
 8008118:	d04b      	beq.n	80081b2 <_printf_i+0x1a6>
 800811a:	4616      	mov	r6, r2
 800811c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008120:	fb03 5711 	mls	r7, r3, r1, r5
 8008124:	5dc7      	ldrb	r7, [r0, r7]
 8008126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800812a:	462f      	mov	r7, r5
 800812c:	42bb      	cmp	r3, r7
 800812e:	460d      	mov	r5, r1
 8008130:	d9f4      	bls.n	800811c <_printf_i+0x110>
 8008132:	2b08      	cmp	r3, #8
 8008134:	d10b      	bne.n	800814e <_printf_i+0x142>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07df      	lsls	r7, r3, #31
 800813a:	d508      	bpl.n	800814e <_printf_i+0x142>
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	6861      	ldr	r1, [r4, #4]
 8008140:	4299      	cmp	r1, r3
 8008142:	bfde      	ittt	le
 8008144:	2330      	movle	r3, #48	@ 0x30
 8008146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800814a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800814e:	1b92      	subs	r2, r2, r6
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	f8cd a000 	str.w	sl, [sp]
 8008156:	464b      	mov	r3, r9
 8008158:	aa03      	add	r2, sp, #12
 800815a:	4621      	mov	r1, r4
 800815c:	4640      	mov	r0, r8
 800815e:	f7ff fee7 	bl	8007f30 <_printf_common>
 8008162:	3001      	adds	r0, #1
 8008164:	d14a      	bne.n	80081fc <_printf_i+0x1f0>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	f043 0320 	orr.w	r3, r3, #32
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	4832      	ldr	r0, [pc, #200]	@ (8008244 <_printf_i+0x238>)
 800817a:	2778      	movs	r7, #120	@ 0x78
 800817c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	6831      	ldr	r1, [r6, #0]
 8008184:	061f      	lsls	r7, r3, #24
 8008186:	f851 5b04 	ldr.w	r5, [r1], #4
 800818a:	d402      	bmi.n	8008192 <_printf_i+0x186>
 800818c:	065f      	lsls	r7, r3, #25
 800818e:	bf48      	it	mi
 8008190:	b2ad      	uxthmi	r5, r5
 8008192:	6031      	str	r1, [r6, #0]
 8008194:	07d9      	lsls	r1, r3, #31
 8008196:	bf44      	itt	mi
 8008198:	f043 0320 	orrmi.w	r3, r3, #32
 800819c:	6023      	strmi	r3, [r4, #0]
 800819e:	b11d      	cbz	r5, 80081a8 <_printf_i+0x19c>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e7ad      	b.n	8008100 <_printf_i+0xf4>
 80081a4:	4826      	ldr	r0, [pc, #152]	@ (8008240 <_printf_i+0x234>)
 80081a6:	e7e9      	b.n	800817c <_printf_i+0x170>
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f023 0320 	bic.w	r3, r3, #32
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	e7f6      	b.n	80081a0 <_printf_i+0x194>
 80081b2:	4616      	mov	r6, r2
 80081b4:	e7bd      	b.n	8008132 <_printf_i+0x126>
 80081b6:	6833      	ldr	r3, [r6, #0]
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	6961      	ldr	r1, [r4, #20]
 80081bc:	1d18      	adds	r0, r3, #4
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	062e      	lsls	r6, r5, #24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0x1be>
 80081c6:	6019      	str	r1, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0x1c4>
 80081ca:	0668      	lsls	r0, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0x1ba>
 80081ce:	8019      	strh	r1, [r3, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	4616      	mov	r6, r2
 80081d6:	e7bc      	b.n	8008152 <_printf_i+0x146>
 80081d8:	6833      	ldr	r3, [r6, #0]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	6032      	str	r2, [r6, #0]
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	2100      	movs	r1, #0
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7f8 f813 	bl	8000210 <memchr>
 80081ea:	b108      	cbz	r0, 80081f0 <_printf_i+0x1e4>
 80081ec:	1b80      	subs	r0, r0, r6
 80081ee:	6060      	str	r0, [r4, #4]
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fa:	e7aa      	b.n	8008152 <_printf_i+0x146>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	4632      	mov	r2, r6
 8008200:	4649      	mov	r1, r9
 8008202:	4640      	mov	r0, r8
 8008204:	47d0      	blx	sl
 8008206:	3001      	adds	r0, #1
 8008208:	d0ad      	beq.n	8008166 <_printf_i+0x15a>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	079b      	lsls	r3, r3, #30
 800820e:	d413      	bmi.n	8008238 <_printf_i+0x22c>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e7a6      	b.n	800816a <_printf_i+0x15e>
 800821c:	2301      	movs	r3, #1
 800821e:	4632      	mov	r2, r6
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	47d0      	blx	sl
 8008226:	3001      	adds	r0, #1
 8008228:	d09d      	beq.n	8008166 <_printf_i+0x15a>
 800822a:	3501      	adds	r5, #1
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	1a5b      	subs	r3, r3, r1
 8008232:	42ab      	cmp	r3, r5
 8008234:	dcf2      	bgt.n	800821c <_printf_i+0x210>
 8008236:	e7eb      	b.n	8008210 <_printf_i+0x204>
 8008238:	2500      	movs	r5, #0
 800823a:	f104 0619 	add.w	r6, r4, #25
 800823e:	e7f5      	b.n	800822c <_printf_i+0x220>
 8008240:	08009688 	.word	0x08009688
 8008244:	08009699 	.word	0x08009699

08008248 <__sflush_r>:
 8008248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008250:	0716      	lsls	r6, r2, #28
 8008252:	4605      	mov	r5, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d454      	bmi.n	8008302 <__sflush_r+0xba>
 8008258:	684b      	ldr	r3, [r1, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dc02      	bgt.n	8008264 <__sflush_r+0x1c>
 800825e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	dd48      	ble.n	80082f6 <__sflush_r+0xae>
 8008264:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008266:	2e00      	cmp	r6, #0
 8008268:	d045      	beq.n	80082f6 <__sflush_r+0xae>
 800826a:	2300      	movs	r3, #0
 800826c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008270:	682f      	ldr	r7, [r5, #0]
 8008272:	6a21      	ldr	r1, [r4, #32]
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	d030      	beq.n	80082da <__sflush_r+0x92>
 8008278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	0759      	lsls	r1, r3, #29
 800827e:	d505      	bpl.n	800828c <__sflush_r+0x44>
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	1ad2      	subs	r2, r2, r3
 8008284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008286:	b10b      	cbz	r3, 800828c <__sflush_r+0x44>
 8008288:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	2300      	movs	r3, #0
 800828e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	4628      	mov	r0, r5
 8008294:	47b0      	blx	r6
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	d106      	bne.n	80082aa <__sflush_r+0x62>
 800829c:	6829      	ldr	r1, [r5, #0]
 800829e:	291d      	cmp	r1, #29
 80082a0:	d82b      	bhi.n	80082fa <__sflush_r+0xb2>
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <__sflush_r+0x104>)
 80082a4:	40ca      	lsrs	r2, r1
 80082a6:	07d6      	lsls	r6, r2, #31
 80082a8:	d527      	bpl.n	80082fa <__sflush_r+0xb2>
 80082aa:	2200      	movs	r2, #0
 80082ac:	6062      	str	r2, [r4, #4]
 80082ae:	04d9      	lsls	r1, r3, #19
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	d504      	bpl.n	80082c0 <__sflush_r+0x78>
 80082b6:	1c42      	adds	r2, r0, #1
 80082b8:	d101      	bne.n	80082be <__sflush_r+0x76>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	b903      	cbnz	r3, 80082c0 <__sflush_r+0x78>
 80082be:	6560      	str	r0, [r4, #84]	@ 0x54
 80082c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082c2:	602f      	str	r7, [r5, #0]
 80082c4:	b1b9      	cbz	r1, 80082f6 <__sflush_r+0xae>
 80082c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ca:	4299      	cmp	r1, r3
 80082cc:	d002      	beq.n	80082d4 <__sflush_r+0x8c>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 fe3c 	bl	8008f4c <_free_r>
 80082d4:	2300      	movs	r3, #0
 80082d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d8:	e00d      	b.n	80082f6 <__sflush_r+0xae>
 80082da:	2301      	movs	r3, #1
 80082dc:	4628      	mov	r0, r5
 80082de:	47b0      	blx	r6
 80082e0:	4602      	mov	r2, r0
 80082e2:	1c50      	adds	r0, r2, #1
 80082e4:	d1c9      	bne.n	800827a <__sflush_r+0x32>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0c6      	beq.n	800827a <__sflush_r+0x32>
 80082ec:	2b1d      	cmp	r3, #29
 80082ee:	d001      	beq.n	80082f4 <__sflush_r+0xac>
 80082f0:	2b16      	cmp	r3, #22
 80082f2:	d11e      	bne.n	8008332 <__sflush_r+0xea>
 80082f4:	602f      	str	r7, [r5, #0]
 80082f6:	2000      	movs	r0, #0
 80082f8:	e022      	b.n	8008340 <__sflush_r+0xf8>
 80082fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fe:	b21b      	sxth	r3, r3
 8008300:	e01b      	b.n	800833a <__sflush_r+0xf2>
 8008302:	690f      	ldr	r7, [r1, #16]
 8008304:	2f00      	cmp	r7, #0
 8008306:	d0f6      	beq.n	80082f6 <__sflush_r+0xae>
 8008308:	0793      	lsls	r3, r2, #30
 800830a:	680e      	ldr	r6, [r1, #0]
 800830c:	bf08      	it	eq
 800830e:	694b      	ldreq	r3, [r1, #20]
 8008310:	600f      	str	r7, [r1, #0]
 8008312:	bf18      	it	ne
 8008314:	2300      	movne	r3, #0
 8008316:	eba6 0807 	sub.w	r8, r6, r7
 800831a:	608b      	str	r3, [r1, #8]
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	dde9      	ble.n	80082f6 <__sflush_r+0xae>
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008326:	4643      	mov	r3, r8
 8008328:	463a      	mov	r2, r7
 800832a:	4628      	mov	r0, r5
 800832c:	47b0      	blx	r6
 800832e:	2800      	cmp	r0, #0
 8008330:	dc08      	bgt.n	8008344 <__sflush_r+0xfc>
 8008332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	4407      	add	r7, r0
 8008346:	eba8 0800 	sub.w	r8, r8, r0
 800834a:	e7e7      	b.n	800831c <__sflush_r+0xd4>
 800834c:	20400001 	.word	0x20400001

08008350 <_fflush_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	4605      	mov	r5, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b913      	cbnz	r3, 8008360 <_fflush_r+0x10>
 800835a:	2500      	movs	r5, #0
 800835c:	4628      	mov	r0, r5
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	b118      	cbz	r0, 800836a <_fflush_r+0x1a>
 8008362:	6a03      	ldr	r3, [r0, #32]
 8008364:	b90b      	cbnz	r3, 800836a <_fflush_r+0x1a>
 8008366:	f7fe f9fd 	bl	8006764 <__sinit>
 800836a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f3      	beq.n	800835a <_fflush_r+0xa>
 8008372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008374:	07d0      	lsls	r0, r2, #31
 8008376:	d404      	bmi.n	8008382 <_fflush_r+0x32>
 8008378:	0599      	lsls	r1, r3, #22
 800837a:	d402      	bmi.n	8008382 <_fflush_r+0x32>
 800837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837e:	f7ff f87a 	bl	8007476 <__retarget_lock_acquire_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	4621      	mov	r1, r4
 8008386:	f7ff ff5f 	bl	8008248 <__sflush_r>
 800838a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800838c:	07da      	lsls	r2, r3, #31
 800838e:	4605      	mov	r5, r0
 8008390:	d4e4      	bmi.n	800835c <_fflush_r+0xc>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	d4e1      	bmi.n	800835c <_fflush_r+0xc>
 8008398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839a:	f7ff f86d 	bl	8007478 <__retarget_lock_release_recursive>
 800839e:	e7dd      	b.n	800835c <_fflush_r+0xc>

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_lock+0x8>)
 80083a2:	f7ff b868 	b.w	8007476 <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	2000061c 	.word	0x2000061c

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f7ff b863 	b.w	8007478 <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	2000061c 	.word	0x2000061c

080083b8 <_Balloc>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	69c6      	ldr	r6, [r0, #28]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b976      	cbnz	r6, 80083e0 <_Balloc+0x28>
 80083c2:	2010      	movs	r0, #16
 80083c4:	f000 fe0c 	bl	8008fe0 <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	61e0      	str	r0, [r4, #28]
 80083cc:	b920      	cbnz	r0, 80083d8 <_Balloc+0x20>
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <_Balloc+0x78>)
 80083d0:	4818      	ldr	r0, [pc, #96]	@ (8008434 <_Balloc+0x7c>)
 80083d2:	216b      	movs	r1, #107	@ 0x6b
 80083d4:	f000 fd88 	bl	8008ee8 <__assert_func>
 80083d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083dc:	6006      	str	r6, [r0, #0]
 80083de:	60c6      	str	r6, [r0, #12]
 80083e0:	69e6      	ldr	r6, [r4, #28]
 80083e2:	68f3      	ldr	r3, [r6, #12]
 80083e4:	b183      	cbz	r3, 8008408 <_Balloc+0x50>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ee:	b9b8      	cbnz	r0, 8008420 <_Balloc+0x68>
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f605 	lsl.w	r6, r1, r5
 80083f6:	1d72      	adds	r2, r6, #5
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fd92 	bl	8008f24 <_calloc_r>
 8008400:	b160      	cbz	r0, 800841c <_Balloc+0x64>
 8008402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008406:	e00e      	b.n	8008426 <_Balloc+0x6e>
 8008408:	2221      	movs	r2, #33	@ 0x21
 800840a:	2104      	movs	r1, #4
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fd89 	bl	8008f24 <_calloc_r>
 8008412:	69e3      	ldr	r3, [r4, #28]
 8008414:	60f0      	str	r0, [r6, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <_Balloc+0x2e>
 800841c:	2000      	movs	r0, #0
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008426:	2300      	movs	r3, #0
 8008428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842c:	e7f7      	b.n	800841e <_Balloc+0x66>
 800842e:	bf00      	nop
 8008430:	080096aa 	.word	0x080096aa
 8008434:	080096c1 	.word	0x080096c1

08008438 <_Bfree>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	69c6      	ldr	r6, [r0, #28]
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Bfree+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f000 fdcc 	bl	8008fe0 <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	61e8      	str	r0, [r5, #28]
 800844c:	b920      	cbnz	r0, 8008458 <_Bfree+0x20>
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <_Bfree+0x3c>)
 8008450:	4809      	ldr	r0, [pc, #36]	@ (8008478 <_Bfree+0x40>)
 8008452:	218f      	movs	r1, #143	@ 0x8f
 8008454:	f000 fd48 	bl	8008ee8 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	b13c      	cbz	r4, 8008472 <_Bfree+0x3a>
 8008462:	69eb      	ldr	r3, [r5, #28]
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	080096aa 	.word	0x080096aa
 8008478:	080096c1 	.word	0x080096c1

0800847c <__multadd>:
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	690d      	ldr	r5, [r1, #16]
 8008482:	4607      	mov	r7, r0
 8008484:	460c      	mov	r4, r1
 8008486:	461e      	mov	r6, r3
 8008488:	f101 0c14 	add.w	ip, r1, #20
 800848c:	2000      	movs	r0, #0
 800848e:	f8dc 3000 	ldr.w	r3, [ip]
 8008492:	b299      	uxth	r1, r3
 8008494:	fb02 6101 	mla	r1, r2, r1, r6
 8008498:	0c1e      	lsrs	r6, r3, #16
 800849a:	0c0b      	lsrs	r3, r1, #16
 800849c:	fb02 3306 	mla	r3, r2, r6, r3
 80084a0:	b289      	uxth	r1, r1
 80084a2:	3001      	adds	r0, #1
 80084a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084a8:	4285      	cmp	r5, r0
 80084aa:	f84c 1b04 	str.w	r1, [ip], #4
 80084ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084b2:	dcec      	bgt.n	800848e <__multadd+0x12>
 80084b4:	b30e      	cbz	r6, 80084fa <__multadd+0x7e>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc19      	bgt.n	80084f0 <__multadd+0x74>
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4638      	mov	r0, r7
 80084c0:	3101      	adds	r1, #1
 80084c2:	f7ff ff79 	bl	80083b8 <_Balloc>
 80084c6:	4680      	mov	r8, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <__multadd+0x5a>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <__multadd+0x84>)
 80084ce:	480d      	ldr	r0, [pc, #52]	@ (8008504 <__multadd+0x88>)
 80084d0:	21ba      	movs	r1, #186	@ 0xba
 80084d2:	f000 fd09 	bl	8008ee8 <__assert_func>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	f104 010c 	add.w	r1, r4, #12
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f7fe ffca 	bl	800747a <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7ff ffa5 	bl	8008438 <_Bfree>
 80084ee:	4644      	mov	r4, r8
 80084f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084f4:	3501      	adds	r5, #1
 80084f6:	615e      	str	r6, [r3, #20]
 80084f8:	6125      	str	r5, [r4, #16]
 80084fa:	4620      	mov	r0, r4
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	08009606 	.word	0x08009606
 8008504:	080096c1 	.word	0x080096c1

08008508 <__s2b>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	460c      	mov	r4, r1
 800850e:	4615      	mov	r5, r2
 8008510:	461f      	mov	r7, r3
 8008512:	2209      	movs	r2, #9
 8008514:	3308      	adds	r3, #8
 8008516:	4606      	mov	r6, r0
 8008518:	fb93 f3f2 	sdiv	r3, r3, r2
 800851c:	2100      	movs	r1, #0
 800851e:	2201      	movs	r2, #1
 8008520:	429a      	cmp	r2, r3
 8008522:	db09      	blt.n	8008538 <__s2b+0x30>
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ff47 	bl	80083b8 <_Balloc>
 800852a:	b940      	cbnz	r0, 800853e <__s2b+0x36>
 800852c:	4602      	mov	r2, r0
 800852e:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <__s2b+0x8c>)
 8008530:	4819      	ldr	r0, [pc, #100]	@ (8008598 <__s2b+0x90>)
 8008532:	21d3      	movs	r1, #211	@ 0xd3
 8008534:	f000 fcd8 	bl	8008ee8 <__assert_func>
 8008538:	0052      	lsls	r2, r2, #1
 800853a:	3101      	adds	r1, #1
 800853c:	e7f0      	b.n	8008520 <__s2b+0x18>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	6143      	str	r3, [r0, #20]
 8008542:	2d09      	cmp	r5, #9
 8008544:	f04f 0301 	mov.w	r3, #1
 8008548:	6103      	str	r3, [r0, #16]
 800854a:	dd16      	ble.n	800857a <__s2b+0x72>
 800854c:	f104 0909 	add.w	r9, r4, #9
 8008550:	46c8      	mov	r8, r9
 8008552:	442c      	add	r4, r5
 8008554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008558:	4601      	mov	r1, r0
 800855a:	3b30      	subs	r3, #48	@ 0x30
 800855c:	220a      	movs	r2, #10
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ff8c 	bl	800847c <__multadd>
 8008564:	45a0      	cmp	r8, r4
 8008566:	d1f5      	bne.n	8008554 <__s2b+0x4c>
 8008568:	f1a5 0408 	sub.w	r4, r5, #8
 800856c:	444c      	add	r4, r9
 800856e:	1b2d      	subs	r5, r5, r4
 8008570:	1963      	adds	r3, r4, r5
 8008572:	42bb      	cmp	r3, r7
 8008574:	db04      	blt.n	8008580 <__s2b+0x78>
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	340a      	adds	r4, #10
 800857c:	2509      	movs	r5, #9
 800857e:	e7f6      	b.n	800856e <__s2b+0x66>
 8008580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008584:	4601      	mov	r1, r0
 8008586:	3b30      	subs	r3, #48	@ 0x30
 8008588:	220a      	movs	r2, #10
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff76 	bl	800847c <__multadd>
 8008590:	e7ee      	b.n	8008570 <__s2b+0x68>
 8008592:	bf00      	nop
 8008594:	08009606 	.word	0x08009606
 8008598:	080096c1 	.word	0x080096c1

0800859c <__hi0bits>:
 800859c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085a0:	4603      	mov	r3, r0
 80085a2:	bf36      	itet	cc
 80085a4:	0403      	lslcc	r3, r0, #16
 80085a6:	2000      	movcs	r0, #0
 80085a8:	2010      	movcc	r0, #16
 80085aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ae:	bf3c      	itt	cc
 80085b0:	021b      	lslcc	r3, r3, #8
 80085b2:	3008      	addcc	r0, #8
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b8:	bf3c      	itt	cc
 80085ba:	011b      	lslcc	r3, r3, #4
 80085bc:	3004      	addcc	r0, #4
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	bf3c      	itt	cc
 80085c4:	009b      	lslcc	r3, r3, #2
 80085c6:	3002      	addcc	r0, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db05      	blt.n	80085d8 <__hi0bits+0x3c>
 80085cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085d0:	f100 0001 	add.w	r0, r0, #1
 80085d4:	bf08      	it	eq
 80085d6:	2020      	moveq	r0, #32
 80085d8:	4770      	bx	lr

080085da <__lo0bits>:
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	4602      	mov	r2, r0
 80085de:	f013 0007 	ands.w	r0, r3, #7
 80085e2:	d00b      	beq.n	80085fc <__lo0bits+0x22>
 80085e4:	07d9      	lsls	r1, r3, #31
 80085e6:	d421      	bmi.n	800862c <__lo0bits+0x52>
 80085e8:	0798      	lsls	r0, r3, #30
 80085ea:	bf49      	itett	mi
 80085ec:	085b      	lsrmi	r3, r3, #1
 80085ee:	089b      	lsrpl	r3, r3, #2
 80085f0:	2001      	movmi	r0, #1
 80085f2:	6013      	strmi	r3, [r2, #0]
 80085f4:	bf5c      	itt	pl
 80085f6:	6013      	strpl	r3, [r2, #0]
 80085f8:	2002      	movpl	r0, #2
 80085fa:	4770      	bx	lr
 80085fc:	b299      	uxth	r1, r3
 80085fe:	b909      	cbnz	r1, 8008604 <__lo0bits+0x2a>
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	2010      	movs	r0, #16
 8008604:	b2d9      	uxtb	r1, r3
 8008606:	b909      	cbnz	r1, 800860c <__lo0bits+0x32>
 8008608:	3008      	adds	r0, #8
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	bf04      	itt	eq
 8008610:	091b      	lsreq	r3, r3, #4
 8008612:	3004      	addeq	r0, #4
 8008614:	0799      	lsls	r1, r3, #30
 8008616:	bf04      	itt	eq
 8008618:	089b      	lsreq	r3, r3, #2
 800861a:	3002      	addeq	r0, #2
 800861c:	07d9      	lsls	r1, r3, #31
 800861e:	d403      	bmi.n	8008628 <__lo0bits+0x4e>
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	f100 0001 	add.w	r0, r0, #1
 8008626:	d003      	beq.n	8008630 <__lo0bits+0x56>
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4770      	bx	lr
 800862c:	2000      	movs	r0, #0
 800862e:	4770      	bx	lr
 8008630:	2020      	movs	r0, #32
 8008632:	4770      	bx	lr

08008634 <__i2b>:
 8008634:	b510      	push	{r4, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	2101      	movs	r1, #1
 800863a:	f7ff febd 	bl	80083b8 <_Balloc>
 800863e:	4602      	mov	r2, r0
 8008640:	b928      	cbnz	r0, 800864e <__i2b+0x1a>
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <__i2b+0x24>)
 8008644:	4805      	ldr	r0, [pc, #20]	@ (800865c <__i2b+0x28>)
 8008646:	f240 1145 	movw	r1, #325	@ 0x145
 800864a:	f000 fc4d 	bl	8008ee8 <__assert_func>
 800864e:	2301      	movs	r3, #1
 8008650:	6144      	str	r4, [r0, #20]
 8008652:	6103      	str	r3, [r0, #16]
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	08009606 	.word	0x08009606
 800865c:	080096c1 	.word	0x080096c1

08008660 <__multiply>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4617      	mov	r7, r2
 8008666:	690a      	ldr	r2, [r1, #16]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	bfa8      	it	ge
 800866e:	463b      	movge	r3, r7
 8008670:	4689      	mov	r9, r1
 8008672:	bfa4      	itt	ge
 8008674:	460f      	movge	r7, r1
 8008676:	4699      	movge	r9, r3
 8008678:	693d      	ldr	r5, [r7, #16]
 800867a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	eb05 060a 	add.w	r6, r5, sl
 8008686:	42b3      	cmp	r3, r6
 8008688:	b085      	sub	sp, #20
 800868a:	bfb8      	it	lt
 800868c:	3101      	addlt	r1, #1
 800868e:	f7ff fe93 	bl	80083b8 <_Balloc>
 8008692:	b930      	cbnz	r0, 80086a2 <__multiply+0x42>
 8008694:	4602      	mov	r2, r0
 8008696:	4b41      	ldr	r3, [pc, #260]	@ (800879c <__multiply+0x13c>)
 8008698:	4841      	ldr	r0, [pc, #260]	@ (80087a0 <__multiply+0x140>)
 800869a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800869e:	f000 fc23 	bl	8008ee8 <__assert_func>
 80086a2:	f100 0414 	add.w	r4, r0, #20
 80086a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80086aa:	4623      	mov	r3, r4
 80086ac:	2200      	movs	r2, #0
 80086ae:	4573      	cmp	r3, lr
 80086b0:	d320      	bcc.n	80086f4 <__multiply+0x94>
 80086b2:	f107 0814 	add.w	r8, r7, #20
 80086b6:	f109 0114 	add.w	r1, r9, #20
 80086ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80086be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80086c2:	9302      	str	r3, [sp, #8]
 80086c4:	1beb      	subs	r3, r5, r7
 80086c6:	3b15      	subs	r3, #21
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	3304      	adds	r3, #4
 80086ce:	3715      	adds	r7, #21
 80086d0:	42bd      	cmp	r5, r7
 80086d2:	bf38      	it	cc
 80086d4:	2304      	movcc	r3, #4
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	9103      	str	r1, [sp, #12]
 80086dc:	428b      	cmp	r3, r1
 80086de:	d80c      	bhi.n	80086fa <__multiply+0x9a>
 80086e0:	2e00      	cmp	r6, #0
 80086e2:	dd03      	ble.n	80086ec <__multiply+0x8c>
 80086e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d055      	beq.n	8008798 <__multiply+0x138>
 80086ec:	6106      	str	r6, [r0, #16]
 80086ee:	b005      	add	sp, #20
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	f843 2b04 	str.w	r2, [r3], #4
 80086f8:	e7d9      	b.n	80086ae <__multiply+0x4e>
 80086fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80086fe:	f1ba 0f00 	cmp.w	sl, #0
 8008702:	d01f      	beq.n	8008744 <__multiply+0xe4>
 8008704:	46c4      	mov	ip, r8
 8008706:	46a1      	mov	r9, r4
 8008708:	2700      	movs	r7, #0
 800870a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800870e:	f8d9 3000 	ldr.w	r3, [r9]
 8008712:	fa1f fb82 	uxth.w	fp, r2
 8008716:	b29b      	uxth	r3, r3
 8008718:	fb0a 330b 	mla	r3, sl, fp, r3
 800871c:	443b      	add	r3, r7
 800871e:	f8d9 7000 	ldr.w	r7, [r9]
 8008722:	0c12      	lsrs	r2, r2, #16
 8008724:	0c3f      	lsrs	r7, r7, #16
 8008726:	fb0a 7202 	mla	r2, sl, r2, r7
 800872a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008734:	4565      	cmp	r5, ip
 8008736:	f849 3b04 	str.w	r3, [r9], #4
 800873a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800873e:	d8e4      	bhi.n	800870a <__multiply+0xaa>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	50e7      	str	r7, [r4, r3]
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800874a:	3104      	adds	r1, #4
 800874c:	f1b9 0f00 	cmp.w	r9, #0
 8008750:	d020      	beq.n	8008794 <__multiply+0x134>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	4647      	mov	r7, r8
 8008756:	46a4      	mov	ip, r4
 8008758:	f04f 0a00 	mov.w	sl, #0
 800875c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008760:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008764:	fb09 220b 	mla	r2, r9, fp, r2
 8008768:	4452      	add	r2, sl
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008770:	f84c 3b04 	str.w	r3, [ip], #4
 8008774:	f857 3b04 	ldr.w	r3, [r7], #4
 8008778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800877c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008780:	fb09 330a 	mla	r3, r9, sl, r3
 8008784:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008788:	42bd      	cmp	r5, r7
 800878a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878e:	d8e5      	bhi.n	800875c <__multiply+0xfc>
 8008790:	9a01      	ldr	r2, [sp, #4]
 8008792:	50a3      	str	r3, [r4, r2]
 8008794:	3404      	adds	r4, #4
 8008796:	e79f      	b.n	80086d8 <__multiply+0x78>
 8008798:	3e01      	subs	r6, #1
 800879a:	e7a1      	b.n	80086e0 <__multiply+0x80>
 800879c:	08009606 	.word	0x08009606
 80087a0:	080096c1 	.word	0x080096c1

080087a4 <__pow5mult>:
 80087a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087a8:	4615      	mov	r5, r2
 80087aa:	f012 0203 	ands.w	r2, r2, #3
 80087ae:	4607      	mov	r7, r0
 80087b0:	460e      	mov	r6, r1
 80087b2:	d007      	beq.n	80087c4 <__pow5mult+0x20>
 80087b4:	4c25      	ldr	r4, [pc, #148]	@ (800884c <__pow5mult+0xa8>)
 80087b6:	3a01      	subs	r2, #1
 80087b8:	2300      	movs	r3, #0
 80087ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087be:	f7ff fe5d 	bl	800847c <__multadd>
 80087c2:	4606      	mov	r6, r0
 80087c4:	10ad      	asrs	r5, r5, #2
 80087c6:	d03d      	beq.n	8008844 <__pow5mult+0xa0>
 80087c8:	69fc      	ldr	r4, [r7, #28]
 80087ca:	b97c      	cbnz	r4, 80087ec <__pow5mult+0x48>
 80087cc:	2010      	movs	r0, #16
 80087ce:	f000 fc07 	bl	8008fe0 <malloc>
 80087d2:	4602      	mov	r2, r0
 80087d4:	61f8      	str	r0, [r7, #28]
 80087d6:	b928      	cbnz	r0, 80087e4 <__pow5mult+0x40>
 80087d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008850 <__pow5mult+0xac>)
 80087da:	481e      	ldr	r0, [pc, #120]	@ (8008854 <__pow5mult+0xb0>)
 80087dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087e0:	f000 fb82 	bl	8008ee8 <__assert_func>
 80087e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087e8:	6004      	str	r4, [r0, #0]
 80087ea:	60c4      	str	r4, [r0, #12]
 80087ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087f4:	b94c      	cbnz	r4, 800880a <__pow5mult+0x66>
 80087f6:	f240 2171 	movw	r1, #625	@ 0x271
 80087fa:	4638      	mov	r0, r7
 80087fc:	f7ff ff1a 	bl	8008634 <__i2b>
 8008800:	2300      	movs	r3, #0
 8008802:	f8c8 0008 	str.w	r0, [r8, #8]
 8008806:	4604      	mov	r4, r0
 8008808:	6003      	str	r3, [r0, #0]
 800880a:	f04f 0900 	mov.w	r9, #0
 800880e:	07eb      	lsls	r3, r5, #31
 8008810:	d50a      	bpl.n	8008828 <__pow5mult+0x84>
 8008812:	4631      	mov	r1, r6
 8008814:	4622      	mov	r2, r4
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff ff22 	bl	8008660 <__multiply>
 800881c:	4631      	mov	r1, r6
 800881e:	4680      	mov	r8, r0
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff fe09 	bl	8008438 <_Bfree>
 8008826:	4646      	mov	r6, r8
 8008828:	106d      	asrs	r5, r5, #1
 800882a:	d00b      	beq.n	8008844 <__pow5mult+0xa0>
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	b938      	cbnz	r0, 8008840 <__pow5mult+0x9c>
 8008830:	4622      	mov	r2, r4
 8008832:	4621      	mov	r1, r4
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ff13 	bl	8008660 <__multiply>
 800883a:	6020      	str	r0, [r4, #0]
 800883c:	f8c0 9000 	str.w	r9, [r0]
 8008840:	4604      	mov	r4, r0
 8008842:	e7e4      	b.n	800880e <__pow5mult+0x6a>
 8008844:	4630      	mov	r0, r6
 8008846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884a:	bf00      	nop
 800884c:	080098ac 	.word	0x080098ac
 8008850:	080096aa 	.word	0x080096aa
 8008854:	080096c1 	.word	0x080096c1

08008858 <__lshift>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	460c      	mov	r4, r1
 800885e:	6849      	ldr	r1, [r1, #4]
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008866:	68a3      	ldr	r3, [r4, #8]
 8008868:	4607      	mov	r7, r0
 800886a:	4691      	mov	r9, r2
 800886c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008870:	f108 0601 	add.w	r6, r8, #1
 8008874:	42b3      	cmp	r3, r6
 8008876:	db0b      	blt.n	8008890 <__lshift+0x38>
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff fd9d 	bl	80083b8 <_Balloc>
 800887e:	4605      	mov	r5, r0
 8008880:	b948      	cbnz	r0, 8008896 <__lshift+0x3e>
 8008882:	4602      	mov	r2, r0
 8008884:	4b28      	ldr	r3, [pc, #160]	@ (8008928 <__lshift+0xd0>)
 8008886:	4829      	ldr	r0, [pc, #164]	@ (800892c <__lshift+0xd4>)
 8008888:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800888c:	f000 fb2c 	bl	8008ee8 <__assert_func>
 8008890:	3101      	adds	r1, #1
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	e7ee      	b.n	8008874 <__lshift+0x1c>
 8008896:	2300      	movs	r3, #0
 8008898:	f100 0114 	add.w	r1, r0, #20
 800889c:	f100 0210 	add.w	r2, r0, #16
 80088a0:	4618      	mov	r0, r3
 80088a2:	4553      	cmp	r3, sl
 80088a4:	db33      	blt.n	800890e <__lshift+0xb6>
 80088a6:	6920      	ldr	r0, [r4, #16]
 80088a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088ac:	f104 0314 	add.w	r3, r4, #20
 80088b0:	f019 091f 	ands.w	r9, r9, #31
 80088b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088bc:	d02b      	beq.n	8008916 <__lshift+0xbe>
 80088be:	f1c9 0e20 	rsb	lr, r9, #32
 80088c2:	468a      	mov	sl, r1
 80088c4:	2200      	movs	r2, #0
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	fa00 f009 	lsl.w	r0, r0, r9
 80088cc:	4310      	orrs	r0, r2
 80088ce:	f84a 0b04 	str.w	r0, [sl], #4
 80088d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d6:	459c      	cmp	ip, r3
 80088d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80088dc:	d8f3      	bhi.n	80088c6 <__lshift+0x6e>
 80088de:	ebac 0304 	sub.w	r3, ip, r4
 80088e2:	3b15      	subs	r3, #21
 80088e4:	f023 0303 	bic.w	r3, r3, #3
 80088e8:	3304      	adds	r3, #4
 80088ea:	f104 0015 	add.w	r0, r4, #21
 80088ee:	4560      	cmp	r0, ip
 80088f0:	bf88      	it	hi
 80088f2:	2304      	movhi	r3, #4
 80088f4:	50ca      	str	r2, [r1, r3]
 80088f6:	b10a      	cbz	r2, 80088fc <__lshift+0xa4>
 80088f8:	f108 0602 	add.w	r6, r8, #2
 80088fc:	3e01      	subs	r6, #1
 80088fe:	4638      	mov	r0, r7
 8008900:	612e      	str	r6, [r5, #16]
 8008902:	4621      	mov	r1, r4
 8008904:	f7ff fd98 	bl	8008438 <_Bfree>
 8008908:	4628      	mov	r0, r5
 800890a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008912:	3301      	adds	r3, #1
 8008914:	e7c5      	b.n	80088a2 <__lshift+0x4a>
 8008916:	3904      	subs	r1, #4
 8008918:	f853 2b04 	ldr.w	r2, [r3], #4
 800891c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008920:	459c      	cmp	ip, r3
 8008922:	d8f9      	bhi.n	8008918 <__lshift+0xc0>
 8008924:	e7ea      	b.n	80088fc <__lshift+0xa4>
 8008926:	bf00      	nop
 8008928:	08009606 	.word	0x08009606
 800892c:	080096c1 	.word	0x080096c1

08008930 <__mcmp>:
 8008930:	690a      	ldr	r2, [r1, #16]
 8008932:	4603      	mov	r3, r0
 8008934:	6900      	ldr	r0, [r0, #16]
 8008936:	1a80      	subs	r0, r0, r2
 8008938:	b530      	push	{r4, r5, lr}
 800893a:	d10e      	bne.n	800895a <__mcmp+0x2a>
 800893c:	3314      	adds	r3, #20
 800893e:	3114      	adds	r1, #20
 8008940:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008944:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008948:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800894c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008950:	4295      	cmp	r5, r2
 8008952:	d003      	beq.n	800895c <__mcmp+0x2c>
 8008954:	d205      	bcs.n	8008962 <__mcmp+0x32>
 8008956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800895a:	bd30      	pop	{r4, r5, pc}
 800895c:	42a3      	cmp	r3, r4
 800895e:	d3f3      	bcc.n	8008948 <__mcmp+0x18>
 8008960:	e7fb      	b.n	800895a <__mcmp+0x2a>
 8008962:	2001      	movs	r0, #1
 8008964:	e7f9      	b.n	800895a <__mcmp+0x2a>
	...

08008968 <__mdiff>:
 8008968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	4689      	mov	r9, r1
 800896e:	4606      	mov	r6, r0
 8008970:	4611      	mov	r1, r2
 8008972:	4648      	mov	r0, r9
 8008974:	4614      	mov	r4, r2
 8008976:	f7ff ffdb 	bl	8008930 <__mcmp>
 800897a:	1e05      	subs	r5, r0, #0
 800897c:	d112      	bne.n	80089a4 <__mdiff+0x3c>
 800897e:	4629      	mov	r1, r5
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff fd19 	bl	80083b8 <_Balloc>
 8008986:	4602      	mov	r2, r0
 8008988:	b928      	cbnz	r0, 8008996 <__mdiff+0x2e>
 800898a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a88 <__mdiff+0x120>)
 800898c:	f240 2137 	movw	r1, #567	@ 0x237
 8008990:	483e      	ldr	r0, [pc, #248]	@ (8008a8c <__mdiff+0x124>)
 8008992:	f000 faa9 	bl	8008ee8 <__assert_func>
 8008996:	2301      	movs	r3, #1
 8008998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800899c:	4610      	mov	r0, r2
 800899e:	b003      	add	sp, #12
 80089a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a4:	bfbc      	itt	lt
 80089a6:	464b      	movlt	r3, r9
 80089a8:	46a1      	movlt	r9, r4
 80089aa:	4630      	mov	r0, r6
 80089ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089b0:	bfba      	itte	lt
 80089b2:	461c      	movlt	r4, r3
 80089b4:	2501      	movlt	r5, #1
 80089b6:	2500      	movge	r5, #0
 80089b8:	f7ff fcfe 	bl	80083b8 <_Balloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	b918      	cbnz	r0, 80089c8 <__mdiff+0x60>
 80089c0:	4b31      	ldr	r3, [pc, #196]	@ (8008a88 <__mdiff+0x120>)
 80089c2:	f240 2145 	movw	r1, #581	@ 0x245
 80089c6:	e7e3      	b.n	8008990 <__mdiff+0x28>
 80089c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089cc:	6926      	ldr	r6, [r4, #16]
 80089ce:	60c5      	str	r5, [r0, #12]
 80089d0:	f109 0310 	add.w	r3, r9, #16
 80089d4:	f109 0514 	add.w	r5, r9, #20
 80089d8:	f104 0e14 	add.w	lr, r4, #20
 80089dc:	f100 0b14 	add.w	fp, r0, #20
 80089e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	46d9      	mov	r9, fp
 80089ec:	f04f 0c00 	mov.w	ip, #0
 80089f0:	9b01      	ldr	r3, [sp, #4]
 80089f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	fa1f f38a 	uxth.w	r3, sl
 8008a00:	4619      	mov	r1, r3
 8008a02:	b283      	uxth	r3, r0
 8008a04:	1acb      	subs	r3, r1, r3
 8008a06:	0c00      	lsrs	r0, r0, #16
 8008a08:	4463      	add	r3, ip
 8008a0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a18:	4576      	cmp	r6, lr
 8008a1a:	f849 3b04 	str.w	r3, [r9], #4
 8008a1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a22:	d8e5      	bhi.n	80089f0 <__mdiff+0x88>
 8008a24:	1b33      	subs	r3, r6, r4
 8008a26:	3b15      	subs	r3, #21
 8008a28:	f023 0303 	bic.w	r3, r3, #3
 8008a2c:	3415      	adds	r4, #21
 8008a2e:	3304      	adds	r3, #4
 8008a30:	42a6      	cmp	r6, r4
 8008a32:	bf38      	it	cc
 8008a34:	2304      	movcc	r3, #4
 8008a36:	441d      	add	r5, r3
 8008a38:	445b      	add	r3, fp
 8008a3a:	461e      	mov	r6, r3
 8008a3c:	462c      	mov	r4, r5
 8008a3e:	4544      	cmp	r4, r8
 8008a40:	d30e      	bcc.n	8008a60 <__mdiff+0xf8>
 8008a42:	f108 0103 	add.w	r1, r8, #3
 8008a46:	1b49      	subs	r1, r1, r5
 8008a48:	f021 0103 	bic.w	r1, r1, #3
 8008a4c:	3d03      	subs	r5, #3
 8008a4e:	45a8      	cmp	r8, r5
 8008a50:	bf38      	it	cc
 8008a52:	2100      	movcc	r1, #0
 8008a54:	440b      	add	r3, r1
 8008a56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a5a:	b191      	cbz	r1, 8008a82 <__mdiff+0x11a>
 8008a5c:	6117      	str	r7, [r2, #16]
 8008a5e:	e79d      	b.n	800899c <__mdiff+0x34>
 8008a60:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a64:	46e6      	mov	lr, ip
 8008a66:	0c08      	lsrs	r0, r1, #16
 8008a68:	fa1c fc81 	uxtah	ip, ip, r1
 8008a6c:	4471      	add	r1, lr
 8008a6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a72:	b289      	uxth	r1, r1
 8008a74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a78:	f846 1b04 	str.w	r1, [r6], #4
 8008a7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a80:	e7dd      	b.n	8008a3e <__mdiff+0xd6>
 8008a82:	3f01      	subs	r7, #1
 8008a84:	e7e7      	b.n	8008a56 <__mdiff+0xee>
 8008a86:	bf00      	nop
 8008a88:	08009606 	.word	0x08009606
 8008a8c:	080096c1 	.word	0x080096c1

08008a90 <__ulp>:
 8008a90:	b082      	sub	sp, #8
 8008a92:	ed8d 0b00 	vstr	d0, [sp]
 8008a96:	9a01      	ldr	r2, [sp, #4]
 8008a98:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <__ulp+0x48>)
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dc08      	bgt.n	8008ab6 <__ulp+0x26>
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008aaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008aae:	da04      	bge.n	8008aba <__ulp+0x2a>
 8008ab0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ab4:	4113      	asrs	r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e008      	b.n	8008acc <__ulp+0x3c>
 8008aba:	f1a2 0314 	sub.w	r3, r2, #20
 8008abe:	2b1e      	cmp	r3, #30
 8008ac0:	bfda      	itte	le
 8008ac2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ac6:	40da      	lsrle	r2, r3
 8008ac8:	2201      	movgt	r2, #1
 8008aca:	2300      	movs	r3, #0
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	ec41 0b10 	vmov	d0, r0, r1
 8008ad4:	b002      	add	sp, #8
 8008ad6:	4770      	bx	lr
 8008ad8:	7ff00000 	.word	0x7ff00000

08008adc <__b2d>:
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	6906      	ldr	r6, [r0, #16]
 8008ae2:	f100 0814 	add.w	r8, r0, #20
 8008ae6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008aea:	1f37      	subs	r7, r6, #4
 8008aec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7ff fd53 	bl	800859c <__hi0bits>
 8008af6:	f1c0 0320 	rsb	r3, r0, #32
 8008afa:	280a      	cmp	r0, #10
 8008afc:	600b      	str	r3, [r1, #0]
 8008afe:	491b      	ldr	r1, [pc, #108]	@ (8008b6c <__b2d+0x90>)
 8008b00:	dc15      	bgt.n	8008b2e <__b2d+0x52>
 8008b02:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b06:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b0a:	45b8      	cmp	r8, r7
 8008b0c:	ea43 0501 	orr.w	r5, r3, r1
 8008b10:	bf34      	ite	cc
 8008b12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b16:	2300      	movcs	r3, #0
 8008b18:	3015      	adds	r0, #21
 8008b1a:	fa02 f000 	lsl.w	r0, r2, r0
 8008b1e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008b22:	4303      	orrs	r3, r0
 8008b24:	461c      	mov	r4, r3
 8008b26:	ec45 4b10 	vmov	d0, r4, r5
 8008b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2e:	45b8      	cmp	r8, r7
 8008b30:	bf3a      	itte	cc
 8008b32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b36:	f1a6 0708 	subcc.w	r7, r6, #8
 8008b3a:	2300      	movcs	r3, #0
 8008b3c:	380b      	subs	r0, #11
 8008b3e:	d012      	beq.n	8008b66 <__b2d+0x8a>
 8008b40:	f1c0 0120 	rsb	r1, r0, #32
 8008b44:	fa23 f401 	lsr.w	r4, r3, r1
 8008b48:	4082      	lsls	r2, r0
 8008b4a:	4322      	orrs	r2, r4
 8008b4c:	4547      	cmp	r7, r8
 8008b4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b52:	bf8c      	ite	hi
 8008b54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b58:	2200      	movls	r2, #0
 8008b5a:	4083      	lsls	r3, r0
 8008b5c:	40ca      	lsrs	r2, r1
 8008b5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b62:	4313      	orrs	r3, r2
 8008b64:	e7de      	b.n	8008b24 <__b2d+0x48>
 8008b66:	ea42 0501 	orr.w	r5, r2, r1
 8008b6a:	e7db      	b.n	8008b24 <__b2d+0x48>
 8008b6c:	3ff00000 	.word	0x3ff00000

08008b70 <__d2b>:
 8008b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b74:	460f      	mov	r7, r1
 8008b76:	2101      	movs	r1, #1
 8008b78:	ec59 8b10 	vmov	r8, r9, d0
 8008b7c:	4616      	mov	r6, r2
 8008b7e:	f7ff fc1b 	bl	80083b8 <_Balloc>
 8008b82:	4604      	mov	r4, r0
 8008b84:	b930      	cbnz	r0, 8008b94 <__d2b+0x24>
 8008b86:	4602      	mov	r2, r0
 8008b88:	4b23      	ldr	r3, [pc, #140]	@ (8008c18 <__d2b+0xa8>)
 8008b8a:	4824      	ldr	r0, [pc, #144]	@ (8008c1c <__d2b+0xac>)
 8008b8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b90:	f000 f9aa 	bl	8008ee8 <__assert_func>
 8008b94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b9c:	b10d      	cbz	r5, 8008ba2 <__d2b+0x32>
 8008b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	f1b8 0300 	subs.w	r3, r8, #0
 8008ba8:	d023      	beq.n	8008bf2 <__d2b+0x82>
 8008baa:	4668      	mov	r0, sp
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	f7ff fd14 	bl	80085da <__lo0bits>
 8008bb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bb6:	b1d0      	cbz	r0, 8008bee <__d2b+0x7e>
 8008bb8:	f1c0 0320 	rsb	r3, r0, #32
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	40c2      	lsrs	r2, r0
 8008bc4:	6163      	str	r3, [r4, #20]
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	61a3      	str	r3, [r4, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bf0c      	ite	eq
 8008bd0:	2201      	moveq	r2, #1
 8008bd2:	2202      	movne	r2, #2
 8008bd4:	6122      	str	r2, [r4, #16]
 8008bd6:	b1a5      	cbz	r5, 8008c02 <__d2b+0x92>
 8008bd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bdc:	4405      	add	r5, r0
 8008bde:	603d      	str	r5, [r7, #0]
 8008be0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008be4:	6030      	str	r0, [r6, #0]
 8008be6:	4620      	mov	r0, r4
 8008be8:	b003      	add	sp, #12
 8008bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bee:	6161      	str	r1, [r4, #20]
 8008bf0:	e7ea      	b.n	8008bc8 <__d2b+0x58>
 8008bf2:	a801      	add	r0, sp, #4
 8008bf4:	f7ff fcf1 	bl	80085da <__lo0bits>
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	6163      	str	r3, [r4, #20]
 8008bfc:	3020      	adds	r0, #32
 8008bfe:	2201      	movs	r2, #1
 8008c00:	e7e8      	b.n	8008bd4 <__d2b+0x64>
 8008c02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c0a:	6038      	str	r0, [r7, #0]
 8008c0c:	6918      	ldr	r0, [r3, #16]
 8008c0e:	f7ff fcc5 	bl	800859c <__hi0bits>
 8008c12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c16:	e7e5      	b.n	8008be4 <__d2b+0x74>
 8008c18:	08009606 	.word	0x08009606
 8008c1c:	080096c1 	.word	0x080096c1

08008c20 <__ratio>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	b085      	sub	sp, #20
 8008c26:	e9cd 1000 	strd	r1, r0, [sp]
 8008c2a:	a902      	add	r1, sp, #8
 8008c2c:	f7ff ff56 	bl	8008adc <__b2d>
 8008c30:	9800      	ldr	r0, [sp, #0]
 8008c32:	a903      	add	r1, sp, #12
 8008c34:	ec55 4b10 	vmov	r4, r5, d0
 8008c38:	f7ff ff50 	bl	8008adc <__b2d>
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	6919      	ldr	r1, [r3, #16]
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	1ac9      	subs	r1, r1, r3
 8008c46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	ec5b ab10 	vmov	sl, fp, d0
 8008c50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfce      	itee	gt
 8008c58:	462a      	movgt	r2, r5
 8008c5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c5e:	465a      	movle	r2, fp
 8008c60:	462f      	mov	r7, r5
 8008c62:	46d9      	mov	r9, fp
 8008c64:	bfcc      	ite	gt
 8008c66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c6a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c6e:	464b      	mov	r3, r9
 8008c70:	4652      	mov	r2, sl
 8008c72:	4620      	mov	r0, r4
 8008c74:	4639      	mov	r1, r7
 8008c76:	f7f7 fe01 	bl	800087c <__aeabi_ddiv>
 8008c7a:	ec41 0b10 	vmov	d0, r0, r1
 8008c7e:	b005      	add	sp, #20
 8008c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c84 <__copybits>:
 8008c84:	3901      	subs	r1, #1
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	1149      	asrs	r1, r1, #5
 8008c8a:	6914      	ldr	r4, [r2, #16]
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	f102 0314 	add.w	r3, r2, #20
 8008c92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c9a:	1f05      	subs	r5, r0, #4
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d30c      	bcc.n	8008cba <__copybits+0x36>
 8008ca0:	1aa3      	subs	r3, r4, r2
 8008ca2:	3b11      	subs	r3, #17
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	3211      	adds	r2, #17
 8008caa:	42a2      	cmp	r2, r4
 8008cac:	bf88      	it	hi
 8008cae:	2300      	movhi	r3, #0
 8008cb0:	4418      	add	r0, r3
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4288      	cmp	r0, r1
 8008cb6:	d305      	bcc.n	8008cc4 <__copybits+0x40>
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
 8008cba:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cc2:	e7eb      	b.n	8008c9c <__copybits+0x18>
 8008cc4:	f840 3b04 	str.w	r3, [r0], #4
 8008cc8:	e7f4      	b.n	8008cb4 <__copybits+0x30>

08008cca <__any_on>:
 8008cca:	f100 0214 	add.w	r2, r0, #20
 8008cce:	6900      	ldr	r0, [r0, #16]
 8008cd0:	114b      	asrs	r3, r1, #5
 8008cd2:	4298      	cmp	r0, r3
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	db11      	blt.n	8008cfc <__any_on+0x32>
 8008cd8:	dd0a      	ble.n	8008cf0 <__any_on+0x26>
 8008cda:	f011 011f 	ands.w	r1, r1, #31
 8008cde:	d007      	beq.n	8008cf0 <__any_on+0x26>
 8008ce0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ce4:	fa24 f001 	lsr.w	r0, r4, r1
 8008ce8:	fa00 f101 	lsl.w	r1, r0, r1
 8008cec:	428c      	cmp	r4, r1
 8008cee:	d10b      	bne.n	8008d08 <__any_on+0x3e>
 8008cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d803      	bhi.n	8008d00 <__any_on+0x36>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	bd10      	pop	{r4, pc}
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	e7f7      	b.n	8008cf0 <__any_on+0x26>
 8008d00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d0f5      	beq.n	8008cf4 <__any_on+0x2a>
 8008d08:	2001      	movs	r0, #1
 8008d0a:	e7f6      	b.n	8008cfa <__any_on+0x30>

08008d0c <__sread>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	460c      	mov	r4, r1
 8008d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d14:	f000 f8a4 	bl	8008e60 <_read_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	bfab      	itete	ge
 8008d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d20:	181b      	addge	r3, r3, r0
 8008d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d26:	bfac      	ite	ge
 8008d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d2a:	81a3      	strhlt	r3, [r4, #12]
 8008d2c:	bd10      	pop	{r4, pc}

08008d2e <__swrite>:
 8008d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	461f      	mov	r7, r3
 8008d34:	898b      	ldrh	r3, [r1, #12]
 8008d36:	05db      	lsls	r3, r3, #23
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	d505      	bpl.n	8008d4c <__swrite+0x1e>
 8008d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d44:	2302      	movs	r3, #2
 8008d46:	2200      	movs	r2, #0
 8008d48:	f000 f878 	bl	8008e3c <_lseek_r>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	f000 b89f 	b.w	8008ea4 <_write_r>

08008d66 <__sseek>:
 8008d66:	b510      	push	{r4, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 f865 	bl	8008e3c <_lseek_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	bf15      	itete	ne
 8008d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d82:	81a3      	strheq	r3, [r4, #12]
 8008d84:	bf18      	it	ne
 8008d86:	81a3      	strhne	r3, [r4, #12]
 8008d88:	bd10      	pop	{r4, pc}

08008d8a <__sclose>:
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	f000 b89b 	b.w	8008ec8 <_close_r>

08008d92 <_realloc_r>:
 8008d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d96:	4607      	mov	r7, r0
 8008d98:	4614      	mov	r4, r2
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	b921      	cbnz	r1, 8008da8 <_realloc_r+0x16>
 8008d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	4611      	mov	r1, r2
 8008da4:	f7ff b832 	b.w	8007e0c <_malloc_r>
 8008da8:	b92a      	cbnz	r2, 8008db6 <_realloc_r+0x24>
 8008daa:	f000 f8cf 	bl	8008f4c <_free_r>
 8008dae:	4625      	mov	r5, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db6:	f000 f91b 	bl	8008ff0 <_malloc_usable_size_r>
 8008dba:	4284      	cmp	r4, r0
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	d802      	bhi.n	8008dc6 <_realloc_r+0x34>
 8008dc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dc4:	d8f4      	bhi.n	8008db0 <_realloc_r+0x1e>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7ff f81f 	bl	8007e0c <_malloc_r>
 8008dce:	4680      	mov	r8, r0
 8008dd0:	b908      	cbnz	r0, 8008dd6 <_realloc_r+0x44>
 8008dd2:	4645      	mov	r5, r8
 8008dd4:	e7ec      	b.n	8008db0 <_realloc_r+0x1e>
 8008dd6:	42b4      	cmp	r4, r6
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	bf28      	it	cs
 8008dde:	4632      	movcs	r2, r6
 8008de0:	f7fe fb4b 	bl	800747a <memcpy>
 8008de4:	4629      	mov	r1, r5
 8008de6:	4638      	mov	r0, r7
 8008de8:	f000 f8b0 	bl	8008f4c <_free_r>
 8008dec:	e7f1      	b.n	8008dd2 <_realloc_r+0x40>

08008dee <__ascii_wctomb>:
 8008dee:	4603      	mov	r3, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	b141      	cbz	r1, 8008e06 <__ascii_wctomb+0x18>
 8008df4:	2aff      	cmp	r2, #255	@ 0xff
 8008df6:	d904      	bls.n	8008e02 <__ascii_wctomb+0x14>
 8008df8:	228a      	movs	r2, #138	@ 0x8a
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e00:	4770      	bx	lr
 8008e02:	700a      	strb	r2, [r1, #0]
 8008e04:	2001      	movs	r0, #1
 8008e06:	4770      	bx	lr

08008e08 <memmove>:
 8008e08:	4288      	cmp	r0, r1
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	eb01 0402 	add.w	r4, r1, r2
 8008e10:	d902      	bls.n	8008e18 <memmove+0x10>
 8008e12:	4284      	cmp	r4, r0
 8008e14:	4623      	mov	r3, r4
 8008e16:	d807      	bhi.n	8008e28 <memmove+0x20>
 8008e18:	1e43      	subs	r3, r0, #1
 8008e1a:	42a1      	cmp	r1, r4
 8008e1c:	d008      	beq.n	8008e30 <memmove+0x28>
 8008e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e26:	e7f8      	b.n	8008e1a <memmove+0x12>
 8008e28:	4402      	add	r2, r0
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	428a      	cmp	r2, r1
 8008e2e:	d100      	bne.n	8008e32 <memmove+0x2a>
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e3a:	e7f7      	b.n	8008e2c <memmove+0x24>

08008e3c <_lseek_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d07      	ldr	r5, [pc, #28]	@ (8008e5c <_lseek_r+0x20>)
 8008e40:	4604      	mov	r4, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	4611      	mov	r1, r2
 8008e46:	2200      	movs	r2, #0
 8008e48:	602a      	str	r2, [r5, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f7f9 fa8b 	bl	8002366 <_lseek>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_lseek_r+0x1e>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_lseek_r+0x1e>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000628 	.word	0x20000628

08008e60 <_read_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	@ (8008e80 <_read_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7f9 fa19 	bl	80022a6 <_read>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_read_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_read_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20000628 	.word	0x20000628

08008e84 <_sbrk_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	@ (8008ea0 <_sbrk_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f7f9 fa76 	bl	8002380 <_sbrk>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_sbrk_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_sbrk_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000628 	.word	0x20000628

08008ea4 <_write_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	@ (8008ec4 <_write_r+0x20>)
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4611      	mov	r1, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	602a      	str	r2, [r5, #0]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f7f9 fa14 	bl	80022e0 <_write>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_write_r+0x1e>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_write_r+0x1e>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20000628 	.word	0x20000628

08008ec8 <_close_r>:
 8008ec8:	b538      	push	{r3, r4, r5, lr}
 8008eca:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_close_r+0x1c>)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4604      	mov	r4, r0
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7f9 fa20 	bl	8002318 <_close>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_close_r+0x1a>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_close_r+0x1a>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	20000628 	.word	0x20000628

08008ee8 <__assert_func>:
 8008ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eea:	4614      	mov	r4, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	4b09      	ldr	r3, [pc, #36]	@ (8008f14 <__assert_func+0x2c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	68d8      	ldr	r0, [r3, #12]
 8008ef6:	b14c      	cbz	r4, 8008f0c <__assert_func+0x24>
 8008ef8:	4b07      	ldr	r3, [pc, #28]	@ (8008f18 <__assert_func+0x30>)
 8008efa:	9100      	str	r1, [sp, #0]
 8008efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f00:	4906      	ldr	r1, [pc, #24]	@ (8008f1c <__assert_func+0x34>)
 8008f02:	462b      	mov	r3, r5
 8008f04:	f000 f87c 	bl	8009000 <fiprintf>
 8008f08:	f000 f88c 	bl	8009024 <abort>
 8008f0c:	4b04      	ldr	r3, [pc, #16]	@ (8008f20 <__assert_func+0x38>)
 8008f0e:	461c      	mov	r4, r3
 8008f10:	e7f3      	b.n	8008efa <__assert_func+0x12>
 8008f12:	bf00      	nop
 8008f14:	200001d4 	.word	0x200001d4
 8008f18:	0800971a 	.word	0x0800971a
 8008f1c:	08009727 	.word	0x08009727
 8008f20:	08009755 	.word	0x08009755

08008f24 <_calloc_r>:
 8008f24:	b570      	push	{r4, r5, r6, lr}
 8008f26:	fba1 5402 	umull	r5, r4, r1, r2
 8008f2a:	b934      	cbnz	r4, 8008f3a <_calloc_r+0x16>
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7fe ff6d 	bl	8007e0c <_malloc_r>
 8008f32:	4606      	mov	r6, r0
 8008f34:	b928      	cbnz	r0, 8008f42 <_calloc_r+0x1e>
 8008f36:	4630      	mov	r0, r6
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
 8008f3a:	220c      	movs	r2, #12
 8008f3c:	6002      	str	r2, [r0, #0]
 8008f3e:	2600      	movs	r6, #0
 8008f40:	e7f9      	b.n	8008f36 <_calloc_r+0x12>
 8008f42:	462a      	mov	r2, r5
 8008f44:	4621      	mov	r1, r4
 8008f46:	f7fe fa51 	bl	80073ec <memset>
 8008f4a:	e7f4      	b.n	8008f36 <_calloc_r+0x12>

08008f4c <_free_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4605      	mov	r5, r0
 8008f50:	2900      	cmp	r1, #0
 8008f52:	d041      	beq.n	8008fd8 <_free_r+0x8c>
 8008f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f58:	1f0c      	subs	r4, r1, #4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	bfb8      	it	lt
 8008f5e:	18e4      	addlt	r4, r4, r3
 8008f60:	f7ff fa1e 	bl	80083a0 <__malloc_lock>
 8008f64:	4a1d      	ldr	r2, [pc, #116]	@ (8008fdc <_free_r+0x90>)
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	b933      	cbnz	r3, 8008f78 <_free_r+0x2c>
 8008f6a:	6063      	str	r3, [r4, #4]
 8008f6c:	6014      	str	r4, [r2, #0]
 8008f6e:	4628      	mov	r0, r5
 8008f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f74:	f7ff ba1a 	b.w	80083ac <__malloc_unlock>
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d908      	bls.n	8008f8e <_free_r+0x42>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	1821      	adds	r1, r4, r0
 8008f80:	428b      	cmp	r3, r1
 8008f82:	bf01      	itttt	eq
 8008f84:	6819      	ldreq	r1, [r3, #0]
 8008f86:	685b      	ldreq	r3, [r3, #4]
 8008f88:	1809      	addeq	r1, r1, r0
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	e7ed      	b.n	8008f6a <_free_r+0x1e>
 8008f8e:	461a      	mov	r2, r3
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	b10b      	cbz	r3, 8008f98 <_free_r+0x4c>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d9fa      	bls.n	8008f8e <_free_r+0x42>
 8008f98:	6811      	ldr	r1, [r2, #0]
 8008f9a:	1850      	adds	r0, r2, r1
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d10b      	bne.n	8008fb8 <_free_r+0x6c>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	4401      	add	r1, r0
 8008fa4:	1850      	adds	r0, r2, r1
 8008fa6:	4283      	cmp	r3, r0
 8008fa8:	6011      	str	r1, [r2, #0]
 8008faa:	d1e0      	bne.n	8008f6e <_free_r+0x22>
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	6053      	str	r3, [r2, #4]
 8008fb2:	4408      	add	r0, r1
 8008fb4:	6010      	str	r0, [r2, #0]
 8008fb6:	e7da      	b.n	8008f6e <_free_r+0x22>
 8008fb8:	d902      	bls.n	8008fc0 <_free_r+0x74>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	e7d6      	b.n	8008f6e <_free_r+0x22>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	1821      	adds	r1, r4, r0
 8008fc4:	428b      	cmp	r3, r1
 8008fc6:	bf04      	itt	eq
 8008fc8:	6819      	ldreq	r1, [r3, #0]
 8008fca:	685b      	ldreq	r3, [r3, #4]
 8008fcc:	6063      	str	r3, [r4, #4]
 8008fce:	bf04      	itt	eq
 8008fd0:	1809      	addeq	r1, r1, r0
 8008fd2:	6021      	streq	r1, [r4, #0]
 8008fd4:	6054      	str	r4, [r2, #4]
 8008fd6:	e7ca      	b.n	8008f6e <_free_r+0x22>
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	20000624 	.word	0x20000624

08008fe0 <malloc>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	@ (8008fec <malloc+0xc>)
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f7fe bf11 	b.w	8007e0c <_malloc_r>
 8008fea:	bf00      	nop
 8008fec:	200001d4 	.word	0x200001d4

08008ff0 <_malloc_usable_size_r>:
 8008ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff4:	1f18      	subs	r0, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfbc      	itt	lt
 8008ffa:	580b      	ldrlt	r3, [r1, r0]
 8008ffc:	18c0      	addlt	r0, r0, r3
 8008ffe:	4770      	bx	lr

08009000 <fiprintf>:
 8009000:	b40e      	push	{r1, r2, r3}
 8009002:	b503      	push	{r0, r1, lr}
 8009004:	4601      	mov	r1, r0
 8009006:	ab03      	add	r3, sp, #12
 8009008:	4805      	ldr	r0, [pc, #20]	@ (8009020 <fiprintf+0x20>)
 800900a:	f853 2b04 	ldr.w	r2, [r3], #4
 800900e:	6800      	ldr	r0, [r0, #0]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	f000 f837 	bl	8009084 <_vfiprintf_r>
 8009016:	b002      	add	sp, #8
 8009018:	f85d eb04 	ldr.w	lr, [sp], #4
 800901c:	b003      	add	sp, #12
 800901e:	4770      	bx	lr
 8009020:	200001d4 	.word	0x200001d4

08009024 <abort>:
 8009024:	b508      	push	{r3, lr}
 8009026:	2006      	movs	r0, #6
 8009028:	f000 fa62 	bl	80094f0 <raise>
 800902c:	2001      	movs	r0, #1
 800902e:	f7f9 f92f 	bl	8002290 <_exit>

08009032 <__sfputc_r>:
 8009032:	6893      	ldr	r3, [r2, #8]
 8009034:	3b01      	subs	r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	b410      	push	{r4}
 800903a:	6093      	str	r3, [r2, #8]
 800903c:	da08      	bge.n	8009050 <__sfputc_r+0x1e>
 800903e:	6994      	ldr	r4, [r2, #24]
 8009040:	42a3      	cmp	r3, r4
 8009042:	db01      	blt.n	8009048 <__sfputc_r+0x16>
 8009044:	290a      	cmp	r1, #10
 8009046:	d103      	bne.n	8009050 <__sfputc_r+0x1e>
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904c:	f000 b932 	b.w	80092b4 <__swbuf_r>
 8009050:	6813      	ldr	r3, [r2, #0]
 8009052:	1c58      	adds	r0, r3, #1
 8009054:	6010      	str	r0, [r2, #0]
 8009056:	7019      	strb	r1, [r3, #0]
 8009058:	4608      	mov	r0, r1
 800905a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800905e:	4770      	bx	lr

08009060 <__sfputs_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	4606      	mov	r6, r0
 8009064:	460f      	mov	r7, r1
 8009066:	4614      	mov	r4, r2
 8009068:	18d5      	adds	r5, r2, r3
 800906a:	42ac      	cmp	r4, r5
 800906c:	d101      	bne.n	8009072 <__sfputs_r+0x12>
 800906e:	2000      	movs	r0, #0
 8009070:	e007      	b.n	8009082 <__sfputs_r+0x22>
 8009072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009076:	463a      	mov	r2, r7
 8009078:	4630      	mov	r0, r6
 800907a:	f7ff ffda 	bl	8009032 <__sfputc_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d1f3      	bne.n	800906a <__sfputs_r+0xa>
 8009082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009084 <_vfiprintf_r>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	460d      	mov	r5, r1
 800908a:	b09d      	sub	sp, #116	@ 0x74
 800908c:	4614      	mov	r4, r2
 800908e:	4698      	mov	r8, r3
 8009090:	4606      	mov	r6, r0
 8009092:	b118      	cbz	r0, 800909c <_vfiprintf_r+0x18>
 8009094:	6a03      	ldr	r3, [r0, #32]
 8009096:	b90b      	cbnz	r3, 800909c <_vfiprintf_r+0x18>
 8009098:	f7fd fb64 	bl	8006764 <__sinit>
 800909c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800909e:	07d9      	lsls	r1, r3, #31
 80090a0:	d405      	bmi.n	80090ae <_vfiprintf_r+0x2a>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	059a      	lsls	r2, r3, #22
 80090a6:	d402      	bmi.n	80090ae <_vfiprintf_r+0x2a>
 80090a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090aa:	f7fe f9e4 	bl	8007476 <__retarget_lock_acquire_recursive>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	071b      	lsls	r3, r3, #28
 80090b2:	d501      	bpl.n	80090b8 <_vfiprintf_r+0x34>
 80090b4:	692b      	ldr	r3, [r5, #16]
 80090b6:	b99b      	cbnz	r3, 80090e0 <_vfiprintf_r+0x5c>
 80090b8:	4629      	mov	r1, r5
 80090ba:	4630      	mov	r0, r6
 80090bc:	f000 f938 	bl	8009330 <__swsetup_r>
 80090c0:	b170      	cbz	r0, 80090e0 <_vfiprintf_r+0x5c>
 80090c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090c4:	07dc      	lsls	r4, r3, #31
 80090c6:	d504      	bpl.n	80090d2 <_vfiprintf_r+0x4e>
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090cc:	b01d      	add	sp, #116	@ 0x74
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	0598      	lsls	r0, r3, #22
 80090d6:	d4f7      	bmi.n	80090c8 <_vfiprintf_r+0x44>
 80090d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090da:	f7fe f9cd 	bl	8007478 <__retarget_lock_release_recursive>
 80090de:	e7f3      	b.n	80090c8 <_vfiprintf_r+0x44>
 80090e0:	2300      	movs	r3, #0
 80090e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e4:	2320      	movs	r3, #32
 80090e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ee:	2330      	movs	r3, #48	@ 0x30
 80090f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092a0 <_vfiprintf_r+0x21c>
 80090f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090f8:	f04f 0901 	mov.w	r9, #1
 80090fc:	4623      	mov	r3, r4
 80090fe:	469a      	mov	sl, r3
 8009100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009104:	b10a      	cbz	r2, 800910a <_vfiprintf_r+0x86>
 8009106:	2a25      	cmp	r2, #37	@ 0x25
 8009108:	d1f9      	bne.n	80090fe <_vfiprintf_r+0x7a>
 800910a:	ebba 0b04 	subs.w	fp, sl, r4
 800910e:	d00b      	beq.n	8009128 <_vfiprintf_r+0xa4>
 8009110:	465b      	mov	r3, fp
 8009112:	4622      	mov	r2, r4
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f7ff ffa2 	bl	8009060 <__sfputs_r>
 800911c:	3001      	adds	r0, #1
 800911e:	f000 80a7 	beq.w	8009270 <_vfiprintf_r+0x1ec>
 8009122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009124:	445a      	add	r2, fp
 8009126:	9209      	str	r2, [sp, #36]	@ 0x24
 8009128:	f89a 3000 	ldrb.w	r3, [sl]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 809f 	beq.w	8009270 <_vfiprintf_r+0x1ec>
 8009132:	2300      	movs	r3, #0
 8009134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913c:	f10a 0a01 	add.w	sl, sl, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	9307      	str	r3, [sp, #28]
 8009144:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009148:	931a      	str	r3, [sp, #104]	@ 0x68
 800914a:	4654      	mov	r4, sl
 800914c:	2205      	movs	r2, #5
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4853      	ldr	r0, [pc, #332]	@ (80092a0 <_vfiprintf_r+0x21c>)
 8009154:	f7f7 f85c 	bl	8000210 <memchr>
 8009158:	9a04      	ldr	r2, [sp, #16]
 800915a:	b9d8      	cbnz	r0, 8009194 <_vfiprintf_r+0x110>
 800915c:	06d1      	lsls	r1, r2, #27
 800915e:	bf44      	itt	mi
 8009160:	2320      	movmi	r3, #32
 8009162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009166:	0713      	lsls	r3, r2, #28
 8009168:	bf44      	itt	mi
 800916a:	232b      	movmi	r3, #43	@ 0x2b
 800916c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009170:	f89a 3000 	ldrb.w	r3, [sl]
 8009174:	2b2a      	cmp	r3, #42	@ 0x2a
 8009176:	d015      	beq.n	80091a4 <_vfiprintf_r+0x120>
 8009178:	9a07      	ldr	r2, [sp, #28]
 800917a:	4654      	mov	r4, sl
 800917c:	2000      	movs	r0, #0
 800917e:	f04f 0c0a 	mov.w	ip, #10
 8009182:	4621      	mov	r1, r4
 8009184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009188:	3b30      	subs	r3, #48	@ 0x30
 800918a:	2b09      	cmp	r3, #9
 800918c:	d94b      	bls.n	8009226 <_vfiprintf_r+0x1a2>
 800918e:	b1b0      	cbz	r0, 80091be <_vfiprintf_r+0x13a>
 8009190:	9207      	str	r2, [sp, #28]
 8009192:	e014      	b.n	80091be <_vfiprintf_r+0x13a>
 8009194:	eba0 0308 	sub.w	r3, r0, r8
 8009198:	fa09 f303 	lsl.w	r3, r9, r3
 800919c:	4313      	orrs	r3, r2
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	46a2      	mov	sl, r4
 80091a2:	e7d2      	b.n	800914a <_vfiprintf_r+0xc6>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	1d19      	adds	r1, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9103      	str	r1, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfbb      	ittet	lt
 80091b0:	425b      	neglt	r3, r3
 80091b2:	f042 0202 	orrlt.w	r2, r2, #2
 80091b6:	9307      	strge	r3, [sp, #28]
 80091b8:	9307      	strlt	r3, [sp, #28]
 80091ba:	bfb8      	it	lt
 80091bc:	9204      	strlt	r2, [sp, #16]
 80091be:	7823      	ldrb	r3, [r4, #0]
 80091c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80091c2:	d10a      	bne.n	80091da <_vfiprintf_r+0x156>
 80091c4:	7863      	ldrb	r3, [r4, #1]
 80091c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c8:	d132      	bne.n	8009230 <_vfiprintf_r+0x1ac>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	1d1a      	adds	r2, r3, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	9203      	str	r2, [sp, #12]
 80091d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091d6:	3402      	adds	r4, #2
 80091d8:	9305      	str	r3, [sp, #20]
 80091da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092b0 <_vfiprintf_r+0x22c>
 80091de:	7821      	ldrb	r1, [r4, #0]
 80091e0:	2203      	movs	r2, #3
 80091e2:	4650      	mov	r0, sl
 80091e4:	f7f7 f814 	bl	8000210 <memchr>
 80091e8:	b138      	cbz	r0, 80091fa <_vfiprintf_r+0x176>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	eba0 000a 	sub.w	r0, r0, sl
 80091f0:	2240      	movs	r2, #64	@ 0x40
 80091f2:	4082      	lsls	r2, r0
 80091f4:	4313      	orrs	r3, r2
 80091f6:	3401      	adds	r4, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fe:	4829      	ldr	r0, [pc, #164]	@ (80092a4 <_vfiprintf_r+0x220>)
 8009200:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009204:	2206      	movs	r2, #6
 8009206:	f7f7 f803 	bl	8000210 <memchr>
 800920a:	2800      	cmp	r0, #0
 800920c:	d03f      	beq.n	800928e <_vfiprintf_r+0x20a>
 800920e:	4b26      	ldr	r3, [pc, #152]	@ (80092a8 <_vfiprintf_r+0x224>)
 8009210:	bb1b      	cbnz	r3, 800925a <_vfiprintf_r+0x1d6>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	3307      	adds	r3, #7
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	3308      	adds	r3, #8
 800921c:	9303      	str	r3, [sp, #12]
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	443b      	add	r3, r7
 8009222:	9309      	str	r3, [sp, #36]	@ 0x24
 8009224:	e76a      	b.n	80090fc <_vfiprintf_r+0x78>
 8009226:	fb0c 3202 	mla	r2, ip, r2, r3
 800922a:	460c      	mov	r4, r1
 800922c:	2001      	movs	r0, #1
 800922e:	e7a8      	b.n	8009182 <_vfiprintf_r+0xfe>
 8009230:	2300      	movs	r3, #0
 8009232:	3401      	adds	r4, #1
 8009234:	9305      	str	r3, [sp, #20]
 8009236:	4619      	mov	r1, r3
 8009238:	f04f 0c0a 	mov.w	ip, #10
 800923c:	4620      	mov	r0, r4
 800923e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009242:	3a30      	subs	r2, #48	@ 0x30
 8009244:	2a09      	cmp	r2, #9
 8009246:	d903      	bls.n	8009250 <_vfiprintf_r+0x1cc>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c6      	beq.n	80091da <_vfiprintf_r+0x156>
 800924c:	9105      	str	r1, [sp, #20]
 800924e:	e7c4      	b.n	80091da <_vfiprintf_r+0x156>
 8009250:	fb0c 2101 	mla	r1, ip, r1, r2
 8009254:	4604      	mov	r4, r0
 8009256:	2301      	movs	r3, #1
 8009258:	e7f0      	b.n	800923c <_vfiprintf_r+0x1b8>
 800925a:	ab03      	add	r3, sp, #12
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	462a      	mov	r2, r5
 8009260:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <_vfiprintf_r+0x228>)
 8009262:	a904      	add	r1, sp, #16
 8009264:	4630      	mov	r0, r6
 8009266:	f3af 8000 	nop.w
 800926a:	4607      	mov	r7, r0
 800926c:	1c78      	adds	r0, r7, #1
 800926e:	d1d6      	bne.n	800921e <_vfiprintf_r+0x19a>
 8009270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009272:	07d9      	lsls	r1, r3, #31
 8009274:	d405      	bmi.n	8009282 <_vfiprintf_r+0x1fe>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	059a      	lsls	r2, r3, #22
 800927a:	d402      	bmi.n	8009282 <_vfiprintf_r+0x1fe>
 800927c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927e:	f7fe f8fb 	bl	8007478 <__retarget_lock_release_recursive>
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	065b      	lsls	r3, r3, #25
 8009286:	f53f af1f 	bmi.w	80090c8 <_vfiprintf_r+0x44>
 800928a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800928c:	e71e      	b.n	80090cc <_vfiprintf_r+0x48>
 800928e:	ab03      	add	r3, sp, #12
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	462a      	mov	r2, r5
 8009294:	4b05      	ldr	r3, [pc, #20]	@ (80092ac <_vfiprintf_r+0x228>)
 8009296:	a904      	add	r1, sp, #16
 8009298:	4630      	mov	r0, r6
 800929a:	f7fe feb7 	bl	800800c <_printf_i>
 800929e:	e7e4      	b.n	800926a <_vfiprintf_r+0x1e6>
 80092a0:	08009677 	.word	0x08009677
 80092a4:	08009681 	.word	0x08009681
 80092a8:	00000000 	.word	0x00000000
 80092ac:	08009061 	.word	0x08009061
 80092b0:	0800967d 	.word	0x0800967d

080092b4 <__swbuf_r>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	460e      	mov	r6, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	4605      	mov	r5, r0
 80092bc:	b118      	cbz	r0, 80092c6 <__swbuf_r+0x12>
 80092be:	6a03      	ldr	r3, [r0, #32]
 80092c0:	b90b      	cbnz	r3, 80092c6 <__swbuf_r+0x12>
 80092c2:	f7fd fa4f 	bl	8006764 <__sinit>
 80092c6:	69a3      	ldr	r3, [r4, #24]
 80092c8:	60a3      	str	r3, [r4, #8]
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	071a      	lsls	r2, r3, #28
 80092ce:	d501      	bpl.n	80092d4 <__swbuf_r+0x20>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	b943      	cbnz	r3, 80092e6 <__swbuf_r+0x32>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 f82a 	bl	8009330 <__swsetup_r>
 80092dc:	b118      	cbz	r0, 80092e6 <__swbuf_r+0x32>
 80092de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80092e2:	4638      	mov	r0, r7
 80092e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	6922      	ldr	r2, [r4, #16]
 80092ea:	1a98      	subs	r0, r3, r2
 80092ec:	6963      	ldr	r3, [r4, #20]
 80092ee:	b2f6      	uxtb	r6, r6
 80092f0:	4283      	cmp	r3, r0
 80092f2:	4637      	mov	r7, r6
 80092f4:	dc05      	bgt.n	8009302 <__swbuf_r+0x4e>
 80092f6:	4621      	mov	r1, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	f7ff f829 	bl	8008350 <_fflush_r>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d1ed      	bne.n	80092de <__swbuf_r+0x2a>
 8009302:	68a3      	ldr	r3, [r4, #8]
 8009304:	3b01      	subs	r3, #1
 8009306:	60a3      	str	r3, [r4, #8]
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	6022      	str	r2, [r4, #0]
 800930e:	701e      	strb	r6, [r3, #0]
 8009310:	6962      	ldr	r2, [r4, #20]
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	429a      	cmp	r2, r3
 8009316:	d004      	beq.n	8009322 <__swbuf_r+0x6e>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	07db      	lsls	r3, r3, #31
 800931c:	d5e1      	bpl.n	80092e2 <__swbuf_r+0x2e>
 800931e:	2e0a      	cmp	r6, #10
 8009320:	d1df      	bne.n	80092e2 <__swbuf_r+0x2e>
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f7ff f813 	bl	8008350 <_fflush_r>
 800932a:	2800      	cmp	r0, #0
 800932c:	d0d9      	beq.n	80092e2 <__swbuf_r+0x2e>
 800932e:	e7d6      	b.n	80092de <__swbuf_r+0x2a>

08009330 <__swsetup_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4b29      	ldr	r3, [pc, #164]	@ (80093d8 <__swsetup_r+0xa8>)
 8009334:	4605      	mov	r5, r0
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	460c      	mov	r4, r1
 800933a:	b118      	cbz	r0, 8009344 <__swsetup_r+0x14>
 800933c:	6a03      	ldr	r3, [r0, #32]
 800933e:	b90b      	cbnz	r3, 8009344 <__swsetup_r+0x14>
 8009340:	f7fd fa10 	bl	8006764 <__sinit>
 8009344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009348:	0719      	lsls	r1, r3, #28
 800934a:	d422      	bmi.n	8009392 <__swsetup_r+0x62>
 800934c:	06da      	lsls	r2, r3, #27
 800934e:	d407      	bmi.n	8009360 <__swsetup_r+0x30>
 8009350:	2209      	movs	r2, #9
 8009352:	602a      	str	r2, [r5, #0]
 8009354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800935e:	e033      	b.n	80093c8 <__swsetup_r+0x98>
 8009360:	0758      	lsls	r0, r3, #29
 8009362:	d512      	bpl.n	800938a <__swsetup_r+0x5a>
 8009364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009366:	b141      	cbz	r1, 800937a <__swsetup_r+0x4a>
 8009368:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__swsetup_r+0x46>
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff fdeb 	bl	8008f4c <_free_r>
 8009376:	2300      	movs	r3, #0
 8009378:	6363      	str	r3, [r4, #52]	@ 0x34
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f043 0308 	orr.w	r3, r3, #8
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	b94b      	cbnz	r3, 80093aa <__swsetup_r+0x7a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800939c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a0:	d003      	beq.n	80093aa <__swsetup_r+0x7a>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f83f 	bl	8009428 <__smakebuf_r>
 80093aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ae:	f013 0201 	ands.w	r2, r3, #1
 80093b2:	d00a      	beq.n	80093ca <__swsetup_r+0x9a>
 80093b4:	2200      	movs	r2, #0
 80093b6:	60a2      	str	r2, [r4, #8]
 80093b8:	6962      	ldr	r2, [r4, #20]
 80093ba:	4252      	negs	r2, r2
 80093bc:	61a2      	str	r2, [r4, #24]
 80093be:	6922      	ldr	r2, [r4, #16]
 80093c0:	b942      	cbnz	r2, 80093d4 <__swsetup_r+0xa4>
 80093c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093c6:	d1c5      	bne.n	8009354 <__swsetup_r+0x24>
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	0799      	lsls	r1, r3, #30
 80093cc:	bf58      	it	pl
 80093ce:	6962      	ldrpl	r2, [r4, #20]
 80093d0:	60a2      	str	r2, [r4, #8]
 80093d2:	e7f4      	b.n	80093be <__swsetup_r+0x8e>
 80093d4:	2000      	movs	r0, #0
 80093d6:	e7f7      	b.n	80093c8 <__swsetup_r+0x98>
 80093d8:	200001d4 	.word	0x200001d4

080093dc <__swhatbuf_r>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	460c      	mov	r4, r1
 80093e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e4:	2900      	cmp	r1, #0
 80093e6:	b096      	sub	sp, #88	@ 0x58
 80093e8:	4615      	mov	r5, r2
 80093ea:	461e      	mov	r6, r3
 80093ec:	da0d      	bge.n	800940a <__swhatbuf_r+0x2e>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093f4:	f04f 0100 	mov.w	r1, #0
 80093f8:	bf14      	ite	ne
 80093fa:	2340      	movne	r3, #64	@ 0x40
 80093fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009400:	2000      	movs	r0, #0
 8009402:	6031      	str	r1, [r6, #0]
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	b016      	add	sp, #88	@ 0x58
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	466a      	mov	r2, sp
 800940c:	f000 f89c 	bl	8009548 <_fstat_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	dbec      	blt.n	80093ee <__swhatbuf_r+0x12>
 8009414:	9901      	ldr	r1, [sp, #4]
 8009416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800941a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800941e:	4259      	negs	r1, r3
 8009420:	4159      	adcs	r1, r3
 8009422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009426:	e7eb      	b.n	8009400 <__swhatbuf_r+0x24>

08009428 <__smakebuf_r>:
 8009428:	898b      	ldrh	r3, [r1, #12]
 800942a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800942c:	079d      	lsls	r5, r3, #30
 800942e:	4606      	mov	r6, r0
 8009430:	460c      	mov	r4, r1
 8009432:	d507      	bpl.n	8009444 <__smakebuf_r+0x1c>
 8009434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	6123      	str	r3, [r4, #16]
 800943c:	2301      	movs	r3, #1
 800943e:	6163      	str	r3, [r4, #20]
 8009440:	b003      	add	sp, #12
 8009442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009444:	ab01      	add	r3, sp, #4
 8009446:	466a      	mov	r2, sp
 8009448:	f7ff ffc8 	bl	80093dc <__swhatbuf_r>
 800944c:	9f00      	ldr	r7, [sp, #0]
 800944e:	4605      	mov	r5, r0
 8009450:	4639      	mov	r1, r7
 8009452:	4630      	mov	r0, r6
 8009454:	f7fe fcda 	bl	8007e0c <_malloc_r>
 8009458:	b948      	cbnz	r0, 800946e <__smakebuf_r+0x46>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	059a      	lsls	r2, r3, #22
 8009460:	d4ee      	bmi.n	8009440 <__smakebuf_r+0x18>
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	f043 0302 	orr.w	r3, r3, #2
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	e7e2      	b.n	8009434 <__smakebuf_r+0xc>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	6020      	str	r0, [r4, #0]
 8009472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	9b01      	ldr	r3, [sp, #4]
 800947a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800947e:	b15b      	cbz	r3, 8009498 <__smakebuf_r+0x70>
 8009480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009484:	4630      	mov	r0, r6
 8009486:	f000 f83b 	bl	8009500 <_isatty_r>
 800948a:	b128      	cbz	r0, 8009498 <__smakebuf_r+0x70>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	f043 0301 	orr.w	r3, r3, #1
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	431d      	orrs	r5, r3
 800949c:	81a5      	strh	r5, [r4, #12]
 800949e:	e7cf      	b.n	8009440 <__smakebuf_r+0x18>

080094a0 <_raise_r>:
 80094a0:	291f      	cmp	r1, #31
 80094a2:	b538      	push	{r3, r4, r5, lr}
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	d904      	bls.n	80094b4 <_raise_r+0x14>
 80094aa:	2316      	movs	r3, #22
 80094ac:	6003      	str	r3, [r0, #0]
 80094ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094b6:	b112      	cbz	r2, 80094be <_raise_r+0x1e>
 80094b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094bc:	b94b      	cbnz	r3, 80094d2 <_raise_r+0x32>
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 f840 	bl	8009544 <_getpid_r>
 80094c4:	4622      	mov	r2, r4
 80094c6:	4601      	mov	r1, r0
 80094c8:	4628      	mov	r0, r5
 80094ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ce:	f000 b827 	b.w	8009520 <_kill_r>
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d00a      	beq.n	80094ec <_raise_r+0x4c>
 80094d6:	1c59      	adds	r1, r3, #1
 80094d8:	d103      	bne.n	80094e2 <_raise_r+0x42>
 80094da:	2316      	movs	r3, #22
 80094dc:	6003      	str	r3, [r0, #0]
 80094de:	2001      	movs	r0, #1
 80094e0:	e7e7      	b.n	80094b2 <_raise_r+0x12>
 80094e2:	2100      	movs	r1, #0
 80094e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094e8:	4620      	mov	r0, r4
 80094ea:	4798      	blx	r3
 80094ec:	2000      	movs	r0, #0
 80094ee:	e7e0      	b.n	80094b2 <_raise_r+0x12>

080094f0 <raise>:
 80094f0:	4b02      	ldr	r3, [pc, #8]	@ (80094fc <raise+0xc>)
 80094f2:	4601      	mov	r1, r0
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f7ff bfd3 	b.w	80094a0 <_raise_r>
 80094fa:	bf00      	nop
 80094fc:	200001d4 	.word	0x200001d4

08009500 <_isatty_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	@ (800951c <_isatty_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 ff20 	bl	8002350 <_isatty>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_isatty_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_isatty_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	20000628 	.word	0x20000628

08009520 <_kill_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d07      	ldr	r5, [pc, #28]	@ (8009540 <_kill_r+0x20>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	602b      	str	r3, [r5, #0]
 800952e:	f7f8 fe9f 	bl	8002270 <_kill>
 8009532:	1c43      	adds	r3, r0, #1
 8009534:	d102      	bne.n	800953c <_kill_r+0x1c>
 8009536:	682b      	ldr	r3, [r5, #0]
 8009538:	b103      	cbz	r3, 800953c <_kill_r+0x1c>
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	bf00      	nop
 8009540:	20000628 	.word	0x20000628

08009544 <_getpid_r>:
 8009544:	f7f8 be8c 	b.w	8002260 <_getpid>

08009548 <_fstat_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	@ (8009568 <_fstat_r+0x20>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	4611      	mov	r1, r2
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	f7f8 feeb 	bl	8002330 <_fstat>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d102      	bne.n	8009564 <_fstat_r+0x1c>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	b103      	cbz	r3, 8009564 <_fstat_r+0x1c>
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	bd38      	pop	{r3, r4, r5, pc}
 8009566:	bf00      	nop
 8009568:	20000628 	.word	0x20000628

0800956c <_init>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

08009578 <_fini>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr
